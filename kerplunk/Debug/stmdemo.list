
stmdemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008394  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  08008564  08008564  00009564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d9c  08008d9c  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008d9c  08008d9c  00009d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008da4  08008da4  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da4  08008da4  00009da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008da8  08008da8  00009da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008dac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000074  08008e20  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08008e20  0000a5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2d9  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024eb  00000000  00000000  0001837d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a8  00000000  00000000  0001b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc4  00000000  00000000  0001bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127e0  00000000  00000000  0003ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb9ed  00000000  00000000  0005164c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038dc  00000000  00000000  0011d07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00120958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800854c 	.word	0x0800854c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800854c 	.word	0x0800854c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <UART_Print>:
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
static void SD_Card_Test(void);
/* USER CODE BEGIN PFP */
static void UART_Print(char* str)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb23 	bl	8000210 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2364      	movs	r3, #100	@ 0x64
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <UART_Print+0x24>)
 8000bd4:	f002 fad4 	bl	8003180 <HAL_UART_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000e8 	.word	0x200000e8

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fd10 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 fa2c 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 faf6 	bl	80011e0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000bf4:	f000 fa94 	bl	8001120 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 fac8 	bl	800118c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000bfc:	f002 fe7c 	bl	80038f8 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  //Test The SD Card
  SD_Card_Test();
 8000c00:	f000 f808 	bl	8000c14 <SD_Card_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f000 fd72 	bl	80016f0 <HAL_Delay>
	  SD_Card_Test();
 8000c0c:	f000 f802 	bl	8000c14 <SD_Card_Test>
	  HAL_Delay(1000);
 8000c10:	bf00      	nop
 8000c12:	e7f7      	b.n	8000c04 <main+0x20>

08000c14 <SD_Card_Test>:
  }
  /* USER CODE END 3 */
}

static void SD_Card_Test(void)
{
 8000c14:	b5b0      	push	{r4, r5, r7, lr}
 8000c16:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, "", 1);
 8000c1e:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000c22:	f103 0310 	add.w	r3, r3, #16
 8000c26:	3b04      	subs	r3, #4
 8000c28:	2201      	movs	r2, #1
 8000c2a:	49b4      	ldr	r1, [pc, #720]	@ (8000efc <SD_Card_Test+0x2e8>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fd6f 	bl	8006710 <f_mount>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000c38:	f102 020f 	add.w	r2, r2, #15
 8000c3c:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000c3e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000c42:	f103 030f 	add.w	r3, r3, #15
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00d      	beq.n	8000c68 <SD_Card_Test+0x54>
    {
      sprintf(TxBuffer, "AGH! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c4c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000c50:	f103 030f 	add.w	r3, r3, #15
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	49a9      	ldr	r1, [pc, #676]	@ (8000f00 <SD_Card_Test+0x2ec>)
 8000c5a:	48aa      	ldr	r0, [pc, #680]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000c5c:	f006 ffd6 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 8000c60:	48a8      	ldr	r0, [pc, #672]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000c62:	f7ff ffab 	bl	8000bbc <UART_Print>
      break;
 8000c66:	e1b4      	b.n	8000fd2 <SD_Card_Test+0x3be>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000c68:	49a7      	ldr	r1, [pc, #668]	@ (8000f08 <SD_Card_Test+0x2f4>)
 8000c6a:	48a6      	ldr	r0, [pc, #664]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000c6c:	f006 ffce 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000c70:	48a4      	ldr	r0, [pc, #656]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000c72:	f7ff ffa3 	bl	8000bbc <UART_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000c76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c7a:	3a38      	subs	r2, #56	@ 0x38
 8000c7c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000c80:	3b04      	subs	r3, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	489d      	ldr	r0, [pc, #628]	@ (8000efc <SD_Card_Test+0x2e8>)
 8000c86:	f006 fd10 	bl	80076aa <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000c8a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c8e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	3b02      	subs	r3, #2
 8000c96:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000c9a:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8000c9e:	8952      	ldrh	r2, [r2, #10]
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd77 	bl	8000798 <__aeabi_ui2d>
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	4b97      	ldr	r3, [pc, #604]	@ (8000f0c <SD_Card_Test+0x2f8>)
 8000cb0:	f7ff fb06 	bl	80002c0 <__aeabi_dmul>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff fde6 	bl	800088c <__aeabi_d2uiz>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000cc6:	f102 0208 	add.w	r2, r2, #8
 8000cca:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000ccc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cd0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000cd4:	895b      	ldrh	r3, [r3, #10]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cdc:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000ce0:	fb02 f303 	mul.w	r3, r2, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd57 	bl	8000798 <__aeabi_ui2d>
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	4b87      	ldr	r3, [pc, #540]	@ (8000f0c <SD_Card_Test+0x2f8>)
 8000cf0:	f7ff fae6 	bl	80002c0 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff fdc6 	bl	800088c <__aeabi_d2uiz>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000d06:	f102 0204 	add.w	r2, r2, #4
 8000d0a:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000d0c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d10:	f103 0308 	add.w	r3, r3, #8
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	497e      	ldr	r1, [pc, #504]	@ (8000f10 <SD_Card_Test+0x2fc>)
 8000d18:	487a      	ldr	r0, [pc, #488]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d1a:	f006 ff77 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000d1e:	4879      	ldr	r0, [pc, #484]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d20:	f7ff ff4c 	bl	8000bbc <UART_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000d24:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d28:	f103 0304 	add.w	r3, r3, #4
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4979      	ldr	r1, [pc, #484]	@ (8000f14 <SD_Card_Test+0x300>)
 8000d30:	4874      	ldr	r0, [pc, #464]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d32:	f006 ff6b 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000d36:	4873      	ldr	r0, [pc, #460]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d38:	f7ff ff40 	bl	8000bbc <UART_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000d3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d40:	3b34      	subs	r3, #52	@ 0x34
 8000d42:	220b      	movs	r2, #11
 8000d44:	4974      	ldr	r1, [pc, #464]	@ (8000f18 <SD_Card_Test+0x304>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 fd28 	bl	800679c <f_open>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000d52:	f102 020f 	add.w	r2, r2, #15
 8000d56:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000d58:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d5c:	f103 030f 	add.w	r3, r3, #15
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00d      	beq.n	8000d82 <SD_Card_Test+0x16e>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000d66:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000d6a:	f103 030f 	add.w	r3, r3, #15
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	496a      	ldr	r1, [pc, #424]	@ (8000f1c <SD_Card_Test+0x308>)
 8000d74:	4863      	ldr	r0, [pc, #396]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d76:	f006 ff49 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 8000d7a:	4862      	ldr	r0, [pc, #392]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d7c:	f7ff ff1e 	bl	8000bbc <UART_Print>
      break;
 8000d80:	e127      	b.n	8000fd2 <SD_Card_Test+0x3be>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000d82:	4967      	ldr	r1, [pc, #412]	@ (8000f20 <SD_Card_Test+0x30c>)
 8000d84:	485f      	ldr	r0, [pc, #380]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d86:	f006 ff41 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000d8a:	485e      	ldr	r0, [pc, #376]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000d8c:	f7ff ff16 	bl	8000bbc <UART_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000d90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d94:	3b34      	subs	r3, #52	@ 0x34
 8000d96:	4619      	mov	r1, r3
 8000d98:	4862      	ldr	r0, [pc, #392]	@ (8000f24 <SD_Card_Test+0x310>)
 8000d9a:	f006 fdf0 	bl	800797e <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	3b0c      	subs	r3, #12
 8000da4:	4a60      	ldr	r2, [pc, #384]	@ (8000f28 <SD_Card_Test+0x314>)
 8000da6:	461c      	mov	r4, r3
 8000da8:	4615      	mov	r5, r2
 8000daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dba:	c403      	stmia	r4!, {r0, r1}
 8000dbc:	7022      	strb	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	3b0c      	subs	r3, #12
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa23 	bl	8000210 <strlen>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000dd0:	f107 0110 	add.w	r1, r7, #16
 8000dd4:	390c      	subs	r1, #12
 8000dd6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000dda:	3834      	subs	r0, #52	@ 0x34
 8000ddc:	f006 f805 	bl	8006dea <f_write>
    // Close The File
    f_close(&Fil);
 8000de0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000de4:	3b34      	subs	r3, #52	@ 0x34
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 fa11 	bl	800720e <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 8000dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000df0:	3b34      	subs	r3, #52	@ 0x34
 8000df2:	2201      	movs	r2, #1
 8000df4:	4948      	ldr	r1, [pc, #288]	@ (8000f18 <SD_Card_Test+0x304>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 fcd0 	bl	800679c <f_open>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000e02:	f102 020f 	add.w	r2, r2, #15
 8000e06:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000e08:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000e0c:	f103 030f 	add.w	r3, r3, #15
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <SD_Card_Test+0x212>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8000e16:	4945      	ldr	r1, [pc, #276]	@ (8000f2c <SD_Card_Test+0x318>)
 8000e18:	483a      	ldr	r0, [pc, #232]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e1a:	f006 fef7 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 8000e1e:	4839      	ldr	r0, [pc, #228]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e20:	f7ff fecc 	bl	8000bbc <UART_Print>
      break;
 8000e24:	e0d5      	b.n	8000fd2 <SD_Card_Test+0x3be>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000e26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e2a:	3a34      	subs	r2, #52	@ 0x34
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	3b0c      	subs	r3, #12
 8000e32:	21c8      	movs	r1, #200	@ 0xc8
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 fced 	bl	8007814 <f_gets>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	3b0c      	subs	r3, #12
 8000e40:	461a      	mov	r2, r3
 8000e42:	493b      	ldr	r1, [pc, #236]	@ (8000f30 <SD_Card_Test+0x31c>)
 8000e44:	482f      	ldr	r0, [pc, #188]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e46:	f006 fee1 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000e4a:	482e      	ldr	r0, [pc, #184]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e4c:	f7ff feb6 	bl	8000bbc <UART_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000e50:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000e54:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000e58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e5c:	3b3c      	subs	r3, #60	@ 0x3c
 8000e5e:	f107 0110 	add.w	r1, r7, #16
 8000e62:	390c      	subs	r1, #12
 8000e64:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000e68:	3834      	subs	r0, #52	@ 0x34
 8000e6a:	f005 fe5f 	bl	8006b2c <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	3b0c      	subs	r3, #12
 8000e74:	461a      	mov	r2, r3
 8000e76:	492f      	ldr	r1, [pc, #188]	@ (8000f34 <SD_Card_Test+0x320>)
 8000e78:	4822      	ldr	r0, [pc, #136]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e7a:	f006 fec7 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000e7e:	4821      	ldr	r0, [pc, #132]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e80:	f7ff fe9c 	bl	8000bbc <UART_Print>
    // Close The File
    f_close(&Fil);
 8000e84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e88:	3b34      	subs	r3, #52	@ 0x34
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 f9bf 	bl	800720e <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000e90:	4929      	ldr	r1, [pc, #164]	@ (8000f38 <SD_Card_Test+0x324>)
 8000e92:	481c      	ldr	r0, [pc, #112]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e94:	f006 feba 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000e98:	481a      	ldr	r0, [pc, #104]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000e9a:	f7ff fe8f 	bl	8000bbc <UART_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea2:	3b34      	subs	r3, #52	@ 0x34
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	491c      	ldr	r1, [pc, #112]	@ (8000f18 <SD_Card_Test+0x304>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fc77 	bl	800679c <f_open>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000eb4:	f102 020f 	add.w	r2, r2, #15
 8000eb8:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000eba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ebe:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ec6:	3b34      	subs	r3, #52	@ 0x34
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f006 f9c9 	bl	8007262 <f_lseek>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000ed6:	f102 020f 	add.w	r2, r2, #15
 8000eda:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000edc:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000ee0:	f103 030f 	add.w	r3, r3, #15
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d02a      	beq.n	8000f40 <SD_Card_Test+0x32c>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 8000eea:	4914      	ldr	r1, [pc, #80]	@ (8000f3c <SD_Card_Test+0x328>)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000eee:	f006 fe8d 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <SD_Card_Test+0x2f0>)
 8000ef4:	f7ff fe62 	bl	8000bbc <UART_Print>
      break;
 8000ef8:	e06b      	b.n	8000fd2 <SD_Card_Test+0x3be>
 8000efa:	bf00      	nop
 8000efc:	08008564 	.word	0x08008564
 8000f00:	08008568 	.word	0x08008568
 8000f04:	20000130 	.word	0x20000130
 8000f08:	08008598 	.word	0x08008598
 8000f0c:	3fe00000 	.word	0x3fe00000
 8000f10:	080085bc 	.word	0x080085bc
 8000f14:	080085dc 	.word	0x080085dc
 8000f18:	08008600 	.word	0x08008600
 8000f1c:	08008614 	.word	0x08008614
 8000f20:	08008658 	.word	0x08008658
 8000f24:	08008698 	.word	0x08008698
 8000f28:	080086d0 	.word	0x080086d0
 8000f2c:	0800870c 	.word	0x0800870c
 8000f30:	08008748 	.word	0x08008748
 8000f34:	08008780 	.word	0x08008780
 8000f38:	080087b8 	.word	0x080087b8
 8000f3c:	080087cc 	.word	0x080087cc
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 8000f40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f44:	3b34      	subs	r3, #52	@ 0x34
 8000f46:	4619      	mov	r1, r3
 8000f48:	4838      	ldr	r0, [pc, #224]	@ (800102c <SD_Card_Test+0x418>)
 8000f4a:	f006 fd18 	bl	800797e <f_puts>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f54:	f102 020f 	add.w	r2, r2, #15
 8000f58:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 8000f5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f5e:	3b34      	subs	r3, #52	@ 0x34
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 f954 	bl	800720e <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	3b0c      	subs	r3, #12
 8000f6c:	22c8      	movs	r2, #200	@ 0xc8
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fe6b 	bl	8007c4c <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 8000f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f7a:	3b34      	subs	r3, #52	@ 0x34
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	492c      	ldr	r1, [pc, #176]	@ (8001030 <SD_Card_Test+0x41c>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 fc0b 	bl	800679c <f_open>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f8c:	f102 020f 	add.w	r2, r2, #15
 8000f90:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000f92:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f96:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8000f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f9e:	3b3c      	subs	r3, #60	@ 0x3c
 8000fa0:	f107 0110 	add.w	r1, r7, #16
 8000fa4:	390c      	subs	r1, #12
 8000fa6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000faa:	3834      	subs	r0, #52	@ 0x34
 8000fac:	f005 fdbe 	bl	8006b2c <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	3b0c      	subs	r3, #12
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	491e      	ldr	r1, [pc, #120]	@ (8001034 <SD_Card_Test+0x420>)
 8000fba:	481f      	ldr	r0, [pc, #124]	@ (8001038 <SD_Card_Test+0x424>)
 8000fbc:	f006 fe26 	bl	8007c0c <siprintf>
    UART_Print(TxBuffer);
 8000fc0:	481d      	ldr	r0, [pc, #116]	@ (8001038 <SD_Card_Test+0x424>)
 8000fc2:	f7ff fdfb 	bl	8000bbc <UART_Print>
    f_close(&Fil);
 8000fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fca:	3b34      	subs	r3, #52	@ 0x34
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f91e 	bl	800720e <f_close>
        UART_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4919      	ldr	r1, [pc, #100]	@ (800103c <SD_Card_Test+0x428>)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f005 fb9a 	bl	8006710 <f_mount>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000fe2:	f102 020f 	add.w	r2, r2, #15
 8000fe6:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8000fe8:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000fec:	f103 030f 	add.w	r3, r3, #15
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00d      	beq.n	8001012 <SD_Card_Test+0x3fe>
  {
      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000ff6:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000ffa:	f103 030f 	add.w	r3, r3, #15
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	490f      	ldr	r1, [pc, #60]	@ (8001040 <SD_Card_Test+0x42c>)
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <SD_Card_Test+0x424>)
 8001006:	f006 fe01 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 800100a:	480b      	ldr	r0, [pc, #44]	@ (8001038 <SD_Card_Test+0x424>)
 800100c:	f7ff fdd6 	bl	8000bbc <UART_Print>
  } else{
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
      UART_Print(TxBuffer);
  }
}
 8001010:	e006      	b.n	8001020 <SD_Card_Test+0x40c>
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8001012:	490c      	ldr	r1, [pc, #48]	@ (8001044 <SD_Card_Test+0x430>)
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <SD_Card_Test+0x424>)
 8001016:	f006 fdf9 	bl	8007c0c <siprintf>
      UART_Print(TxBuffer);
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <SD_Card_Test+0x424>)
 800101c:	f7ff fdce 	bl	8000bbc <UART_Print>
}
 8001020:	bf00      	nop
 8001022:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bdb0      	pop	{r4, r5, r7, pc}
 800102c:	0800880c 	.word	0x0800880c
 8001030:	08008600 	.word	0x08008600
 8001034:	08008838 	.word	0x08008838
 8001038:	20000130 	.word	0x20000130
 800103c:	08008564 	.word	0x08008564
 8001040:	0800886c 	.word	0x0800886c
 8001044:	080088a4 	.word	0x080088a4

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2234      	movs	r2, #52	@ 0x34
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fdf8 	bl	8007c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <SystemClock_Config+0xd0>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <SystemClock_Config+0xd0>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	@ 0x40
 800107c:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <SystemClock_Config+0xd0>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <SystemClock_Config+0xd4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <SystemClock_Config+0xd4>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <SystemClock_Config+0xd4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010bc:	2308      	movs	r3, #8
 80010be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010c0:	2348      	movs	r3, #72	@ 0x48
 80010c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 f90d 	bl	80022f4 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010e0:	f000 f8fc 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fdad 	bl	8001c60 <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800110c:	f000 f8e6 	bl	80012dc <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3750      	adds	r7, #80	@ 0x50
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <MX_SPI3_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI3_Init+0x64>)
 800112c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI3_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI3_Init+0x64>)
 800114c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001150:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001154:	2218      	movs	r2, #24
 8001156:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_SPI3_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI3_Init+0x64>)
 800116c:	220a      	movs	r2, #10
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_SPI3_Init+0x64>)
 8001172:	f001 fb5d 	bl	8002830 <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 f8ae 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000090 	.word	0x20000090
 8001188:	40003c00 	.word	0x40003c00

0800118c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_USART2_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f001 ff8c 	bl	80030e0 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f885 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000e8 	.word	0x200000e8
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a34      	ldr	r2, [pc, #208]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a2d      	ldr	r2, [pc, #180]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_GPIO_Init+0xf0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2121      	movs	r1, #33	@ 0x21
 800126a:	481a      	ldr	r0, [pc, #104]	@ (80012d4 <MX_GPIO_Init+0xf4>)
 800126c:	f000 fcde 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001276:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_GPIO_Init+0xf8>)
 8001288:	f000 fb3c 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800129c:	2307      	movs	r3, #7
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_GPIO_Init+0xf8>)
 80012a8:	f000 fb2c 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80012ac:	2321      	movs	r3, #33	@ 0x21
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <MX_GPIO_Init+0xf4>)
 80012c4:	f000 fb1e 	bl	8001904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020800 	.word	0x40020800

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001326:	2007      	movs	r0, #7
 8001328:	f000 fab8 	bl	800189c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <HAL_SPI_MspInit+0xc0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d14a      	bne.n	80013f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a26      	ldr	r2, [pc, #152]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013be:	2307      	movs	r3, #7
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480d      	ldr	r0, [pc, #52]	@ (8001400 <HAL_SPI_MspInit+0xc8>)
 80013ca:	f000 fa9b 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e0:	2306      	movs	r3, #6
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <HAL_SPI_MspInit+0xcc>)
 80013ec:	f000 fa8a 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40003c00 	.word	0x40003c00
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_UART_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12b      	bne.n	8001482 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_UART_MspInit+0x88>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001472:	2307      	movs	r3, #7
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_UART_MspInit+0x8c>)
 800147e:	f000 fa41 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	@ 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <NMI_Handler+0x4>

080014a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <MemManage_Handler+0x4>

080014b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <UsageFault_Handler+0x4>

080014c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <SysTick_Handler+0x34>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <SysTick_Handler+0x18>
    Timer1--;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <SysTick_Handler+0x34>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <SysTick_Handler+0x34>)
 8001502:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <SysTick_Handler+0x38>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <SysTick_Handler+0x2c>
    Timer2--;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <SysTick_Handler+0x38>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <SysTick_Handler+0x38>)
 8001516:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f8ca 	bl	80016b0 <HAL_IncTick>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000023c 	.word	0x2000023c
 8001524:	2000023e 	.word	0x2000023e

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f006 fb80 	bl	8007c5c <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20020000 	.word	0x20020000
 8001588:	00000400 	.word	0x00000400
 800158c:	2000022c 	.word	0x2000022c
 8001590:	200005c0 	.word	0x200005c0

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f006 fb3f 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fafb 	bl	8000be4 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015fc:	08008dac 	.word	0x08008dac
  ldr r2, =_sbss
 8001600:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001604:	200005c0 	.word	0x200005c0

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	@ (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f931 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fe52 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f93b 	bl	80018ea <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800168c:	f000 f911 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000230 	.word	0x20000230

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000230 	.word	0x20000230

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	@ (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	@ (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff47 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff5c 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff8e 	bl	80017f0 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffb0 	bl	8001858 <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e165      	b.n	8001bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8154 	bne.w	8001be6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ae 	beq.w	8001be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a5c      	ldr	r2, [pc, #368]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x308>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x310>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x314>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_GPIO_Init+0x318>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_GPIO_Init+0x31c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x206>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_GPIO_Init+0x320>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x202>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae96 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b68      	ldr	r3, [pc, #416]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d90c      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b65      	ldr	r3, [pc, #404]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d044      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e067      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4934      	ldr	r1, [pc, #208]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fcc2 	bl	80016d8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff fcbe 	bl	80016d8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d20c      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f855 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fc22 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08008910 	.word	0x08008910
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08008920 	.word	0x08008920

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff ffdc 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0b5b      	lsrs	r3, r3, #13
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08008920 	.word	0x08008920

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e98:	b0ae      	sub	sp, #184	@ 0xb8
 8001e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eba:	4bcb      	ldr	r3, [pc, #812]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	f200 8206 	bhi.w	80022d4 <HAL_RCC_GetSysClockFreq+0x440>
 8001ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001f05 	.word	0x08001f05
 8001ed4:	080022d5 	.word	0x080022d5
 8001ed8:	080022d5 	.word	0x080022d5
 8001edc:	080022d5 	.word	0x080022d5
 8001ee0:	08001f0d 	.word	0x08001f0d
 8001ee4:	080022d5 	.word	0x080022d5
 8001ee8:	080022d5 	.word	0x080022d5
 8001eec:	080022d5 	.word	0x080022d5
 8001ef0:	08001f15 	.word	0x08001f15
 8001ef4:	080022d5 	.word	0x080022d5
 8001ef8:	080022d5 	.word	0x080022d5
 8001efc:	080022d5 	.word	0x080022d5
 8001f00:	08002105 	.word	0x08002105
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4bb9      	ldr	r3, [pc, #740]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001f0a:	e1e7      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4bb8      	ldr	r3, [pc, #736]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f12:	e1e3      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4bb4      	ldr	r3, [pc, #720]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f20:	4bb1      	ldr	r3, [pc, #708]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d071      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2c:	4bae      	ldr	r3, [pc, #696]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f52:	4622      	mov	r2, r4
 8001f54:	462b      	mov	r3, r5
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	0159      	lsls	r1, r3, #5
 8001f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f64:	0150      	lsls	r0, r2, #5
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	1a51      	subs	r1, r2, r1
 8001f6e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f70:	4629      	mov	r1, r5
 8001f72:	eb63 0301 	sbc.w	r3, r3, r1
 8001f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f84:	4649      	mov	r1, r9
 8001f86:	018b      	lsls	r3, r1, #6
 8001f88:	4641      	mov	r1, r8
 8001f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f8e:	4641      	mov	r1, r8
 8001f90:	018a      	lsls	r2, r1, #6
 8001f92:	4641      	mov	r1, r8
 8001f94:	1a51      	subs	r1, r2, r1
 8001f96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f98:	4649      	mov	r1, r9
 8001f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001fac:	4649      	mov	r1, r9
 8001fae:	00cb      	lsls	r3, r1, #3
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	00ca      	lsls	r2, r1, #3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	189b      	adds	r3, r3, r2
 8001fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	460a      	mov	r2, r1
 8001fca:	eb42 0303 	adc.w	r3, r2, r3
 8001fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fdc:	4629      	mov	r1, r5
 8001fde:	024b      	lsls	r3, r1, #9
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	024a      	lsls	r2, r1, #9
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ff8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ffc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002000:	f7fe fc64 	bl	80008cc <__aeabi_uldivmod>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4613      	mov	r3, r2
 800200a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800200e:	e067      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b75      	ldr	r3, [pc, #468]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800201c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002020:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800202a:	2300      	movs	r3, #0
 800202c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800202e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002032:	4622      	mov	r2, r4
 8002034:	462b      	mov	r3, r5
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	0159      	lsls	r1, r3, #5
 8002040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002044:	0150      	lsls	r0, r2, #5
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4621      	mov	r1, r4
 800204c:	1a51      	subs	r1, r2, r1
 800204e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002050:	4629      	mov	r1, r5
 8002052:	eb63 0301 	sbc.w	r3, r3, r1
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002064:	4649      	mov	r1, r9
 8002066:	018b      	lsls	r3, r1, #6
 8002068:	4641      	mov	r1, r8
 800206a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206e:	4641      	mov	r1, r8
 8002070:	018a      	lsls	r2, r1, #6
 8002072:	4641      	mov	r1, r8
 8002074:	ebb2 0a01 	subs.w	sl, r2, r1
 8002078:	4649      	mov	r1, r9
 800207a:	eb63 0b01 	sbc.w	fp, r3, r1
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800208a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800208e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002092:	4692      	mov	sl, r2
 8002094:	469b      	mov	fp, r3
 8002096:	4623      	mov	r3, r4
 8002098:	eb1a 0303 	adds.w	r3, sl, r3
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	462b      	mov	r3, r5
 80020a0:	eb4b 0303 	adc.w	r3, fp, r3
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020b2:	4629      	mov	r1, r5
 80020b4:	028b      	lsls	r3, r1, #10
 80020b6:	4621      	mov	r1, r4
 80020b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020bc:	4621      	mov	r1, r4
 80020be:	028a      	lsls	r2, r1, #10
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020c8:	2200      	movs	r2, #0
 80020ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80020cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80020ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020d2:	f7fe fbfb 	bl	80008cc <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4613      	mov	r3, r2
 80020dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e0:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80020f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002102:	e0eb      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800210c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002110:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d06b      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211c:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	2200      	movs	r2, #0
 8002124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002130:	2300      	movs	r3, #0
 8002132:	667b      	str	r3, [r7, #100]	@ 0x64
 8002134:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002138:	4622      	mov	r2, r4
 800213a:	462b      	mov	r3, r5
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	0159      	lsls	r1, r3, #5
 8002146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214a:	0150      	lsls	r0, r2, #5
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4621      	mov	r1, r4
 8002152:	1a51      	subs	r1, r2, r1
 8002154:	61b9      	str	r1, [r7, #24]
 8002156:	4629      	mov	r1, r5
 8002158:	eb63 0301 	sbc.w	r3, r3, r1
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800216a:	4659      	mov	r1, fp
 800216c:	018b      	lsls	r3, r1, #6
 800216e:	4651      	mov	r1, sl
 8002170:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002174:	4651      	mov	r1, sl
 8002176:	018a      	lsls	r2, r1, #6
 8002178:	4651      	mov	r1, sl
 800217a:	ebb2 0801 	subs.w	r8, r2, r1
 800217e:	4659      	mov	r1, fp
 8002180:	eb63 0901 	sbc.w	r9, r3, r1
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002190:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002194:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002198:	4690      	mov	r8, r2
 800219a:	4699      	mov	r9, r3
 800219c:	4623      	mov	r3, r4
 800219e:	eb18 0303 	adds.w	r3, r8, r3
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	462b      	mov	r3, r5
 80021a6:	eb49 0303 	adc.w	r3, r9, r3
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021b8:	4629      	mov	r1, r5
 80021ba:	024b      	lsls	r3, r1, #9
 80021bc:	4621      	mov	r1, r4
 80021be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c2:	4621      	mov	r1, r4
 80021c4:	024a      	lsls	r2, r1, #9
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021ce:	2200      	movs	r2, #0
 80021d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021d8:	f7fe fb78 	bl	80008cc <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4613      	mov	r3, r2
 80021e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021e6:	e065      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x420>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f4:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x458>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	2200      	movs	r2, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	4611      	mov	r1, r2
 8002200:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002204:	653b      	str	r3, [r7, #80]	@ 0x50
 8002206:	2300      	movs	r3, #0
 8002208:	657b      	str	r3, [r7, #84]	@ 0x54
 800220a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800220e:	4642      	mov	r2, r8
 8002210:	464b      	mov	r3, r9
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	0159      	lsls	r1, r3, #5
 800221c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002220:	0150      	lsls	r0, r2, #5
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4641      	mov	r1, r8
 8002228:	1a51      	subs	r1, r2, r1
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	4649      	mov	r1, r9
 800222e:	eb63 0301 	sbc.w	r3, r3, r1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002240:	4659      	mov	r1, fp
 8002242:	018b      	lsls	r3, r1, #6
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224a:	4651      	mov	r1, sl
 800224c:	018a      	lsls	r2, r1, #6
 800224e:	4651      	mov	r1, sl
 8002250:	1a54      	subs	r4, r2, r1
 8002252:	4659      	mov	r1, fp
 8002254:	eb63 0501 	sbc.w	r5, r3, r1
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	00eb      	lsls	r3, r5, #3
 8002262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002266:	00e2      	lsls	r2, r4, #3
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4643      	mov	r3, r8
 800226e:	18e3      	adds	r3, r4, r3
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	464b      	mov	r3, r9
 8002274:	eb45 0303 	adc.w	r3, r5, r3
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002286:	4629      	mov	r1, r5
 8002288:	028b      	lsls	r3, r1, #10
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002290:	4621      	mov	r1, r4
 8002292:	028a      	lsls	r2, r1, #10
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800229c:	2200      	movs	r2, #0
 800229e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022a6:	f7fe fb11 	bl	80008cc <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4613      	mov	r3, r2
 80022b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022b4:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x458>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0f1b      	lsrs	r3, r3, #28
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80022c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022d2:	e003      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	37b8      	adds	r7, #184	@ 0xb8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	00f42400 	.word	0x00f42400

080022f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e28d      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8083 	beq.w	800241a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002314:	4b94      	ldr	r3, [pc, #592]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b04      	cmp	r3, #4
 800231e:	d019      	beq.n	8002354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002320:	4b91      	ldr	r3, [pc, #580]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002328:	2b08      	cmp	r3, #8
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800232c:	4b8e      	ldr	r3, [pc, #568]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b8b      	ldr	r3, [pc, #556]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b88      	ldr	r3, [pc, #544]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b84      	ldr	r3, [pc, #528]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x124>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e25a      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x90>
 8002376:	4b7c      	ldr	r3, [pc, #496]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7b      	ldr	r2, [pc, #492]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xcc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0xb4>
 800238e:	4b76      	ldr	r3, [pc, #472]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a75      	ldr	r2, [pc, #468]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a72      	ldr	r2, [pc, #456]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xcc>
 80023a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f986 	bl	80016d8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff f982 	bl	80016d8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e21f      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b61      	ldr	r3, [pc, #388]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xdc>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f972 	bl	80016d8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f96e 	bl	80016d8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e20b      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b57      	ldr	r3, [pc, #348]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x104>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06f      	beq.n	8002506 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002426:	4b50      	ldr	r3, [pc, #320]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d017      	beq.n	8002462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002432:	4b4d      	ldr	r3, [pc, #308]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x186>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1d3      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4937      	ldr	r1, [pc, #220]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b34      	ldr	r3, [pc, #208]	@ (800256c <HAL_RCC_OscConfig+0x278>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff f91b 	bl	80016d8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff f917 	bl	80016d8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1b4      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4925      	ldr	r1, [pc, #148]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b24      	ldr	r3, [pc, #144]	@ (800256c <HAL_RCC_OscConfig+0x278>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f8fa 	bl	80016d8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff f8f6 	bl	80016d8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e193      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x27c>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7ff f8da 	bl	80016d8 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7ff f8d6 	bl	80016d8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e173      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_OscConfig+0x274>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x234>
 8002546:	e01b      	b.n	8002580 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_OscConfig+0x27c>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7ff f8c3 	bl	80016d8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	e00e      	b.n	8002574 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002556:	f7ff f8bf 	bl	80016d8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d907      	bls.n	8002574 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e15c      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
 8002568:	40023800 	.word	0x40023800
 800256c:	42470000 	.word	0x42470000
 8002570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b8a      	ldr	r3, [pc, #552]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ea      	bne.n	8002556 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8097 	beq.w	80026bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b83      	ldr	r3, [pc, #524]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b7f      	ldr	r3, [pc, #508]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a7e      	ldr	r2, [pc, #504]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b7c      	ldr	r3, [pc, #496]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	@ (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f87f 	bl	80016d8 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7ff f87b 	bl	80016d8 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e118      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b6c      	ldr	r3, [pc, #432]	@ (80027a4 <HAL_RCC_OscConfig+0x4b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x31e>
 8002604:	4b66      	ldr	r3, [pc, #408]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a65      	ldr	r2, [pc, #404]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x358>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x340>
 800261a:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a60      	ldr	r2, [pc, #384]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	4b5e      	ldr	r3, [pc, #376]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	4a5d      	ldr	r2, [pc, #372]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	@ 0x70
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x358>
 8002634:	4b5a      	ldr	r3, [pc, #360]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002640:	4b57      	ldr	r3, [pc, #348]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a56      	ldr	r2, [pc, #344]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7ff f840 	bl	80016d8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff f83c 	bl	80016d8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0d7      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <HAL_RCC_OscConfig+0x368>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff f82a 	bl	80016d8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7ff f826 	bl	80016d8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0c1      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	4b40      	ldr	r3, [pc, #256]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4a3a      	ldr	r2, [pc, #232]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80ad 	beq.w	8002820 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d060      	beq.n	8002794 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d145      	bne.n	8002766 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b33      	ldr	r3, [pc, #204]	@ (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fffa 	bl	80016d8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fff6 	bl	80016d8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e093      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b29      	ldr	r3, [pc, #164]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	071b      	lsls	r3, r3, #28
 8002732:	491b      	ldr	r1, [pc, #108]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe ffcb 	bl	80016d8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe ffc7 	bl	80016d8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e064      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x452>
 8002764:	e05c      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCC_OscConfig+0x4b4>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe ffb4 	bl	80016d8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe ffb0 	bl	80016d8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04d      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_OscConfig+0x4ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x480>
 8002792:	e045      	b.n	8002820 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e040      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <HAL_RCC_OscConfig+0x538>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d030      	beq.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d129      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d122      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d119      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d10f      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07b      	b.n	800293a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002852:	d009      	beq.n	8002868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	e005      	b.n	8002868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fd58 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800289e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0104 	and.w	r1, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f003 0210 	and.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b088      	sub	sp, #32
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_SPI_Transmit+0x22>
 8002960:	2302      	movs	r3, #2
 8002962:	e12d      	b.n	8002bc0 <HAL_SPI_Transmit+0x27e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296c:	f7fe feb4 	bl	80016d8 <HAL_GetTick>
 8002970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002986:	e116      	b.n	8002bb6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Transmit+0x52>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002998:	e10d      	b.n	8002bb6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2203      	movs	r2, #3
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	d10f      	bne.n	8002a02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b40      	cmp	r3, #64	@ 0x40
 8002a0e:	d007      	beq.n	8002a20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a28:	d14f      	bne.n	8002aca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0xf6>
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d142      	bne.n	8002abe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	1c9a      	adds	r2, r3, #2
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a5c:	e02f      	b.n	8002abe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d112      	bne.n	8002a92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a90:	e015      	b.n	8002abe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a92:	f7fe fe21 	bl	80016d8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d803      	bhi.n	8002aaa <HAL_SPI_Transmit+0x168>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa8:	d102      	bne.n	8002ab0 <HAL_SPI_Transmit+0x16e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002abc:	e07b      	b.n	8002bb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ca      	bne.n	8002a5e <HAL_SPI_Transmit+0x11c>
 8002ac8:	e050      	b.n	8002b6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0x196>
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d144      	bne.n	8002b62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002afe:	e030      	b.n	8002b62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d113      	bne.n	8002b36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b34:	e015      	b.n	8002b62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b36:	f7fe fdcf 	bl	80016d8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d803      	bhi.n	8002b4e <HAL_SPI_Transmit+0x20c>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b4c:	d102      	bne.n	8002b54 <HAL_SPI_Transmit+0x212>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b60:	e029      	b.n	8002bb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1c9      	bne.n	8002b00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fa61 	bl	8003038 <SPI_EndRxTxTransaction>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e003      	b.n	8002bb6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	@ 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x26>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e198      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x358>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf6:	f7fe fd6f 	bl	80016d8 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d00f      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x70>
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1e:	d107      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x68>
 8002c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d003      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002c36:	e16d      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x82>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x82>
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002c50:	e160      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	887a      	ldrh	r2, [r7, #2]
 8002c8e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca6:	2b40      	cmp	r3, #64	@ 0x40
 8002ca8:	d007      	beq.n	8002cba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc2:	d17c      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x10a>
 8002ccc:	8b7b      	ldrh	r3, [r7, #26]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d16a      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf6:	e057      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d11b      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x176>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x176>
 8002d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d113      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	1c9a      	adds	r2, r3, #2
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d119      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1b8>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d014      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d60:	b292      	uxth	r2, r2
 8002d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d80:	f7fe fcaa 	bl	80016d8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d80b      	bhi.n	8002da8 <HAL_SPI_TransmitReceive+0x1e0>
 8002d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002da6:	e0b5      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1a2      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x130>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d19d      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x130>
 8002dbc:	e080      	b.n	8002ec0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x204>
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d16f      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df2:	e05b      	b.n	8002eac <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d11c      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x274>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x274>
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d114      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d119      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x2b6>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d014      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e7e:	f7fe fc2b 	bl	80016d8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d803      	bhi.n	8002e96 <HAL_SPI_TransmitReceive+0x2ce>
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x2d4>
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002eaa:	e033      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19e      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x22c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d199      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8b7 	bl	8003038 <SPI_EndRxTxTransaction>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002edc:	e01a      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0a:	e003      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3730      	adds	r7, #48	@ 0x30
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f38:	f7fe fbce 	bl	80016d8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f48:	f7fe fbc6 	bl	80016d8 <HAL_GetTick>
 8002f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f4e:	4b39      	ldr	r3, [pc, #228]	@ (8003034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	0d1b      	lsrs	r3, r3, #20
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f5e:	e054      	b.n	800300a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f66:	d050      	beq.n	800300a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f68:	f7fe fbb6 	bl	80016d8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d902      	bls.n	8002f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d13d      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f96:	d111      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa0:	d004      	beq.n	8002fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002faa:	d107      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc4:	d10f      	bne.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e017      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3b01      	subs	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	429a      	cmp	r2, r3
 8003026:	d19b      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000

08003038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2201      	movs	r2, #1
 800304c:	2102      	movs	r1, #2
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff6a 	bl	8002f28 <SPI_WaitFlagStateUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e032      	b.n	80030d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <SPI_EndRxTxTransaction+0xa0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <SPI_EndRxTxTransaction+0xa4>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	0d5b      	lsrs	r3, r3, #21
 8003076:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003088:	d112      	bne.n	80030b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	@ 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff ff47 	bl	8002f28 <SPI_WaitFlagStateUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d016      	beq.n	80030ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e00f      	b.n	80030d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	2b80      	cmp	r3, #128	@ 0x80
 80030c8:	d0f2      	beq.n	80030b0 <SPI_EndRxTxTransaction+0x78>
 80030ca:	e000      	b.n	80030ce <SPI_EndRxTxTransaction+0x96>
        break;
 80030cc:	bf00      	nop
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000000 	.word	0x20000000
 80030dc:	165e9f81 	.word	0x165e9f81

080030e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e042      	b.n	8003178 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f97e 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f973 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	d175      	bne.n	800328c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_UART_Transmit+0x2c>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e06e      	b.n	800328e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	@ 0x21
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031be:	f7fe fa8b 	bl	80016d8 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d8:	d108      	bne.n	80031ec <HAL_UART_Transmit+0x6c>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e003      	b.n	80031f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031f4:	e02e      	b.n	8003254 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	@ 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f848 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e03a      	b.n	800328e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3302      	adds	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e007      	b.n	8003246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1cb      	bne.n	80031f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	2140      	movs	r1, #64	@ 0x40
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f814 	bl	8003296 <UART_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e006      	b.n	800328e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a6:	e03b      	b.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ae:	d037      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fe fa12 	bl	80016d8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e03a      	b.n	8003340 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b80      	cmp	r3, #128	@ 0x80
 80032dc:	d020      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b40      	cmp	r3, #64	@ 0x40
 80032e2:	d01d      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d116      	bne.n	8003320 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f81d 	bl	8003348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2208      	movs	r2, #8
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e00f      	b.n	8003340 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	429a      	cmp	r2, r3
 800333c:	d0b4      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b095      	sub	sp, #84	@ 0x54
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003370:	643a      	str	r2, [r7, #64]	@ 0x40
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	61fb      	str	r3, [r7, #28]
   return(result);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d119      	bne.n	80033f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e0:	61ba      	str	r2, [r7, #24]
 80033e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	613b      	str	r3, [r7, #16]
   return(result);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003402:	bf00      	nop
 8003404:	3754      	adds	r7, #84	@ 0x54
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b0c0      	sub	sp, #256	@ 0x100
 8003416:	af00      	add	r7, sp, #0
 8003418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	ea40 0301 	orr.w	r3, r0, r1
 8003438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003468:	f021 010c 	bic.w	r1, r1, #12
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	ea40 0301 	orr.w	r3, r0, r1
 8003496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8f      	ldr	r3, [pc, #572]	@ (80036dc <UART_SetConfig+0x2cc>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d005      	beq.n	80034b0 <UART_SetConfig+0xa0>
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8d      	ldr	r3, [pc, #564]	@ (80036e0 <UART_SetConfig+0x2d0>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d104      	bne.n	80034ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe fcdc 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 80034b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034b8:	e003      	b.n	80034c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ba:	f7fe fcc3 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 80034be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034cc:	f040 810c 	bne.w	80036e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	1891      	adds	r1, r2, r2
 80034e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034ea:	415b      	adcs	r3, r3
 80034ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034f2:	4621      	mov	r1, r4
 80034f4:	eb12 0801 	adds.w	r8, r2, r1
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb43 0901 	adc.w	r9, r3, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	4623      	mov	r3, r4
 8003518:	eb18 0303 	adds.w	r3, r8, r3
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003520:	462b      	mov	r3, r5
 8003522:	eb49 0303 	adc.w	r3, r9, r3
 8003526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800353a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800353e:	460b      	mov	r3, r1
 8003540:	18db      	adds	r3, r3, r3
 8003542:	653b      	str	r3, [r7, #80]	@ 0x50
 8003544:	4613      	mov	r3, r2
 8003546:	eb42 0303 	adc.w	r3, r2, r3
 800354a:	657b      	str	r3, [r7, #84]	@ 0x54
 800354c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003554:	f7fd f9ba 	bl	80008cc <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4b61      	ldr	r3, [pc, #388]	@ (80036e4 <UART_SetConfig+0x2d4>)
 800355e:	fba3 2302 	umull	r2, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	011c      	lsls	r4, r3, #4
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	1891      	adds	r1, r2, r2
 800357e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003580:	415b      	adcs	r3, r3
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003588:	4641      	mov	r1, r8
 800358a:	eb12 0a01 	adds.w	sl, r2, r1
 800358e:	4649      	mov	r1, r9
 8003590:	eb43 0b01 	adc.w	fp, r3, r1
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a8:	4692      	mov	sl, r2
 80035aa:	469b      	mov	fp, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	eb1a 0303 	adds.w	r3, sl, r3
 80035b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb4b 0303 	adc.w	r3, fp, r3
 80035bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035ea:	f7fd f96f 	bl	80008cc <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2301 	umull	r2, r3, r3, r1
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2264      	movs	r2, #100	@ 0x64
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	1acb      	subs	r3, r1, r3
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <UART_SetConfig+0x2d4>)
 800360c:	fba3 2302 	umull	r2, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003618:	441c      	add	r4, r3
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003634:	415b      	adcs	r3, r3
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800363c:	4641      	mov	r1, r8
 800363e:	1851      	adds	r1, r2, r1
 8003640:	6339      	str	r1, [r7, #48]	@ 0x30
 8003642:	4649      	mov	r1, r9
 8003644:	414b      	adcs	r3, r1
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003654:	4659      	mov	r1, fp
 8003656:	00cb      	lsls	r3, r1, #3
 8003658:	4651      	mov	r1, sl
 800365a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365e:	4651      	mov	r1, sl
 8003660:	00ca      	lsls	r2, r1, #3
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	4603      	mov	r3, r0
 8003668:	4642      	mov	r2, r8
 800366a:	189b      	adds	r3, r3, r2
 800366c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003670:	464b      	mov	r3, r9
 8003672:	460a      	mov	r2, r1
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800368c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003690:	460b      	mov	r3, r1
 8003692:	18db      	adds	r3, r3, r3
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003696:	4613      	mov	r3, r2
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036a6:	f7fd f911 	bl	80008cc <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	@ 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	3332      	adds	r3, #50	@ 0x32
 80036c2:	4a08      	ldr	r2, [pc, #32]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4422      	add	r2, r4
 80036d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d8:	e106      	b.n	80038e8 <UART_SetConfig+0x4d8>
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40011400 	.word	0x40011400
 80036e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036fa:	4642      	mov	r2, r8
 80036fc:	464b      	mov	r3, r9
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	6239      	str	r1, [r7, #32]
 8003702:	415b      	adcs	r3, r3
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370a:	4641      	mov	r1, r8
 800370c:	1854      	adds	r4, r2, r1
 800370e:	4649      	mov	r1, r9
 8003710:	eb43 0501 	adc.w	r5, r3, r1
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	00eb      	lsls	r3, r5, #3
 800371e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	4643      	mov	r3, r8
 800372a:	18e3      	adds	r3, r4, r3
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003730:	464b      	mov	r3, r9
 8003732:	eb45 0303 	adc.w	r3, r5, r3
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003756:	4629      	mov	r1, r5
 8003758:	008b      	lsls	r3, r1, #2
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003760:	4621      	mov	r1, r4
 8003762:	008a      	lsls	r2, r1, #2
 8003764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003768:	f7fd f8b0 	bl	80008cc <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b60      	ldr	r3, [pc, #384]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	61b9      	str	r1, [r7, #24]
 8003794:	415b      	adcs	r3, r3
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379c:	4641      	mov	r1, r8
 800379e:	1851      	adds	r1, r2, r1
 80037a0:	6139      	str	r1, [r7, #16]
 80037a2:	4649      	mov	r1, r9
 80037a4:	414b      	adcs	r3, r1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b4:	4659      	mov	r1, fp
 80037b6:	00cb      	lsls	r3, r1, #3
 80037b8:	4651      	mov	r1, sl
 80037ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037be:	4651      	mov	r1, sl
 80037c0:	00ca      	lsls	r2, r1, #3
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	4642      	mov	r2, r8
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037d0:	464b      	mov	r3, r9
 80037d2:	460a      	mov	r2, r1
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037f4:	4649      	mov	r1, r9
 80037f6:	008b      	lsls	r3, r1, #2
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fe:	4641      	mov	r1, r8
 8003800:	008a      	lsls	r2, r1, #2
 8003802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003806:	f7fd f861 	bl	80008cc <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4611      	mov	r1, r2
 8003810:	4b38      	ldr	r3, [pc, #224]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003812:	fba3 2301 	umull	r2, r3, r3, r1
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2264      	movs	r2, #100	@ 0x64
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	1acb      	subs	r3, r1, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	@ 0x32
 8003824:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003830:	441c      	add	r4, r3
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	673b      	str	r3, [r7, #112]	@ 0x70
 800383a:	677a      	str	r2, [r7, #116]	@ 0x74
 800383c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	415b      	adcs	r3, r3
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003882:	464b      	mov	r3, r9
 8003884:	460a      	mov	r2, r1
 8003886:	eb42 0303 	adc.w	r3, r2, r3
 800388a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	663b      	str	r3, [r7, #96]	@ 0x60
 8003896:	667a      	str	r2, [r7, #100]	@ 0x64
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038a4:	4649      	mov	r1, r9
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ae:	4641      	mov	r1, r8
 80038b0:	008a      	lsls	r2, r1, #2
 80038b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038b6:	f7fd f809 	bl	80008cc <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <UART_SetConfig+0x4e4>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	@ 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	3332      	adds	r3, #50	@ 0x32
 80038d2:	4a08      	ldr	r2, [pc, #32]	@ (80038f4 <UART_SetConfig+0x4e4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 020f 	and.w	r2, r3, #15
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4422      	add	r2, r4
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038ee:	46bd      	mov	sp, r7
 80038f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80038fc:	4904      	ldr	r1, [pc, #16]	@ (8003910 <MX_FATFS_Init+0x18>)
 80038fe:	4805      	ldr	r0, [pc, #20]	@ (8003914 <MX_FATFS_Init+0x1c>)
 8003900:	f004 f8ae 	bl	8007a60 <FATFS_LinkDriver>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	4b03      	ldr	r3, [pc, #12]	@ (8003918 <MX_FATFS_Init+0x20>)
 800390a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000238 	.word	0x20000238
 8003914:	2000000c 	.word	0x2000000c
 8003918:	20000234 	.word	0x20000234

0800391c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003920:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
    BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f9fd 	bl	8003d38 <SD_disk_initialize>
 800393e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
    BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fad5 	bl	8003f04 <SD_disk_status>
 800395a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <USER_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003974:	7bf8      	ldrb	r0, [r7, #15]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	f000 fad8 	bl	8003f30 <SD_disk_read>
 8003980:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <USER_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800399a:	7bf8      	ldrb	r0, [r7, #15]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	f000 fb2f 	bl	8004004 <SD_disk_write>
 80039a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <USER_ioctl>:
DRESULT USER_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	603a      	str	r2, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	460b      	mov	r3, r1
 80039be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80039c0:	79b9      	ldrb	r1, [r7, #6]
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fba0 	bl	800410c <SD_disk_ioctl>
 80039cc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80039dc:	2200      	movs	r2, #0
 80039de:	2101      	movs	r1, #1
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <SELECT+0x14>)
 80039e2:	f7fe f923 	bl	8001c2c <HAL_GPIO_WritePin>
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40020000 	.word	0x40020000

080039f0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80039f4:	2201      	movs	r2, #1
 80039f6:	2101      	movs	r1, #1
 80039f8:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <DESELECT+0x14>)
 80039fa:	f7fe f917 	bl	8001c2c <HAL_GPIO_WritePin>
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40020000 	.word	0x40020000

08003a08 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a12:	bf00      	nop
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <SPI_TxByte+0x30>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d1f8      	bne.n	8003a14 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003a22:	1df9      	adds	r1, r7, #7
 8003a24:	2364      	movs	r3, #100	@ 0x64
 8003a26:	2201      	movs	r2, #1
 8003a28:	4803      	ldr	r0, [pc, #12]	@ (8003a38 <SPI_TxByte+0x30>)
 8003a2a:	f7fe ff8a 	bl	8002942 <HAL_SPI_Transmit>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000090 	.word	0x20000090

08003a3c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a48:	bf00      	nop
 8003a4a:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <SPI_TxBuffer+0x30>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d1f8      	bne.n	8003a4a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003a58:	887a      	ldrh	r2, [r7, #2]
 8003a5a:	2364      	movs	r3, #100	@ 0x64
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4803      	ldr	r0, [pc, #12]	@ (8003a6c <SPI_TxBuffer+0x30>)
 8003a60:	f7fe ff6f 	bl	8002942 <HAL_SPI_Transmit>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000090 	.word	0x20000090

08003a70 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8003a76:	23ff      	movs	r3, #255	@ 0xff
 8003a78:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003a7a:	bf00      	nop
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <SPI_RxByte+0x34>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d1f8      	bne.n	8003a7c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003a8a:	1dba      	adds	r2, r7, #6
 8003a8c:	1df9      	adds	r1, r7, #7
 8003a8e:	2364      	movs	r3, #100	@ 0x64
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2301      	movs	r3, #1
 8003a94:	4803      	ldr	r0, [pc, #12]	@ (8003aa4 <SPI_RxByte+0x34>)
 8003a96:	f7ff f897 	bl	8002bc8 <HAL_SPI_TransmitReceive>
  return data;
 8003a9a:	79bb      	ldrb	r3, [r7, #6]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000090 	.word	0x20000090

08003aa8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003ab0:	f7ff ffde 	bl	8003a70 <SPI_RxByte>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	701a      	strb	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <SD_ReadyWait+0x30>)
 8003acc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003ad0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003ad2:	f7ff ffcd 	bl	8003a70 <SPI_RxByte>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	2bff      	cmp	r3, #255	@ 0xff
 8003ade:	d003      	beq.n	8003ae8 <SD_ReadyWait+0x24>
 8003ae0:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <SD_ReadyWait+0x30>)
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f4      	bne.n	8003ad2 <SD_ReadyWait+0xe>
  return res;
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000023e 	.word	0x2000023e

08003af8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8003afe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003b02:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8003b04:	f7ff ff74 	bl	80039f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	e005      	b.n	8003b1a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8003b0e:	20ff      	movs	r0, #255	@ 0xff
 8003b10:	f7ff ff7a 	bl	8003a08 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	3301      	adds	r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	ddf6      	ble.n	8003b0e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8003b20:	f7ff ff5a 	bl	80039d8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8003b24:	2340      	movs	r3, #64	@ 0x40
 8003b26:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8003b38:	2395      	movs	r3, #149	@ 0x95
 8003b3a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2106      	movs	r1, #6
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff7b 	bl	8003a3c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8003b46:	e002      	b.n	8003b4e <SD_PowerOn+0x56>
  {
    cnt--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8003b4e:	f7ff ff8f 	bl	8003a70 <SPI_RxByte>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d002      	beq.n	8003b5e <SD_PowerOn+0x66>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f4      	bne.n	8003b48 <SD_PowerOn+0x50>
  }
  DESELECT();
 8003b5e:	f7ff ff47 	bl	80039f0 <DESELECT>
  SPI_TxByte(0XFF);
 8003b62:	20ff      	movs	r0, #255	@ 0xff
 8003b64:	f7ff ff50 	bl	8003a08 <SPI_TxByte>
  PowerFlag = 1;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <SD_PowerOn+0x80>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000241 	.word	0x20000241

08003b7c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003b80:	4b03      	ldr	r3, [pc, #12]	@ (8003b90 <SD_PowerOff+0x14>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20000241 	.word	0x20000241

08003b94 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return PowerFlag;
 8003b98:	4b03      	ldr	r3, [pc, #12]	@ (8003ba8 <SD_CheckPower+0x14>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000241 	.word	0x20000241

08003bac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <SD_RxDataBlock+0x58>)
 8003bb8:	22c8      	movs	r2, #200	@ 0xc8
 8003bba:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8003bbc:	f7ff ff58 	bl	8003a70 <SPI_RxByte>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2bff      	cmp	r3, #255	@ 0xff
 8003bc8:	d103      	bne.n	8003bd2 <SD_RxDataBlock+0x26>
 8003bca:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <SD_RxDataBlock+0x58>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f4      	bne.n	8003bbc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8003bd6:	d001      	beq.n	8003bdc <SD_RxDataBlock+0x30>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e00f      	b.n	8003bfc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff60 	bl	8003aa8 <SPI_RxBytePtr>
  } while(len--);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	603a      	str	r2, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f4      	bne.n	8003bdc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8003bf2:	f7ff ff3d 	bl	8003a70 <SPI_RxByte>
  SPI_RxByte();
 8003bf6:	f7ff ff3b 	bl	8003a70 <SPI_RxByte>
  return TRUE;
 8003bfa:	2301      	movs	r3, #1
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000023c 	.word	0x2000023c

08003c08 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8003c18:	f7ff ff54 	bl	8003ac4 <SD_ReadyWait>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2bff      	cmp	r3, #255	@ 0xff
 8003c20:	d001      	beq.n	8003c26 <SD_TxDataBlock+0x1e>
 8003c22:	2300      	movs	r3, #0
 8003c24:	e02f      	b.n	8003c86 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff feed 	bl	8003a08 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	2bfd      	cmp	r3, #253	@ 0xfd
 8003c32:	d020      	beq.n	8003c76 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8003c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff feff 	bl	8003a3c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8003c3e:	f7ff ff17 	bl	8003a70 <SPI_RxByte>
    SPI_RxByte();
 8003c42:	f7ff ff15 	bl	8003a70 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8003c46:	e00b      	b.n	8003c60 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8003c48:	f7ff ff12 	bl	8003a70 <SPI_RxByte>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d006      	beq.n	8003c68 <SD_TxDataBlock+0x60>
      i++;
 8003c5a:	7bbb      	ldrb	r3, [r7, #14]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2b40      	cmp	r3, #64	@ 0x40
 8003c64:	d9f0      	bls.n	8003c48 <SD_TxDataBlock+0x40>
 8003c66:	e000      	b.n	8003c6a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8003c68:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8003c6a:	bf00      	nop
 8003c6c:	f7ff ff00 	bl	8003a70 <SPI_RxByte>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0fa      	beq.n	8003c6c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d101      	bne.n	8003c84 <SD_TxDataBlock+0x7c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <SD_TxDataBlock+0x7e>

  return FALSE;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	6039      	str	r1, [r7, #0]
 8003c98:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003c9a:	f7ff ff13 	bl	8003ac4 <SD_ReadyWait>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2bff      	cmp	r3, #255	@ 0xff
 8003ca2:	d001      	beq.n	8003ca8 <SD_SendCmd+0x1a>
 8003ca4:	23ff      	movs	r3, #255	@ 0xff
 8003ca6:	e042      	b.n	8003d2e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff feac 	bl	8003a08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0e1b      	lsrs	r3, r3, #24
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fea6 	bl	8003a08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fea0 	bl	8003a08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fe9a 	bl	8003a08 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fe95 	bl	8003a08 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d102      	bne.n	8003cea <SD_SendCmd+0x5c>
 8003ce4:	2395      	movs	r3, #149	@ 0x95
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e007      	b.n	8003cfa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b48      	cmp	r3, #72	@ 0x48
 8003cee:	d102      	bne.n	8003cf6 <SD_SendCmd+0x68>
 8003cf0:	2387      	movs	r3, #135	@ 0x87
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <SD_SendCmd+0x6c>
  else crc = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fe83 	bl	8003a08 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b4c      	cmp	r3, #76	@ 0x4c
 8003d06:	d101      	bne.n	8003d0c <SD_SendCmd+0x7e>
 8003d08:	f7ff feb2 	bl	8003a70 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8003d0c:	230a      	movs	r3, #10
 8003d0e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8003d10:	f7ff feae 	bl	8003a70 <SPI_RxByte>
 8003d14:	4603      	mov	r3, r0
 8003d16:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003d18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da05      	bge.n	8003d2c <SD_SendCmd+0x9e>
 8003d20:	7bbb      	ldrb	r3, [r7, #14]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	73bb      	strb	r3, [r7, #14]
 8003d26:	7bbb      	ldrb	r3, [r7, #14]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f1      	bne.n	8003d10 <SD_SendCmd+0x82>

  return res;
 8003d2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SD_disk_initialize+0x14>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d1      	b.n	8003ef0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <SD_disk_initialize+0x1c0>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <SD_disk_initialize+0x2a>
 8003d5a:	4b67      	ldr	r3, [pc, #412]	@ (8003ef8 <SD_disk_initialize+0x1c0>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e0c6      	b.n	8003ef0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8003d62:	f7ff fec9 	bl	8003af8 <SD_PowerOn>
  /* slave select */
  SELECT();
 8003d66:	f7ff fe37 	bl	80039d8 <SELECT>
  /* check disk type */
  type = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2040      	movs	r0, #64	@ 0x40
 8003d72:	f7ff ff8c 	bl	8003c8e <SD_SendCmd>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 80a1 	bne.w	8003ec0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <SD_disk_initialize+0x1c4>)
 8003d80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d84:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003d86:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003d8a:	2048      	movs	r0, #72	@ 0x48
 8003d8c:	f7ff ff7f 	bl	8003c8e <SD_SendCmd>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d155      	bne.n	8003e42 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e00c      	b.n	8003db6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8003d9c:	7bfc      	ldrb	r4, [r7, #15]
 8003d9e:	f7ff fe67 	bl	8003a70 <SPI_RxByte>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	f104 0310 	add.w	r3, r4, #16
 8003daa:	443b      	add	r3, r7
 8003dac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	3301      	adds	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d9ef      	bls.n	8003d9c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003dbc:	7abb      	ldrb	r3, [r7, #10]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d17e      	bne.n	8003ec0 <SD_disk_initialize+0x188>
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	2baa      	cmp	r3, #170	@ 0xaa
 8003dc6:	d17b      	bne.n	8003ec0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2077      	movs	r0, #119	@ 0x77
 8003dcc:	f7ff ff5f 	bl	8003c8e <SD_SendCmd>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d807      	bhi.n	8003de6 <SD_disk_initialize+0xae>
 8003dd6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003dda:	2069      	movs	r0, #105	@ 0x69
 8003ddc:	f7ff ff57 	bl	8003c8e <SD_SendCmd>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8003de6:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <SD_disk_initialize+0x1c4>)
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ec      	bne.n	8003dc8 <SD_disk_initialize+0x90>
 8003dee:	e000      	b.n	8003df2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003df0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003df2:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <SD_disk_initialize+0x1c4>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d062      	beq.n	8003ec0 <SD_disk_initialize+0x188>
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	207a      	movs	r0, #122	@ 0x7a
 8003dfe:	f7ff ff46 	bl	8003c8e <SD_SendCmd>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d15b      	bne.n	8003ec0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e00c      	b.n	8003e28 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8003e0e:	7bfc      	ldrb	r4, [r7, #15]
 8003e10:	f7ff fe2e 	bl	8003a70 <SPI_RxByte>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	f104 0310 	add.w	r3, r4, #16
 8003e1c:	443b      	add	r3, r7
 8003e1e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3301      	adds	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d9ef      	bls.n	8003e0e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003e2e:	7a3b      	ldrb	r3, [r7, #8]
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <SD_disk_initialize+0x104>
 8003e38:	230c      	movs	r3, #12
 8003e3a:	e000      	b.n	8003e3e <SD_disk_initialize+0x106>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	73bb      	strb	r3, [r7, #14]
 8003e40:	e03e      	b.n	8003ec0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003e42:	2100      	movs	r1, #0
 8003e44:	2077      	movs	r0, #119	@ 0x77
 8003e46:	f7ff ff22 	bl	8003c8e <SD_SendCmd>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d808      	bhi.n	8003e62 <SD_disk_initialize+0x12a>
 8003e50:	2100      	movs	r1, #0
 8003e52:	2069      	movs	r0, #105	@ 0x69
 8003e54:	f7ff ff1b 	bl	8003c8e <SD_SendCmd>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d801      	bhi.n	8003e62 <SD_disk_initialize+0x12a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e000      	b.n	8003e64 <SD_disk_initialize+0x12c>
 8003e62:	2301      	movs	r3, #1
 8003e64:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8003e66:	7bbb      	ldrb	r3, [r7, #14]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d10e      	bne.n	8003e8a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	2077      	movs	r0, #119	@ 0x77
 8003e70:	f7ff ff0d 	bl	8003c8e <SD_SendCmd>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d80e      	bhi.n	8003e98 <SD_disk_initialize+0x160>
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2069      	movs	r0, #105	@ 0x69
 8003e7e:	f7ff ff06 	bl	8003c8e <SD_SendCmd>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <SD_disk_initialize+0x160>
 8003e88:	e00c      	b.n	8003ea4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2041      	movs	r0, #65	@ 0x41
 8003e8e:	f7ff fefe 	bl	8003c8e <SD_SendCmd>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8003e98:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <SD_disk_initialize+0x1c4>)
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e2      	bne.n	8003e66 <SD_disk_initialize+0x12e>
 8003ea0:	e000      	b.n	8003ea4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003ea2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <SD_disk_initialize+0x1c4>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <SD_disk_initialize+0x184>
 8003eac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003eb0:	2050      	movs	r0, #80	@ 0x50
 8003eb2:	f7ff feec 	bl	8003c8e <SD_SendCmd>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <SD_disk_initialize+0x188>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f00 <SD_disk_initialize+0x1c8>)
 8003ec2:	7bbb      	ldrb	r3, [r7, #14]
 8003ec4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8003ec6:	f7ff fd93 	bl	80039f0 <DESELECT>
  SPI_RxByte();
 8003eca:	f7ff fdd1 	bl	8003a70 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <SD_disk_initialize+0x1c0>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <SD_disk_initialize+0x1c0>)
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e001      	b.n	8003eea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003ee6:	f7ff fe49 	bl	8003b7c <SD_PowerOff>
  }
  return Stat;
 8003eea:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <SD_disk_initialize+0x1c0>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b2db      	uxtb	r3, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}
 8003ef8:	20000020 	.word	0x20000020
 8003efc:	2000023c 	.word	0x2000023c
 8003f00:	20000240 	.word	0x20000240

08003f04 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <SD_disk_status+0x14>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e002      	b.n	8003f1e <SD_disk_status+0x1a>
  return Stat;
 8003f18:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <SD_disk_status+0x28>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000020 	.word	0x20000020

08003f30 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <SD_disk_read+0x1c>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <SD_disk_read+0x20>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e051      	b.n	8003ff4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f50:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <SD_disk_read+0xcc>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <SD_disk_read+0x32>
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e048      	b.n	8003ff4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003f62:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <SD_disk_read+0xd0>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <SD_disk_read+0x44>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	025b      	lsls	r3, r3, #9
 8003f72:	607b      	str	r3, [r7, #4]

  SELECT();
 8003f74:	f7ff fd30 	bl	80039d8 <SELECT>

  if (count == 1)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d111      	bne.n	8003fa2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	2051      	movs	r0, #81	@ 0x51
 8003f82:	f7ff fe84 	bl	8003c8e <SD_SendCmd>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d129      	bne.n	8003fe0 <SD_disk_read+0xb0>
 8003f8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f7ff fe0b 	bl	8003bac <SD_RxDataBlock>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d021      	beq.n	8003fe0 <SD_disk_read+0xb0>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	e01e      	b.n	8003fe0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	2052      	movs	r0, #82	@ 0x52
 8003fa6:	f7ff fe72 	bl	8003c8e <SD_SendCmd>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d117      	bne.n	8003fe0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fb4:	68b8      	ldr	r0, [r7, #8]
 8003fb6:	f7ff fdf9 	bl	8003bac <SD_RxDataBlock>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <SD_disk_read+0xa6>
        buff += 512;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003fc6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ed      	bne.n	8003fb0 <SD_disk_read+0x80>
 8003fd4:	e000      	b.n	8003fd8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003fd6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003fd8:	2100      	movs	r1, #0
 8003fda:	204c      	movs	r0, #76	@ 0x4c
 8003fdc:	f7ff fe57 	bl	8003c8e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003fe0:	f7ff fd06 	bl	80039f0 <DESELECT>
  SPI_RxByte();
 8003fe4:	f7ff fd44 	bl	8003a70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000020 	.word	0x20000020
 8004000:	20000240 	.word	0x20000240

08004004 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <SD_disk_write+0x1c>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <SD_disk_write+0x20>
 8004020:	2304      	movs	r3, #4
 8004022:	e06b      	b.n	80040fc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004024:	4b37      	ldr	r3, [pc, #220]	@ (8004104 <SD_disk_write+0x100>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <SD_disk_write+0x32>
 8004032:	2303      	movs	r3, #3
 8004034:	e062      	b.n	80040fc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <SD_disk_write+0x100>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <SD_disk_write+0x44>
 8004044:	2302      	movs	r3, #2
 8004046:	e059      	b.n	80040fc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8004048:	4b2f      	ldr	r3, [pc, #188]	@ (8004108 <SD_disk_write+0x104>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <SD_disk_write+0x56>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	025b      	lsls	r3, r3, #9
 8004058:	607b      	str	r3, [r7, #4]

  SELECT();
 800405a:	f7ff fcbd 	bl	80039d8 <SELECT>

  if (count == 1)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d110      	bne.n	8004086 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	2058      	movs	r0, #88	@ 0x58
 8004068:	f7ff fe11 	bl	8003c8e <SD_SendCmd>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d13a      	bne.n	80040e8 <SD_disk_write+0xe4>
 8004072:	21fe      	movs	r1, #254	@ 0xfe
 8004074:	68b8      	ldr	r0, [r7, #8]
 8004076:	f7ff fdc7 	bl	8003c08 <SD_TxDataBlock>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d033      	beq.n	80040e8 <SD_disk_write+0xe4>
      count = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	e030      	b.n	80040e8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8004086:	4b20      	ldr	r3, [pc, #128]	@ (8004108 <SD_disk_write+0x104>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8004092:	2100      	movs	r1, #0
 8004094:	2077      	movs	r0, #119	@ 0x77
 8004096:	f7ff fdfa 	bl	8003c8e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	2057      	movs	r0, #87	@ 0x57
 800409e:	f7ff fdf6 	bl	8003c8e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	2059      	movs	r0, #89	@ 0x59
 80040a6:	f7ff fdf2 	bl	8003c8e <SD_SendCmd>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d11b      	bne.n	80040e8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80040b0:	21fc      	movs	r1, #252	@ 0xfc
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f7ff fda8 	bl	8003c08 <SD_TxDataBlock>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <SD_disk_write+0xd0>
        buff += 512;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040c4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ee      	bne.n	80040b0 <SD_disk_write+0xac>
 80040d2:	e000      	b.n	80040d6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80040d4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80040d6:	21fd      	movs	r1, #253	@ 0xfd
 80040d8:	2000      	movs	r0, #0
 80040da:	f7ff fd95 	bl	8003c08 <SD_TxDataBlock>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <SD_disk_write+0xe4>
      {
        count = 1;
 80040e4:	2301      	movs	r3, #1
 80040e6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80040e8:	f7ff fc82 	bl	80039f0 <DESELECT>
  SPI_RxByte();
 80040ec:	f7ff fcc0 	bl	8003a70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000020 	.word	0x20000020
 8004108:	20000240 	.word	0x20000240

0800410c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b08b      	sub	sp, #44	@ 0x2c
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	603a      	str	r2, [r7, #0]
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	460b      	mov	r3, r1
 800411a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <SD_disk_ioctl+0x1e>
 8004126:	2304      	movs	r3, #4
 8004128:	e113      	b.n	8004352 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8004130:	79bb      	ldrb	r3, [r7, #6]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d124      	bne.n	8004180 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d012      	beq.n	8004164 <SD_disk_ioctl+0x58>
 800413e:	2b02      	cmp	r3, #2
 8004140:	dc1a      	bgt.n	8004178 <SD_disk_ioctl+0x6c>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <SD_disk_ioctl+0x40>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d006      	beq.n	8004158 <SD_disk_ioctl+0x4c>
 800414a:	e015      	b.n	8004178 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800414c:	f7ff fd16 	bl	8003b7c <SD_PowerOff>
      res = RES_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004156:	e0fa      	b.n	800434e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8004158:	f7ff fcce 	bl	8003af8 <SD_PowerOn>
      res = RES_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004162:	e0f4      	b.n	800434e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	1c5c      	adds	r4, r3, #1
 8004168:	f7ff fd14 	bl	8003b94 <SD_CheckPower>
 800416c:	4603      	mov	r3, r0
 800416e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004176:	e0ea      	b.n	800434e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8004178:	2304      	movs	r3, #4
 800417a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800417e:	e0e6      	b.n	800434e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8004180:	4b76      	ldr	r3, [pc, #472]	@ (800435c <SD_disk_ioctl+0x250>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800418e:	2303      	movs	r3, #3
 8004190:	e0df      	b.n	8004352 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8004192:	f7ff fc21 	bl	80039d8 <SELECT>
    switch (ctrl)
 8004196:	79bb      	ldrb	r3, [r7, #6]
 8004198:	2b0d      	cmp	r3, #13
 800419a:	f200 80c9 	bhi.w	8004330 <SD_disk_ioctl+0x224>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <SD_disk_ioctl+0x98>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	0800429b 	.word	0x0800429b
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	0800428b 	.word	0x0800428b
 80041b0:	08004331 	.word	0x08004331
 80041b4:	08004331 	.word	0x08004331
 80041b8:	08004331 	.word	0x08004331
 80041bc:	08004331 	.word	0x08004331
 80041c0:	08004331 	.word	0x08004331
 80041c4:	08004331 	.word	0x08004331
 80041c8:	08004331 	.word	0x08004331
 80041cc:	08004331 	.word	0x08004331
 80041d0:	080042ad 	.word	0x080042ad
 80041d4:	080042d1 	.word	0x080042d1
 80041d8:	080042f5 	.word	0x080042f5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80041dc:	2100      	movs	r1, #0
 80041de:	2049      	movs	r0, #73	@ 0x49
 80041e0:	f7ff fd55 	bl	8003c8e <SD_SendCmd>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 80a6 	bne.w	8004338 <SD_disk_ioctl+0x22c>
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	2110      	movs	r1, #16
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fcda 	bl	8003bac <SD_RxDataBlock>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 809c 	beq.w	8004338 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8004200:	7b3b      	ldrb	r3, [r7, #12]
 8004202:	099b      	lsrs	r3, r3, #6
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10d      	bne.n	8004226 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800420a:	7d7b      	ldrb	r3, [r7, #21]
 800420c:	461a      	mov	r2, r3
 800420e:	7d3b      	ldrb	r3, [r7, #20]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b29b      	uxth	r3, r3
 8004214:	4413      	add	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	3301      	adds	r3, #1
 800421a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800421c:	8bfb      	ldrh	r3, [r7, #30]
 800421e:	029a      	lsls	r2, r3, #10
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e02d      	b.n	8004282 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004226:	7c7b      	ldrb	r3, [r7, #17]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	7dbb      	ldrb	r3, [r7, #22]
 8004230:	09db      	lsrs	r3, r3, #7
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4413      	add	r3, r2
 8004236:	b2da      	uxtb	r2, r3
 8004238:	7d7b      	ldrb	r3, [r7, #21]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4413      	add	r3, r2
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3302      	adds	r3, #2
 800424a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800424e:	7d3b      	ldrb	r3, [r7, #20]
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	b29b      	uxth	r3, r3
 800425c:	4413      	add	r3, r2
 800425e:	b29a      	uxth	r2, r3
 8004260:	7cbb      	ldrb	r3, [r7, #18]
 8004262:	029b      	lsls	r3, r3, #10
 8004264:	b29b      	uxth	r3, r3
 8004266:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800426a:	b29b      	uxth	r3, r3
 800426c:	4413      	add	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004274:	8bfa      	ldrh	r2, [r7, #30]
 8004276:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800427a:	3b09      	subs	r3, #9
 800427c:	409a      	lsls	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8004288:	e056      	b.n	8004338 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004290:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004298:	e055      	b.n	8004346 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800429a:	f7ff fc13 	bl	8003ac4 <SD_ReadyWait>
 800429e:	4603      	mov	r3, r0
 80042a0:	2bff      	cmp	r3, #255	@ 0xff
 80042a2:	d14b      	bne.n	800433c <SD_disk_ioctl+0x230>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80042aa:	e047      	b.n	800433c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80042ac:	2100      	movs	r1, #0
 80042ae:	2049      	movs	r0, #73	@ 0x49
 80042b0:	f7ff fced 	bl	8003c8e <SD_SendCmd>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d142      	bne.n	8004340 <SD_disk_ioctl+0x234>
 80042ba:	2110      	movs	r1, #16
 80042bc:	6a38      	ldr	r0, [r7, #32]
 80042be:	f7ff fc75 	bl	8003bac <SD_RxDataBlock>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03b      	beq.n	8004340 <SD_disk_ioctl+0x234>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80042ce:	e037      	b.n	8004340 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80042d0:	2100      	movs	r1, #0
 80042d2:	204a      	movs	r0, #74	@ 0x4a
 80042d4:	f7ff fcdb 	bl	8003c8e <SD_SendCmd>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d132      	bne.n	8004344 <SD_disk_ioctl+0x238>
 80042de:	2110      	movs	r1, #16
 80042e0:	6a38      	ldr	r0, [r7, #32]
 80042e2:	f7ff fc63 	bl	8003bac <SD_RxDataBlock>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02b      	beq.n	8004344 <SD_disk_ioctl+0x238>
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80042f2:	e027      	b.n	8004344 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80042f4:	2100      	movs	r1, #0
 80042f6:	207a      	movs	r0, #122	@ 0x7a
 80042f8:	f7ff fcc9 	bl	8003c8e <SD_SendCmd>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004308:	e00b      	b.n	8004322 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800430a:	6a3c      	ldr	r4, [r7, #32]
 800430c:	1c63      	adds	r3, r4, #1
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	f7ff fbae 	bl	8003a70 <SPI_RxByte>
 8004314:	4603      	mov	r3, r0
 8004316:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800431c:	3301      	adds	r3, #1
 800431e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004322:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004326:	2b03      	cmp	r3, #3
 8004328:	d9ef      	bls.n	800430a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004336:	e006      	b.n	8004346 <SD_disk_ioctl+0x23a>
      break;
 8004338:	bf00      	nop
 800433a:	e004      	b.n	8004346 <SD_disk_ioctl+0x23a>
      break;
 800433c:	bf00      	nop
 800433e:	e002      	b.n	8004346 <SD_disk_ioctl+0x23a>
      break;
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <SD_disk_ioctl+0x23a>
      break;
 8004344:	bf00      	nop
    }
    DESELECT();
 8004346:	f7ff fb53 	bl	80039f0 <DESELECT>
    SPI_RxByte();
 800434a:	f7ff fb91 	bl	8003a70 <SPI_RxByte>
  }
  return res;
 800434e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004352:	4618      	mov	r0, r3
 8004354:	372c      	adds	r7, #44	@ 0x2c
 8004356:	46bd      	mov	sp, r7
 8004358:	bd90      	pop	{r4, r7, pc}
 800435a:	bf00      	nop
 800435c:	20000020 	.word	0x20000020

08004360 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	4a08      	ldr	r2, [pc, #32]	@ (8004390 <disk_status+0x30>)
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	79fa      	ldrb	r2, [r7, #7]
 8004378:	4905      	ldr	r1, [pc, #20]	@ (8004390 <disk_status+0x30>)
 800437a:	440a      	add	r2, r1
 800437c:	7a12      	ldrb	r2, [r2, #8]
 800437e:	4610      	mov	r0, r2
 8004380:	4798      	blx	r3
 8004382:	4603      	mov	r3, r0
 8004384:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000046c 	.word	0x2000046c

08004394 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <disk_initialize+0x4c>)
 80043a6:	5cd3      	ldrb	r3, [r2, r3]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d114      	bne.n	80043d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <disk_initialize+0x4c>)
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	79fa      	ldrb	r2, [r7, #7]
 80043ba:	4909      	ldr	r1, [pc, #36]	@ (80043e0 <disk_initialize+0x4c>)
 80043bc:	440a      	add	r2, r1
 80043be:	7a12      	ldrb	r2, [r2, #8]
 80043c0:	4610      	mov	r0, r2
 80043c2:	4798      	blx	r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	4a03      	ldr	r2, [pc, #12]	@ (80043e0 <disk_initialize+0x4c>)
 80043d2:	2101      	movs	r1, #1
 80043d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000046c 	.word	0x2000046c

080043e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004420 <disk_read+0x3c>)
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	689c      	ldr	r4, [r3, #8]
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4a07      	ldr	r2, [pc, #28]	@ (8004420 <disk_read+0x3c>)
 8004404:	4413      	add	r3, r2
 8004406:	7a18      	ldrb	r0, [r3, #8]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	47a0      	blx	r4
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
  return res;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	bf00      	nop
 8004420:	2000046c 	.word	0x2000046c

08004424 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <disk_write+0x3c>)
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68dc      	ldr	r4, [r3, #12]
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	4a07      	ldr	r2, [pc, #28]	@ (8004460 <disk_write+0x3c>)
 8004444:	4413      	add	r3, r2
 8004446:	7a18      	ldrb	r0, [r3, #8]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	47a0      	blx	r4
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]
  return res;
 8004454:	7dfb      	ldrb	r3, [r7, #23]
}
 8004456:	4618      	mov	r0, r3
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd90      	pop	{r4, r7, pc}
 800445e:	bf00      	nop
 8004460:	2000046c 	.word	0x2000046c

08004464 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	603a      	str	r2, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	460b      	mov	r3, r1
 8004472:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4a09      	ldr	r2, [pc, #36]	@ (800449c <disk_ioctl+0x38>)
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	79fa      	ldrb	r2, [r7, #7]
 8004482:	4906      	ldr	r1, [pc, #24]	@ (800449c <disk_ioctl+0x38>)
 8004484:	440a      	add	r2, r1
 8004486:	7a10      	ldrb	r0, [r2, #8]
 8004488:	79b9      	ldrb	r1, [r7, #6]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4798      	blx	r3
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
  return res;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	2000046c 	.word	0x2000046c

080044a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3301      	adds	r3, #1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b21b      	sxth	r3, r3
 80044c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80044c2:	89fb      	ldrh	r3, [r7, #14]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3303      	adds	r3, #3
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	3202      	adds	r2, #2
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	3201      	adds	r2, #1
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
	return rv;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	1c53      	adds	r3, r2, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	6179      	str	r1, [r7, #20]
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f1      	bne.n	80045be <mem_cpy+0x1a>
	}
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	617a      	str	r2, [r7, #20]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3b01      	subs	r3, #1
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f3      	bne.n	80045f6 <mem_set+0x10>
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	@ 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	4619      	mov	r1, r3
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	61ba      	str	r2, [r7, #24]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	1acb      	subs	r3, r1, r3
 8004648:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3b01      	subs	r3, #1
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <mem_cmp+0x40>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0eb      	beq.n	8004634 <mem_cmp+0x18>

	return r;
 800465c:	697b      	ldr	r3, [r7, #20]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	@ 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004674:	e002      	b.n	800467c <chk_chr+0x12>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3301      	adds	r3, #1
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <chk_chr+0x26>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4293      	cmp	r3, r2
 800468e:	d1f2      	bne.n	8004676 <chk_chr+0xc>
	return *str;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	781b      	ldrb	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e029      	b.n	8004708 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80046b4:	4a27      	ldr	r2, [pc, #156]	@ (8004754 <chk_lock+0xb4>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4413      	add	r3, r2
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01d      	beq.n	80046fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046c2:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <chk_lock+0xb4>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	4413      	add	r3, r2
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d116      	bne.n	8004702 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80046d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <chk_lock+0xb4>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	4413      	add	r3, r2
 80046dc:	3304      	adds	r3, #4
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d10c      	bne.n	8004702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80046e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004754 <chk_lock+0xb4>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	3308      	adds	r3, #8
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d102      	bne.n	8004702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80046fc:	e007      	b.n	800470e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3301      	adds	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d9d2      	bls.n	80046b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d109      	bne.n	8004728 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <chk_lock+0x80>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d101      	bne.n	8004724 <chk_lock+0x84>
 8004720:	2300      	movs	r3, #0
 8004722:	e010      	b.n	8004746 <chk_lock+0xa6>
 8004724:	2312      	movs	r3, #18
 8004726:	e00e      	b.n	8004746 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <chk_lock+0xa0>
 800472e:	4a09      	ldr	r2, [pc, #36]	@ (8004754 <chk_lock+0xb4>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	4413      	add	r3, r2
 8004736:	330c      	adds	r3, #12
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d101      	bne.n	8004744 <chk_lock+0xa4>
 8004740:	2310      	movs	r3, #16
 8004742:	e000      	b.n	8004746 <chk_lock+0xa6>
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000024c 	.word	0x2000024c

08004758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e002      	b.n	800476a <enq_lock+0x12>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d806      	bhi.n	800477e <enq_lock+0x26>
 8004770:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <enq_lock+0x40>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4413      	add	r3, r2
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f2      	bne.n	8004764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b02      	cmp	r3, #2
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000024c 	.word	0x2000024c

0800479c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e01f      	b.n	80047ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80047ac:	4a41      	ldr	r2, [pc, #260]	@ (80048b4 <inc_lock+0x118>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d113      	bne.n	80047e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80047be:	4a3d      	ldr	r2, [pc, #244]	@ (80048b4 <inc_lock+0x118>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d109      	bne.n	80047e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80047d2:	4a38      	ldr	r2, [pc, #224]	@ (80048b4 <inc_lock+0x118>)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	3308      	adds	r3, #8
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d006      	beq.n	80047f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d9dc      	bls.n	80047ac <inc_lock+0x10>
 80047f2:	e000      	b.n	80047f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80047f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d132      	bne.n	8004862 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e002      	b.n	8004808 <inc_lock+0x6c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d806      	bhi.n	800481c <inc_lock+0x80>
 800480e:	4a29      	ldr	r2, [pc, #164]	@ (80048b4 <inc_lock+0x118>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	4413      	add	r3, r2
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f2      	bne.n	8004802 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d101      	bne.n	8004826 <inc_lock+0x8a>
 8004822:	2300      	movs	r3, #0
 8004824:	e040      	b.n	80048a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4922      	ldr	r1, [pc, #136]	@ (80048b4 <inc_lock+0x118>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	440b      	add	r3, r1
 8004832:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	491e      	ldr	r1, [pc, #120]	@ (80048b4 <inc_lock+0x118>)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	440b      	add	r3, r1
 8004840:	3304      	adds	r3, #4
 8004842:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	491a      	ldr	r1, [pc, #104]	@ (80048b4 <inc_lock+0x118>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	440b      	add	r3, r1
 8004850:	3308      	adds	r3, #8
 8004852:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004854:	4a17      	ldr	r2, [pc, #92]	@ (80048b4 <inc_lock+0x118>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	4413      	add	r3, r2
 800485c:	330c      	adds	r3, #12
 800485e:	2200      	movs	r2, #0
 8004860:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <inc_lock+0xe0>
 8004868:	4a12      	ldr	r2, [pc, #72]	@ (80048b4 <inc_lock+0x118>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	4413      	add	r3, r2
 8004870:	330c      	adds	r3, #12
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <inc_lock+0xe0>
 8004878:	2300      	movs	r3, #0
 800487a:	e015      	b.n	80048a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <inc_lock+0xf8>
 8004882:	4a0c      	ldr	r2, [pc, #48]	@ (80048b4 <inc_lock+0x118>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	330c      	adds	r3, #12
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	e001      	b.n	8004898 <inc_lock+0xfc>
 8004894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004898:	4906      	ldr	r1, [pc, #24]	@ (80048b4 <inc_lock+0x118>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	440b      	add	r3, r1
 80048a0:	330c      	adds	r3, #12
 80048a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	2000024c 	.word	0x2000024c

080048b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d825      	bhi.n	8004918 <dec_lock+0x60>
		n = Files[i].ctr;
 80048cc:	4a17      	ldr	r2, [pc, #92]	@ (800492c <dec_lock+0x74>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	4413      	add	r3, r2
 80048d4:	330c      	adds	r3, #12
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e0:	d101      	bne.n	80048e6 <dec_lock+0x2e>
 80048e2:	2300      	movs	r3, #0
 80048e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <dec_lock+0x3a>
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80048f2:	4a0e      	ldr	r2, [pc, #56]	@ (800492c <dec_lock+0x74>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	4413      	add	r3, r2
 80048fa:	330c      	adds	r3, #12
 80048fc:	89fa      	ldrh	r2, [r7, #14]
 80048fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004900:	89fb      	ldrh	r3, [r7, #14]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <dec_lock+0x5a>
 8004906:	4a09      	ldr	r2, [pc, #36]	@ (800492c <dec_lock+0x74>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	737b      	strb	r3, [r7, #13]
 8004916:	e001      	b.n	800491c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004918:	2302      	movs	r3, #2
 800491a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800491c:	7b7b      	ldrb	r3, [r7, #13]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	2000024c 	.word	0x2000024c

08004930 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e010      	b.n	8004960 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800493e:	4a0d      	ldr	r2, [pc, #52]	@ (8004974 <clear_lock+0x44>)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	4413      	add	r3, r2
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d105      	bne.n	800495a <clear_lock+0x2a>
 800494e:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <clear_lock+0x44>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d9eb      	bls.n	800493e <clear_lock+0xe>
	}
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	2000024c 	.word	0x2000024c

08004978 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	78db      	ldrb	r3, [r3, #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d034      	beq.n	80049f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004990:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7858      	ldrb	r0, [r3, #1]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800499c:	2301      	movs	r3, #1
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	f7ff fd40 	bl	8004424 <disk_write>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e022      	b.n	80049f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	1ad2      	subs	r2, r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d217      	bcs.n	80049f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	789b      	ldrb	r3, [r3, #2]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e010      	b.n	80049f0 <sync_window+0x78>
					wsect += fs->fsize;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4413      	add	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7858      	ldrb	r0, [r3, #1]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80049e2:	2301      	movs	r3, #1
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	f7ff fd1d 	bl	8004424 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d8eb      	bhi.n	80049ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d01b      	beq.n	8004a50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffad 	bl	8004978 <sync_window>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7858      	ldrb	r0, [r3, #1]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a32:	2301      	movs	r3, #1
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	f7ff fcd5 	bl	80043e4 <disk_read>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff87 	bl	8004978 <sync_window>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d159      	bne.n	8004b28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d149      	bne.n	8004b10 <sync_fs+0xb4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d145      	bne.n	8004b10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	899b      	ldrh	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2100      	movs	r1, #0
 8004a92:	f7ff fda8 	bl	80045e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3338      	adds	r3, #56	@ 0x38
 8004a9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004a9e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fd37 	bl	8004516 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3338      	adds	r3, #56	@ 0x38
 8004aac:	4921      	ldr	r1, [pc, #132]	@ (8004b34 <sync_fs+0xd8>)
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fd4c 	bl	800454c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3338      	adds	r3, #56	@ 0x38
 8004ab8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004abc:	491e      	ldr	r1, [pc, #120]	@ (8004b38 <sync_fs+0xdc>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fd44 	bl	800454c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3338      	adds	r3, #56	@ 0x38
 8004ac8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7ff fd3a 	bl	800454c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3338      	adds	r3, #56	@ 0x38
 8004adc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7ff fd30 	bl	800454c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7858      	ldrb	r0, [r3, #1]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b04:	2301      	movs	r3, #1
 8004b06:	f7ff fc8d 	bl	8004424 <disk_write>
			fs->fsi_flag = 0;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fca3 	bl	8004464 <disk_ioctl>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <sync_fs+0xcc>
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	41615252 	.word	0x41615252
 8004b38:	61417272 	.word	0x61417272

08004b3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	3b02      	subs	r3, #2
 8004b4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	3b02      	subs	r3, #2
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d301      	bcc.n	8004b5c <clust2sect+0x20>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e008      	b.n	8004b6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	895b      	ldrh	r3, [r3, #10]
 8004b60:	461a      	mov	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	fb03 f202 	mul.w	r2, r3, r2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	4413      	add	r3, r2
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d904      	bls.n	8004b9a <get_fat+0x20>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e0ba      	b.n	8004d16 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ba4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	f000 8082 	beq.w	8004cb4 <get_fat+0x13a>
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	f300 80a6 	bgt.w	8004d02 <get_fat+0x188>
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <get_fat+0x46>
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d055      	beq.n	8004c6a <get_fat+0xf0>
 8004bbe:	e0a0      	b.n	8004d02 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	899b      	ldrh	r3, [r3, #12]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bde:	4413      	add	r3, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f7ff ff0c 	bl	8004a00 <move_window>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 808c 	bne.w	8004d08 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	60fa      	str	r2, [r7, #12]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	8992      	ldrh	r2, [r2, #12]
 8004bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bfe:	fb01 f202 	mul.w	r2, r1, r2
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	899b      	ldrh	r3, [r3, #12]
 8004c16:	4619      	mov	r1, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c1e:	4413      	add	r3, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f7ff feec 	bl	8004a00 <move_window>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d16e      	bne.n	8004d0c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	899b      	ldrh	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c3a:	fb01 f202 	mul.w	r2, r1, r2
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <get_fat+0xe6>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	e002      	b.n	8004c66 <get_fat+0xec>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c66:	617b      	str	r3, [r7, #20]
			break;
 8004c68:	e055      	b.n	8004d16 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	899b      	ldrh	r3, [r3, #12]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4619      	mov	r1, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c7e:	4413      	add	r3, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	6938      	ldr	r0, [r7, #16]
 8004c84:	f7ff febc 	bl	8004a00 <move_window>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d140      	bne.n	8004d10 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	8992      	ldrh	r2, [r2, #12]
 8004c9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ca0:	fb00 f202 	mul.w	r2, r0, r2
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fbf9 	bl	80044a0 <ld_word>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	617b      	str	r3, [r7, #20]
			break;
 8004cb2:	e030      	b.n	8004d16 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	899b      	ldrh	r3, [r3, #12]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cc8:	4413      	add	r3, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6938      	ldr	r0, [r7, #16]
 8004cce:	f7ff fe97 	bl	8004a00 <move_window>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11d      	bne.n	8004d14 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	8992      	ldrh	r2, [r2, #12]
 8004ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cea:	fb00 f202 	mul.w	r2, r0, r2
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fbec 	bl	80044d0 <ld_dword>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cfe:	617b      	str	r3, [r7, #20]
			break;
 8004d00:	e009      	b.n	8004d16 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e006      	b.n	8004d16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d08:	bf00      	nop
 8004d0a:	e004      	b.n	8004d16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d0c:	bf00      	nop
 8004d0e:	e002      	b.n	8004d16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d14:	bf00      	nop
		}
	}

	return val;
 8004d16:	697b      	ldr	r3, [r7, #20]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b089      	sub	sp, #36	@ 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f240 8109 	bls.w	8004f4a <put_fat+0x22a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f080 8103 	bcs.w	8004f4a <put_fat+0x22a>
		switch (fs->fs_type) {
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	f000 80b6 	beq.w	8004eba <put_fat+0x19a>
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f300 80fb 	bgt.w	8004f4a <put_fat+0x22a>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d003      	beq.n	8004d60 <put_fat+0x40>
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	f000 8083 	beq.w	8004e64 <put_fat+0x144>
 8004d5e:	e0f4      	b.n	8004f4a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	899b      	ldrh	r3, [r3, #12]
 8004d76:	4619      	mov	r1, r3
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d7e:	4413      	add	r3, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff fe3c 	bl	8004a00 <move_window>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d8c:	7ffb      	ldrb	r3, [r7, #31]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 80d4 	bne.w	8004f3c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	61ba      	str	r2, [r7, #24]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	8992      	ldrh	r2, [r2, #12]
 8004da4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004da8:	fb00 f202 	mul.w	r2, r0, r2
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	440b      	add	r3, r1
 8004db0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <put_fat+0xb8>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	b25a      	sxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b25b      	sxtb	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e001      	b.n	8004ddc <put_fat+0xbc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	899b      	ldrh	r3, [r3, #12]
 8004dee:	4619      	mov	r1, r3
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df6:	4413      	add	r3, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fe00 	bl	8004a00 <move_window>
 8004e00:	4603      	mov	r3, r0
 8004e02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e04:	7ffb      	ldrb	r3, [r7, #31]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 809a 	bne.w	8004f40 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	899b      	ldrh	r3, [r3, #12]
 8004e16:	461a      	mov	r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e1e:	fb00 f202 	mul.w	r2, r0, r2
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <put_fat+0x11a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e00e      	b.n	8004e58 <put_fat+0x138>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f023 030f 	bic.w	r3, r3, #15
 8004e44:	b25a      	sxtb	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	b25b      	sxtb	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	70da      	strb	r2, [r3, #3]
			break;
 8004e62:	e072      	b.n	8004f4a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	899b      	ldrh	r3, [r3, #12]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e78:	4413      	add	r3, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fdbf 	bl	8004a00 <move_window>
 8004e82:	4603      	mov	r3, r0
 8004e84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e86:	7ffb      	ldrb	r3, [r7, #31]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d15b      	bne.n	8004f44 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	8992      	ldrh	r2, [r2, #12]
 8004e9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e9e:	fb00 f202 	mul.w	r2, r0, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fb32 	bl	8004516 <st_word>
			fs->wflag = 1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	70da      	strb	r2, [r3, #3]
			break;
 8004eb8:	e047      	b.n	8004f4a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	899b      	ldrh	r3, [r3, #12]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ece:	4413      	add	r3, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fd94 	bl	8004a00 <move_window>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d132      	bne.n	8004f48 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	8992      	ldrh	r2, [r2, #12]
 8004ef6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004efa:	fb00 f202 	mul.w	r2, r0, r2
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	440b      	add	r3, r1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fae4 	bl	80044d0 <ld_dword>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f0e:	4323      	orrs	r3, r4
 8004f10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	8992      	ldrh	r2, [r2, #12]
 8004f20:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f24:	fb00 f202 	mul.w	r2, r0, r2
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fb0c 	bl	800454c <st_dword>
			fs->wflag = 1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	70da      	strb	r2, [r3, #3]
			break;
 8004f3a:	e006      	b.n	8004f4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004f48:	bf00      	nop
		}
	}
	return res;
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3724      	adds	r7, #36	@ 0x24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}

08004f54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d904      	bls.n	8004f7a <remove_chain+0x26>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d301      	bcc.n	8004f7e <remove_chain+0x2a>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e04b      	b.n	8005016 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00c      	beq.n	8004f9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	69b8      	ldr	r0, [r7, #24]
 8004f8c:	f7ff fec8 	bl	8004d20 <put_fat>
 8004f90:	4603      	mov	r3, r0
 8004f92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <remove_chain+0x4a>
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	e03b      	b.n	8005016 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fdea 	bl	8004b7a <get_fat>
 8004fa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d031      	beq.n	8005012 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <remove_chain+0x64>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e02e      	b.n	8005016 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbe:	d101      	bne.n	8004fc4 <remove_chain+0x70>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e028      	b.n	8005016 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	69b8      	ldr	r0, [r7, #24]
 8004fca:	f7ff fea9 	bl	8004d20 <put_fat>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <remove_chain+0x88>
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	e01c      	b.n	8005016 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d20b      	bcs.n	8005002 <remove_chain+0xae>
			fs->free_clst++;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d3c6      	bcc.n	8004f9e <remove_chain+0x4a>
 8005010:	e000      	b.n	8005014 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005012:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10d      	bne.n	8005050 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <create_chain+0x2c>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	429a      	cmp	r2, r3
 8005048:	d31b      	bcc.n	8005082 <create_chain+0x64>
 800504a:	2301      	movs	r3, #1
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e018      	b.n	8005082 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fd91 	bl	8004b7a <get_fat>
 8005058:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d801      	bhi.n	8005064 <create_chain+0x46>
 8005060:	2301      	movs	r3, #1
 8005062:	e070      	b.n	8005146 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800506a:	d101      	bne.n	8005070 <create_chain+0x52>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	e06a      	b.n	8005146 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d201      	bcs.n	800507e <create_chain+0x60>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e063      	b.n	8005146 <create_chain+0x128>
		scl = clst;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	429a      	cmp	r2, r3
 8005094:	d307      	bcc.n	80050a6 <create_chain+0x88>
				ncl = 2;
 8005096:	2302      	movs	r3, #2
 8005098:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d901      	bls.n	80050a6 <create_chain+0x88>
 80050a2:	2300      	movs	r3, #0
 80050a4:	e04f      	b.n	8005146 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff fd66 	bl	8004b7a <get_fat>
 80050ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d003      	beq.n	80050c4 <create_chain+0xa6>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050c2:	d101      	bne.n	80050c8 <create_chain+0xaa>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	e03e      	b.n	8005146 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d1da      	bne.n	8005086 <create_chain+0x68>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e038      	b.n	8005146 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80050d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80050d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050da:	69f9      	ldr	r1, [r7, #28]
 80050dc:	6938      	ldr	r0, [r7, #16]
 80050de:	f7ff fe1f 	bl	8004d20 <put_fat>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <create_chain+0xe2>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6938      	ldr	r0, [r7, #16]
 80050f8:	f7ff fe12 	bl	8004d20 <put_fat>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d116      	bne.n	8005134 <create_chain+0x116>
		fs->last_clst = ncl;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	3b02      	subs	r3, #2
 8005116:	429a      	cmp	r2, r3
 8005118:	d804      	bhi.n	8005124 <create_chain+0x106>
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	791b      	ldrb	r3, [r3, #4]
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	711a      	strb	r2, [r3, #4]
 8005132:	e007      	b.n	8005144 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <create_chain+0x122>
 800513a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800513e:	e000      	b.n	8005142 <create_chain+0x124>
 8005140:	2301      	movs	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005144:	69fb      	ldr	r3, [r7, #28]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800514e:	b480      	push	{r7}
 8005150:	b087      	sub	sp, #28
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	3304      	adds	r3, #4
 8005164:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	899b      	ldrh	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	8952      	ldrh	r2, [r2, #10]
 8005176:	fbb3 f3f2 	udiv	r3, r3, r2
 800517a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	613a      	str	r2, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <clmt_clust+0x42>
 800518c:	2300      	movs	r3, #0
 800518e:	e010      	b.n	80051b2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d307      	bcc.n	80051a8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3304      	adds	r3, #4
 80051a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051a6:	e7e9      	b.n	800517c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80051a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051d4:	d204      	bcs.n	80051e0 <dir_sdi+0x22>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80051e0:	2302      	movs	r3, #2
 80051e2:	e071      	b.n	80052c8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <dir_sdi+0x46>
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d902      	bls.n	8005204 <dir_sdi+0x46>
		clst = fs->dirbase;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	8912      	ldrh	r2, [r2, #8]
 8005212:	4293      	cmp	r3, r2
 8005214:	d301      	bcc.n	800521a <dir_sdi+0x5c>
 8005216:	2302      	movs	r3, #2
 8005218:	e056      	b.n	80052c8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	61da      	str	r2, [r3, #28]
 8005222:	e02d      	b.n	8005280 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	895b      	ldrh	r3, [r3, #10]
 8005228:	461a      	mov	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	899b      	ldrh	r3, [r3, #12]
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005234:	e019      	b.n	800526a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fc9d 	bl	8004b7a <get_fat>
 8005240:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005248:	d101      	bne.n	800524e <dir_sdi+0x90>
 800524a:	2301      	movs	r3, #1
 800524c:	e03c      	b.n	80052c8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d904      	bls.n	800525e <dir_sdi+0xa0>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	429a      	cmp	r2, r3
 800525c:	d301      	bcc.n	8005262 <dir_sdi+0xa4>
 800525e:	2302      	movs	r3, #2
 8005260:	e032      	b.n	80052c8 <dir_sdi+0x10a>
			ofs -= csz;
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	429a      	cmp	r2, r3
 8005270:	d2e1      	bcs.n	8005236 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005272:	6979      	ldr	r1, [r7, #20]
 8005274:	6938      	ldr	r0, [r7, #16]
 8005276:	f7ff fc61 	bl	8004b3c <clust2sect>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <dir_sdi+0xd4>
 800528e:	2302      	movs	r3, #2
 8005290:	e01a      	b.n	80052c8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	899b      	ldrh	r3, [r3, #12]
 800529a:	4619      	mov	r1, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a2:	441a      	add	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	899b      	ldrh	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80052ba:	fb00 f202 	mul.w	r2, r0, r2
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	18ca      	adds	r2, r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	3320      	adds	r3, #32
 80052e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <dir_next+0x28>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052f6:	d301      	bcc.n	80052fc <dir_next+0x2c>
 80052f8:	2304      	movs	r3, #4
 80052fa:	e0bb      	b.n	8005474 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	899b      	ldrh	r3, [r3, #12]
 8005300:	461a      	mov	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	fbb3 f1f2 	udiv	r1, r3, r2
 8005308:	fb01 f202 	mul.w	r2, r1, r2
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 809d 	bne.w	800544e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	8912      	ldrh	r2, [r2, #8]
 800532e:	4293      	cmp	r3, r2
 8005330:	f0c0 808d 	bcc.w	800544e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	2304      	movs	r3, #4
 800533c:	e09a      	b.n	8005474 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	899b      	ldrh	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	fbb3 f3f2 	udiv	r3, r3, r2
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	8952      	ldrh	r2, [r2, #10]
 800534e:	3a01      	subs	r2, #1
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d17b      	bne.n	800544e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7ff fc0b 	bl	8004b7a <get_fat>
 8005364:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d801      	bhi.n	8005370 <dir_next+0xa0>
 800536c:	2302      	movs	r3, #2
 800536e:	e081      	b.n	8005474 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005376:	d101      	bne.n	800537c <dir_next+0xac>
 8005378:	2301      	movs	r3, #1
 800537a:	e07b      	b.n	8005474 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	429a      	cmp	r2, r3
 8005384:	d359      	bcc.n	800543a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	61da      	str	r2, [r3, #28]
 8005392:	2304      	movs	r3, #4
 8005394:	e06e      	b.n	8005474 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f7ff fe3d 	bl	800501e <create_chain>
 80053a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <dir_next+0xe0>
 80053ac:	2307      	movs	r3, #7
 80053ae:	e061      	b.n	8005474 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <dir_next+0xea>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e05c      	b.n	8005474 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c0:	d101      	bne.n	80053c6 <dir_next+0xf6>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e056      	b.n	8005474 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fad6 	bl	8004978 <sync_window>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <dir_next+0x106>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e04e      	b.n	8005474 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	899b      	ldrh	r3, [r3, #12]
 80053e0:	461a      	mov	r2, r3
 80053e2:	2100      	movs	r1, #0
 80053e4:	f7ff f8ff 	bl	80045e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	6979      	ldr	r1, [r7, #20]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fba4 	bl	8004b3c <clust2sect>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80053fa:	e012      	b.n	8005422 <dir_next+0x152>
						fs->wflag = 1;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fab8 	bl	8004978 <sync_window>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <dir_next+0x142>
 800540e:	2301      	movs	r3, #1
 8005410:	e030      	b.n	8005474 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	635a      	str	r2, [r3, #52]	@ 0x34
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	895b      	ldrh	r3, [r3, #10]
 8005426:	461a      	mov	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4293      	cmp	r3, r2
 800542c:	d3e6      	bcc.n	80053fc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad2      	subs	r2, r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff fb7a 	bl	8004b3c <clust2sect>
 8005448:	4602      	mov	r2, r0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	899b      	ldrh	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	fbb3 f0f2 	udiv	r0, r3, r2
 8005466:	fb00 f202 	mul.w	r2, r0, r2
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	18ca      	adds	r2, r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800548c:	2100      	movs	r1, #0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fe95 	bl	80051be <dir_sdi>
 8005494:	4603      	mov	r3, r0
 8005496:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12b      	bne.n	80054f6 <dir_alloc+0x7a>
		n = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4619      	mov	r1, r3
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff faa9 	bl	8004a00 <move_window>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11d      	bne.n	80054f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2be5      	cmp	r3, #229	@ 0xe5
 80054c0:	d004      	beq.n	80054cc <dir_alloc+0x50>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	3301      	adds	r3, #1
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d102      	bne.n	80054e0 <dir_alloc+0x64>
 80054da:	e00c      	b.n	80054f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fef4 	bl	80052d0 <dir_next>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0d7      	beq.n	80054a2 <dir_alloc+0x26>
 80054f2:	e000      	b.n	80054f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80054f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d101      	bne.n	8005500 <dir_alloc+0x84>
 80054fc:	2307      	movs	r3, #7
 80054fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8005500:	7dfb      	ldrb	r3, [r7, #23]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	331a      	adds	r3, #26
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe ffc1 	bl	80044a0 <ld_word>
 800551e:	4603      	mov	r3, r0
 8005520:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d109      	bne.n	800553e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ffb6 	bl	80044a0 <ld_word>
 8005534:	4603      	mov	r3, r0
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	331a      	adds	r3, #26
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	b292      	uxth	r2, r2
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe ffd9 	bl	8004516 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d109      	bne.n	8005580 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f103 0214 	add.w	r2, r3, #20
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	b29b      	uxth	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7fe ffcb 	bl	8004516 <st_word>
	}
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	331a      	adds	r3, #26
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe ff82 	bl	80044a0 <ld_word>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <cmp_lfn+0x1e>
 80055a2:	2300      	movs	r3, #0
 80055a4:	e059      	b.n	800565a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ae:	1e5a      	subs	r2, r3, #1
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80055bc:	2301      	movs	r3, #1
 80055be:	81fb      	strh	r3, [r7, #14]
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e033      	b.n	800562e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80055c6:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <cmp_lfn+0xdc>)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4413      	add	r3, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe ff63 	bl	80044a0 <ld_word>
 80055da:	4603      	mov	r3, r0
 80055dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80055de:	89fb      	ldrh	r3, [r7, #14]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01a      	beq.n	800561a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80055e8:	d812      	bhi.n	8005610 <cmp_lfn+0x88>
 80055ea:	89bb      	ldrh	r3, [r7, #12]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f002 fa83 	bl	8007af8 <ff_wtoupper>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461c      	mov	r4, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	617a      	str	r2, [r7, #20]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f002 fa77 	bl	8007af8 <ff_wtoupper>
 800560a:	4603      	mov	r3, r0
 800560c:	429c      	cmp	r4, r3
 800560e:	d001      	beq.n	8005614 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005610:	2300      	movs	r3, #0
 8005612:	e022      	b.n	800565a <cmp_lfn+0xd2>
			}
			wc = uc;
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	81fb      	strh	r3, [r7, #14]
 8005618:	e006      	b.n	8005628 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800561a:	89bb      	ldrh	r3, [r7, #12]
 800561c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005620:	4293      	cmp	r3, r2
 8005622:	d001      	beq.n	8005628 <cmp_lfn+0xa0>
 8005624:	2300      	movs	r3, #0
 8005626:	e018      	b.n	800565a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3301      	adds	r3, #1
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d9c8      	bls.n	80055c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <cmp_lfn+0xd0>
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <cmp_lfn+0xd0>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <cmp_lfn+0xd0>
 8005654:	2300      	movs	r3, #0
 8005656:	e000      	b.n	800565a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005658:	2301      	movs	r3, #1
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	bf00      	nop
 8005664:	080089a8 	.word	0x080089a8

08005668 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	460b      	mov	r3, r1
 8005678:	71fb      	strb	r3, [r7, #7]
 800567a:	4613      	mov	r3, r2
 800567c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	330d      	adds	r3, #13
 8005682:	79ba      	ldrb	r2, [r7, #6]
 8005684:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	330b      	adds	r3, #11
 800568a:	220f      	movs	r2, #15
 800568c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	330c      	adds	r3, #12
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	331a      	adds	r3, #26
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe ff3a 	bl	8004516 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	4613      	mov	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	82fb      	strh	r3, [r7, #22]
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <put_lfn+0x6c>
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	61fa      	str	r2, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80056d4:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <put_lfn+0xcc>)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	4413      	add	r3, r2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4413      	add	r3, r2
 80056e2:	8afa      	ldrh	r2, [r7, #22]
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe ff15 	bl	8004516 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80056ec:	8afb      	ldrh	r3, [r7, #22]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <put_lfn+0x90>
 80056f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d9da      	bls.n	80056ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005704:	8afb      	ldrh	r3, [r7, #22]
 8005706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800570a:	4293      	cmp	r3, r2
 800570c:	d006      	beq.n	800571c <put_lfn+0xb4>
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <put_lfn+0xbc>
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005722:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	701a      	strb	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	080089a8 	.word	0x080089a8

08005738 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	@ 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005746:	220b      	movs	r2, #11
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7fe ff2a 	bl	80045a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b05      	cmp	r3, #5
 8005754:	d92b      	bls.n	80057ae <gen_numname+0x76>
		sr = seq;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800575a:	e022      	b.n	80057a2 <gen_numname+0x6a>
			wc = *lfn++;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1c9a      	adds	r2, r3, #2
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005766:	2300      	movs	r3, #0
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576a:	e017      	b.n	800579c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005a      	lsls	r2, r3, #1
 8005770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800577a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <gen_numname+0x5e>
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005790:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005794:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	3301      	adds	r3, #1
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d9e4      	bls.n	800576c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1d8      	bne.n	800575c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80057ae:	2307      	movs	r3, #7
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3330      	adds	r3, #48	@ 0x30
 80057be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80057c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057c6:	2b39      	cmp	r3, #57	@ 0x39
 80057c8:	d904      	bls.n	80057d4 <gen_numname+0x9c>
 80057ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ce:	3307      	adds	r3, #7
 80057d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057da:	3330      	adds	r3, #48	@ 0x30
 80057dc:	443b      	add	r3, r7
 80057de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80057e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1df      	bne.n	80057b2 <gen_numname+0x7a>
	ns[i] = '~';
 80057f2:	f107 0214 	add.w	r2, r7, #20
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	4413      	add	r3, r2
 80057fa:	227e      	movs	r2, #126	@ 0x7e
 80057fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
 8005802:	e002      	b.n	800580a <gen_numname+0xd2>
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	3301      	adds	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	429a      	cmp	r2, r3
 8005810:	d205      	bcs.n	800581e <gen_numname+0xe6>
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b20      	cmp	r3, #32
 800581c:	d1f2      	bne.n	8005804 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	2b07      	cmp	r3, #7
 8005822:	d807      	bhi.n	8005834 <gen_numname+0xfc>
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	62ba      	str	r2, [r7, #40]	@ 0x28
 800582a:	3330      	adds	r3, #48	@ 0x30
 800582c:	443b      	add	r3, r7
 800582e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005832:	e000      	b.n	8005836 <gen_numname+0xfe>
 8005834:	2120      	movs	r1, #32
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	627a      	str	r2, [r7, #36]	@ 0x24
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	460a      	mov	r2, r1
 8005842:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	2b07      	cmp	r3, #7
 8005848:	d9e9      	bls.n	800581e <gen_numname+0xe6>
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	3730      	adds	r7, #48	@ 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005860:	230b      	movs	r3, #11
 8005862:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	0852      	lsrs	r2, r2, #1
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4313      	orrs	r3, r2
 800586e:	b2da      	uxtb	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6079      	str	r1, [r7, #4]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4413      	add	r3, r2
 800587a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ed      	bne.n	8005864 <sum_sfn+0x10>
	return sum;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058a4:	2100      	movs	r1, #0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fc89 	bl	80051be <dir_sdi>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <dir_find+0x24>
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	e0a9      	b.n	8005a0e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80058ba:	23ff      	movs	r3, #255	@ 0xff
 80058bc:	753b      	strb	r3, [r7, #20]
 80058be:	7d3b      	ldrb	r3, [r7, #20]
 80058c0:	757b      	strb	r3, [r7, #21]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6938      	ldr	r0, [r7, #16]
 80058d2:	f7ff f895 	bl	8004a00 <move_window>
 80058d6:	4603      	mov	r3, r0
 80058d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 8090 	bne.w	8005a02 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80058ea:	7dbb      	ldrb	r3, [r7, #22]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <dir_find+0x60>
 80058f0:	2304      	movs	r3, #4
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e08a      	b.n	8005a0c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	330b      	adds	r3, #11
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800590a:	7dbb      	ldrb	r3, [r7, #22]
 800590c:	2be5      	cmp	r3, #229	@ 0xe5
 800590e:	d007      	beq.n	8005920 <dir_find+0x8a>
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <dir_find+0x98>
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d006      	beq.n	800592e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005920:	23ff      	movs	r3, #255	@ 0xff
 8005922:	757b      	strb	r3, [r7, #21]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800592a:	631a      	str	r2, [r3, #48]	@ 0x30
 800592c:	e05e      	b.n	80059ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b0f      	cmp	r3, #15
 8005932:	d136      	bne.n	80059a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d154      	bne.n	80059ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005942:	7dbb      	ldrb	r3, [r7, #22]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00d      	beq.n	8005968 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	7b5b      	ldrb	r3, [r3, #13]
 8005952:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005954:	7dbb      	ldrb	r3, [r7, #22]
 8005956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800595a:	75bb      	strb	r3, [r7, #22]
 800595c:	7dbb      	ldrb	r3, [r7, #22]
 800595e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005968:	7dba      	ldrb	r2, [r7, #22]
 800596a:	7d7b      	ldrb	r3, [r7, #21]
 800596c:	429a      	cmp	r2, r3
 800596e:	d115      	bne.n	800599c <dir_find+0x106>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	330d      	adds	r3, #13
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	7d3a      	ldrb	r2, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d10e      	bne.n	800599c <dir_find+0x106>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7ff fdfd 	bl	8005588 <cmp_lfn>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <dir_find+0x106>
 8005994:	7d7b      	ldrb	r3, [r7, #21]
 8005996:	3b01      	subs	r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e000      	b.n	800599e <dir_find+0x108>
 800599c:	23ff      	movs	r3, #255	@ 0xff
 800599e:	757b      	strb	r3, [r7, #21]
 80059a0:	e024      	b.n	80059ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80059a2:	7d7b      	ldrb	r3, [r7, #21]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <dir_find+0x126>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff ff51 	bl	8005854 <sum_sfn>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	7d3b      	ldrb	r3, [r7, #20]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d024      	beq.n	8005a06 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <dir_find+0x14a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a18      	ldr	r0, [r3, #32]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	@ 0x24
 80059d2:	220b      	movs	r2, #11
 80059d4:	4619      	mov	r1, r3
 80059d6:	f7fe fe21 	bl	800461c <mem_cmp>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d014      	beq.n	8005a0a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80059e0:	23ff      	movs	r3, #255	@ 0xff
 80059e2:	757b      	strb	r3, [r7, #21]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fc6e 	bl	80052d0 <dir_next>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f43f af65 	beq.w	80058ca <dir_find+0x34>
 8005a00:	e004      	b.n	8005a0c <dir_find+0x176>
		if (res != FR_OK) break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a0a:	bf00      	nop

	return res;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005a2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <dir_register+0x20>
 8005a34:	2306      	movs	r3, #6
 8005a36:	e0e0      	b.n	8005bfa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3c:	e002      	b.n	8005a44 <dir_register+0x2c>
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	3301      	adds	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f4      	bne.n	8005a3e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	220c      	movs	r2, #12
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fd9f 	bl	80045a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d032      	beq.n	8005ad6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2240      	movs	r2, #64	@ 0x40
 8005a74:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005a78:	2301      	movs	r3, #1
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7c:	e016      	b.n	8005aac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	f107 010c 	add.w	r1, r7, #12
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	f7ff fe53 	bl	8005738 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff feff 	bl	8005896 <dir_find>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	2b63      	cmp	r3, #99	@ 0x63
 8005ab0:	d9e5      	bls.n	8005a7e <dir_register+0x66>
 8005ab2:	e000      	b.n	8005ab6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005ab4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	2b64      	cmp	r3, #100	@ 0x64
 8005aba:	d101      	bne.n	8005ac0 <dir_register+0xa8>
 8005abc:	2307      	movs	r3, #7
 8005abe:	e09c      	b.n	8005bfa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d002      	beq.n	8005ace <dir_register+0xb6>
 8005ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005acc:	e095      	b.n	8005bfa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ace:	7dfa      	ldrb	r2, [r7, #23]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <dir_register+0xd8>
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	4a47      	ldr	r2, [pc, #284]	@ (8005c04 <dir_register+0x1ec>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	3301      	adds	r3, #1
 8005aee:	e000      	b.n	8005af2 <dir_register+0xda>
 8005af0:	2301      	movs	r3, #1
 8005af2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005af4:	6a39      	ldr	r1, [r7, #32]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fcc0 	bl	800547c <dir_alloc>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d148      	bne.n	8005b9c <dir_register+0x184>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d042      	beq.n	8005b9c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	015b      	lsls	r3, r3, #5
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fb4b 	bl	80051be <dir_sdi>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d132      	bne.n	8005b9c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	@ 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fe8a 	bl	8005854 <sum_sfn>
 8005b40:	4603      	mov	r3, r0
 8005b42:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	69f8      	ldr	r0, [r7, #28]
 8005b4c:	f7fe ff58 	bl	8004a00 <move_window>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005b56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11d      	bne.n	8005b9a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	6918      	ldr	r0, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a19      	ldr	r1, [r3, #32]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	7efb      	ldrb	r3, [r7, #27]
 8005b6c:	f7ff fd7c 	bl	8005668 <put_lfn>
				fs->wflag = 1;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2201      	movs	r2, #1
 8005b74:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005b76:	2100      	movs	r1, #0
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fba9 	bl	80052d0 <dir_next>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005b84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <dir_register+0x184>
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1d5      	bne.n	8005b44 <dir_register+0x12c>
 8005b98:	e000      	b.n	8005b9c <dir_register+0x184>
				if (res != FR_OK) break;
 8005b9a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d128      	bne.n	8005bf6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	69f8      	ldr	r0, [r7, #28]
 8005bac:	f7fe ff28 	bl	8004a00 <move_window>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11b      	bne.n	8005bf6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fd0d 	bl	80045e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a18      	ldr	r0, [r3, #32]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3324      	adds	r3, #36	@ 0x24
 8005bd4:	220b      	movs	r2, #11
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fe fce4 	bl	80045a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	330c      	adds	r3, #12
 8005be8:	f002 0218 	and.w	r2, r2, #24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3730      	adds	r7, #48	@ 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	4ec4ec4f 	.word	0x4ec4ec4f

08005c08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	61ba      	str	r2, [r7, #24]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005c36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c38:	2b1f      	cmp	r3, #31
 8005c3a:	d940      	bls.n	8005cbe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005c3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c40:	d006      	beq.n	8005c50 <create_name+0x48>
 8005c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c44:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c46:	d110      	bne.n	8005c6a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c48:	e002      	b.n	8005c50 <create_name+0x48>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4413      	add	r3, r2
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c5a:	d0f6      	beq.n	8005c4a <create_name+0x42>
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c66:	d0f0      	beq.n	8005c4a <create_name+0x42>
			break;
 8005c68:	e02a      	b.n	8005cc0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c6e:	d901      	bls.n	8005c74 <create_name+0x6c>
 8005c70:	2306      	movs	r3, #6
 8005c72:	e17d      	b.n	8005f70 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005c74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005c7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fefe 	bl	8007a80 <ff_convert>
 8005c84:	4603      	mov	r3, r0
 8005c86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <create_name+0x8a>
 8005c8e:	2306      	movs	r3, #6
 8005c90:	e16e      	b.n	8005f70 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005c92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c96:	d809      	bhi.n	8005cac <create_name+0xa4>
 8005c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	488d      	ldr	r0, [pc, #564]	@ (8005ed4 <create_name+0x2cc>)
 8005c9e:	f7fe fce4 	bl	800466a <chk_chr>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <create_name+0xa4>
 8005ca8:	2306      	movs	r3, #6
 8005caa:	e161      	b.n	8005f70 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	617a      	str	r2, [r7, #20]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005cba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005cbc:	e7b4      	b.n	8005c28 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005cbe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	441a      	add	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005cca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ccc:	2b1f      	cmp	r3, #31
 8005cce:	d801      	bhi.n	8005cd4 <create_name+0xcc>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	e000      	b.n	8005cd6 <create_name+0xce>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005cda:	e011      	b.n	8005d00 <create_name+0xf8>
		w = lfn[di - 1];
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d002      	beq.n	8005cfa <create_name+0xf2>
 8005cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cf8:	d106      	bne.n	8005d08 <create_name+0x100>
		di--;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ea      	bne.n	8005cdc <create_name+0xd4>
 8005d06:	e000      	b.n	8005d0a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005d08:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <create_name+0x118>
 8005d1c:	2306      	movs	r3, #6
 8005d1e:	e127      	b.n	8005f70 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3324      	adds	r3, #36	@ 0x24
 8005d24:	220b      	movs	r2, #11
 8005d26:	2120      	movs	r1, #32
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fc5c 	bl	80045e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e002      	b.n	8005d3a <create_name+0x132>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d0f5      	beq.n	8005d34 <create_name+0x12c>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d54:	d0ee      	beq.n	8005d34 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <create_name+0x168>
 8005d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d60:	f043 0303 	orr.w	r3, r3, #3
 8005d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005d68:	e002      	b.n	8005d70 <create_name+0x168>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <create_name+0x182>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d88:	d1ef      	bne.n	8005d6a <create_name+0x162>

	i = b = 0; ni = 8;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	2308      	movs	r3, #8
 8005d96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	61ba      	str	r2, [r7, #24]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005da8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8090 	beq.w	8005ed0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d006      	beq.n	8005dc4 <create_name+0x1bc>
 8005db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dba:	d10a      	bne.n	8005dd2 <create_name+0x1ca>
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d006      	beq.n	8005dd2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dc8:	f043 0303 	orr.w	r3, r3, #3
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	e07d      	b.n	8005ece <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005dd2:	6a3a      	ldr	r2, [r7, #32]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d203      	bcs.n	8005de2 <create_name+0x1da>
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d123      	bne.n	8005e2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d106      	bne.n	8005df6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dec:	f043 0303 	orr.w	r3, r3, #3
 8005df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005df4:	e075      	b.n	8005ee2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d005      	beq.n	8005e0a <create_name+0x202>
 8005dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e02:	f043 0303 	orr.w	r3, r3, #3
 8005e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d866      	bhi.n	8005ee0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	2308      	movs	r3, #8
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	230b      	movs	r3, #11
 8005e1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005e28:	e051      	b.n	8005ece <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e2e:	d914      	bls.n	8005e5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005e30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fe23 	bl	8007a80 <ff_convert>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005e3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <create_name+0x246>
 8005e44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e46:	3b80      	subs	r3, #128	@ 0x80
 8005e48:	4a23      	ldr	r2, [pc, #140]	@ (8005ed8 <create_name+0x2d0>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <create_name+0x268>
 8005e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e62:	4619      	mov	r1, r3
 8005e64:	481d      	ldr	r0, [pc, #116]	@ (8005edc <create_name+0x2d4>)
 8005e66:	f7fe fc00 	bl	800466a <chk_chr>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005e70:	235f      	movs	r3, #95	@ 0x5f
 8005e72:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e78:	f043 0303 	orr.w	r3, r3, #3
 8005e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e80:	e01b      	b.n	8005eba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	d909      	bls.n	8005e9c <create_name+0x294>
 8005e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e8a:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e8c:	d806      	bhi.n	8005e9c <create_name+0x294>
					b |= 2;
 8005e8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e92:	f043 0302 	orr.w	r3, r3, #2
 8005e96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005e9a:	e00e      	b.n	8005eba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e9e:	2b60      	cmp	r3, #96	@ 0x60
 8005ea0:	d90b      	bls.n	8005eba <create_name+0x2b2>
 8005ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ea4:	2b7a      	cmp	r3, #122	@ 0x7a
 8005ea6:	d808      	bhi.n	8005eba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eb6:	3b20      	subs	r3, #32
 8005eb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	623a      	str	r2, [r7, #32]
 8005ec0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ec2:	b2d1      	uxtb	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	460a      	mov	r2, r1
 8005eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005ece:	e763      	b.n	8005d98 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005ed0:	bf00      	nop
 8005ed2:	e006      	b.n	8005ee2 <create_name+0x2da>
 8005ed4:	080088c8 	.word	0x080088c8
 8005ed8:	08008928 	.word	0x08008928
 8005edc:	080088d4 	.word	0x080088d4
			if (si > di) break;			/* No extension */
 8005ee0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ee8:	2be5      	cmp	r3, #229	@ 0xe5
 8005eea:	d103      	bne.n	8005ef4 <create_name+0x2ec>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2205      	movs	r2, #5
 8005ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d104      	bne.n	8005f04 <create_name+0x2fc>
 8005efa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d005      	beq.n	8005f1c <create_name+0x314>
 8005f10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d105      	bne.n	8005f28 <create_name+0x320>
 8005f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d117      	bne.n	8005f64 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d105      	bne.n	8005f4c <create_name+0x344>
 8005f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f44:	f043 0310 	orr.w	r3, r3, #16
 8005f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d105      	bne.n	8005f64 <create_name+0x35c>
 8005f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5c:	f043 0308 	orr.w	r3, r3, #8
 8005f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005f6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005f6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	@ 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f8c:	e002      	b.n	8005f94 <follow_path+0x1c>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f9a:	d0f8      	beq.n	8005f8e <follow_path+0x16>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fa2:	d0f4      	beq.n	8005f8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b1f      	cmp	r3, #31
 8005fb0:	d80a      	bhi.n	8005fc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2280      	movs	r2, #128	@ 0x80
 8005fb6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff f8fe 	bl	80051be <dir_sdi>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]
 8005fc6:	e048      	b.n	800605a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fc8:	463b      	mov	r3, r7
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe1b 	bl	8005c08 <create_name>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d139      	bne.n	8006050 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fc5a 	bl	8005896 <dir_find>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d12c      	bne.n	8006054 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d127      	bne.n	8006054 <follow_path+0xdc>
 8006004:	2305      	movs	r3, #5
 8006006:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006008:	e024      	b.n	8006054 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d121      	bne.n	8006058 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	799b      	ldrb	r3, [r3, #6]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006020:	2305      	movs	r3, #5
 8006022:	75fb      	strb	r3, [r7, #23]
 8006024:	e019      	b.n	800605a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	8992      	ldrh	r2, [r2, #12]
 8006034:	fbb3 f0f2 	udiv	r0, r3, r2
 8006038:	fb00 f202 	mul.w	r2, r0, r2
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	440b      	add	r3, r1
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fa61 	bl	800550a <ld_clust>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800604e:	e7bb      	b.n	8005fc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006050:	bf00      	nop
 8006052:	e002      	b.n	800605a <follow_path+0xe2>
				break;
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006058:	bf00      	nop
			}
		}
	}

	return res;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006070:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d031      	beq.n	80060de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e002      	b.n	8006088 <get_ldnumber+0x24>
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	3301      	adds	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b1f      	cmp	r3, #31
 800608e:	d903      	bls.n	8006098 <get_ldnumber+0x34>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b3a      	cmp	r3, #58	@ 0x3a
 8006096:	d1f4      	bne.n	8006082 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b3a      	cmp	r3, #58	@ 0x3a
 800609e:	d11c      	bne.n	80060da <get_ldnumber+0x76>
			tp = *path;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	60fa      	str	r2, [r7, #12]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	3b30      	subs	r3, #48	@ 0x30
 80060b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d80e      	bhi.n	80060d6 <get_ldnumber+0x72>
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d10a      	bne.n	80060d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d107      	bne.n	80060d6 <get_ldnumber+0x72>
					vol = (int)i;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3301      	adds	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	e002      	b.n	80060e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060de:	693b      	ldr	r3, [r7, #16]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	70da      	strb	r2, [r3, #3]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006102:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fe fc7a 	bl	8004a00 <move_window>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <check_fs+0x2a>
 8006112:	2304      	movs	r3, #4
 8006114:	e038      	b.n	8006188 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3338      	adds	r3, #56	@ 0x38
 800611a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe f9be 	bl	80044a0 <ld_word>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800612c:	429a      	cmp	r2, r3
 800612e:	d001      	beq.n	8006134 <check_fs+0x48>
 8006130:	2303      	movs	r3, #3
 8006132:	e029      	b.n	8006188 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800613a:	2be9      	cmp	r3, #233	@ 0xe9
 800613c:	d009      	beq.n	8006152 <check_fs+0x66>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006144:	2beb      	cmp	r3, #235	@ 0xeb
 8006146:	d11e      	bne.n	8006186 <check_fs+0x9a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800614e:	2b90      	cmp	r3, #144	@ 0x90
 8006150:	d119      	bne.n	8006186 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3338      	adds	r3, #56	@ 0x38
 8006156:	3336      	adds	r3, #54	@ 0x36
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe f9b9 	bl	80044d0 <ld_dword>
 800615e:	4603      	mov	r3, r0
 8006160:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006164:	4a0a      	ldr	r2, [pc, #40]	@ (8006190 <check_fs+0xa4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <check_fs+0x82>
 800616a:	2300      	movs	r3, #0
 800616c:	e00c      	b.n	8006188 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3338      	adds	r3, #56	@ 0x38
 8006172:	3352      	adds	r3, #82	@ 0x52
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe f9ab 	bl	80044d0 <ld_dword>
 800617a:	4603      	mov	r3, r0
 800617c:	4a05      	ldr	r2, [pc, #20]	@ (8006194 <check_fs+0xa8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d101      	bne.n	8006186 <check_fs+0x9a>
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006186:	2302      	movs	r3, #2
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	00544146 	.word	0x00544146
 8006194:	33544146 	.word	0x33544146

08006198 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b096      	sub	sp, #88	@ 0x58
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff ff59 	bl	8006064 <get_ldnumber>
 80061b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da01      	bge.n	80061be <find_volume+0x26>
 80061ba:	230b      	movs	r3, #11
 80061bc:	e265      	b.n	800668a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061be:	4a9f      	ldr	r2, [pc, #636]	@ (800643c <find_volume+0x2a4>)
 80061c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <find_volume+0x3a>
 80061ce:	230c      	movs	r3, #12
 80061d0:	e25b      	b.n	800668a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe f8b7 	bl	8004360 <disk_status>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <find_volume+0x82>
 800620a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006216:	230a      	movs	r3, #10
 8006218:	e237      	b.n	800668a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800621a:	2300      	movs	r3, #0
 800621c:	e235      	b.n	800668a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	b2da      	uxtb	r2, r3
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe f8af 	bl	8004394 <disk_initialize>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800623c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006248:	2303      	movs	r3, #3
 800624a:	e21e      	b.n	800668a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <find_volume+0xca>
 8006252:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800625e:	230a      	movs	r3, #10
 8006260:	e213      	b.n	800668a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	7858      	ldrb	r0, [r3, #1]
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	330c      	adds	r3, #12
 800626a:	461a      	mov	r2, r3
 800626c:	2102      	movs	r1, #2
 800626e:	f7fe f8f9 	bl	8004464 <disk_ioctl>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <find_volume+0xe4>
 8006278:	2301      	movs	r3, #1
 800627a:	e206      	b.n	800668a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	899b      	ldrh	r3, [r3, #12]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006284:	d80d      	bhi.n	80062a2 <find_volume+0x10a>
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	899b      	ldrh	r3, [r3, #12]
 800628a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628e:	d308      	bcc.n	80062a2 <find_volume+0x10a>
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	899b      	ldrh	r3, [r3, #12]
 8006294:	461a      	mov	r2, r3
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	899b      	ldrh	r3, [r3, #12]
 800629a:	3b01      	subs	r3, #1
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <find_volume+0x10e>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e1f1      	b.n	800668a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80062aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062ae:	f7ff ff1d 	bl	80060ec <check_fs>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80062b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d149      	bne.n	8006354 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062c0:	2300      	movs	r3, #0
 80062c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c4:	e01e      	b.n	8006304 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80062cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80062d4:	4413      	add	r3, r2
 80062d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	3304      	adds	r3, #4
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d006      	beq.n	80062f0 <find_volume+0x158>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	3308      	adds	r3, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f8f2 	bl	80044d0 <ld_dword>
 80062ec:	4602      	mov	r2, r0
 80062ee:	e000      	b.n	80062f2 <find_volume+0x15a>
 80062f0:	2200      	movs	r2, #0
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3358      	adds	r3, #88	@ 0x58
 80062f8:	443b      	add	r3, r7
 80062fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006300:	3301      	adds	r3, #1
 8006302:	643b      	str	r3, [r7, #64]	@ 0x40
 8006304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006306:	2b03      	cmp	r3, #3
 8006308:	d9dd      	bls.n	80062c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800630a:	2300      	movs	r3, #0
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800630e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <find_volume+0x182>
 8006314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006316:	3b01      	subs	r3, #1
 8006318:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800631a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	3358      	adds	r3, #88	@ 0x58
 8006320:	443b      	add	r3, r7
 8006322:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006326:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <find_volume+0x1a2>
 800632e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006330:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006332:	f7ff fedb 	bl	80060ec <check_fs>
 8006336:	4603      	mov	r3, r0
 8006338:	e000      	b.n	800633c <find_volume+0x1a4>
 800633a:	2303      	movs	r3, #3
 800633c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006340:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006344:	2b01      	cmp	r3, #1
 8006346:	d905      	bls.n	8006354 <find_volume+0x1bc>
 8006348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800634a:	3301      	adds	r3, #1
 800634c:	643b      	str	r3, [r7, #64]	@ 0x40
 800634e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006350:	2b03      	cmp	r3, #3
 8006352:	d9e2      	bls.n	800631a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006354:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006358:	2b04      	cmp	r3, #4
 800635a:	d101      	bne.n	8006360 <find_volume+0x1c8>
 800635c:	2301      	movs	r3, #1
 800635e:	e194      	b.n	800668a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006360:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006364:	2b01      	cmp	r3, #1
 8006366:	d901      	bls.n	800636c <find_volume+0x1d4>
 8006368:	230d      	movs	r3, #13
 800636a:	e18e      	b.n	800668a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	3338      	adds	r3, #56	@ 0x38
 8006370:	330b      	adds	r3, #11
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe f894 	bl	80044a0 <ld_word>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	899b      	ldrh	r3, [r3, #12]
 8006380:	429a      	cmp	r2, r3
 8006382:	d001      	beq.n	8006388 <find_volume+0x1f0>
 8006384:	230d      	movs	r3, #13
 8006386:	e180      	b.n	800668a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	3338      	adds	r3, #56	@ 0x38
 800638c:	3316      	adds	r3, #22
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe f886 	bl	80044a0 <ld_word>
 8006394:	4603      	mov	r3, r0
 8006396:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <find_volume+0x214>
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	3338      	adds	r3, #56	@ 0x38
 80063a2:	3324      	adds	r3, #36	@ 0x24
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe f893 	bl	80044d0 <ld_dword>
 80063aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	789b      	ldrb	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d005      	beq.n	80063d0 <find_volume+0x238>
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	789b      	ldrb	r3, [r3, #2]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d001      	beq.n	80063d0 <find_volume+0x238>
 80063cc:	230d      	movs	r3, #13
 80063ce:	e15c      	b.n	800668a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	789b      	ldrb	r3, [r3, #2]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
 80063dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063e4:	461a      	mov	r2, r3
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	895b      	ldrh	r3, [r3, #10]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <find_volume+0x26c>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	895b      	ldrh	r3, [r3, #10]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	895b      	ldrh	r3, [r3, #10]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <find_volume+0x270>
 8006404:	230d      	movs	r3, #13
 8006406:	e140      	b.n	800668a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	3338      	adds	r3, #56	@ 0x38
 800640c:	3311      	adds	r3, #17
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe f846 	bl	80044a0 <ld_word>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	891b      	ldrh	r3, [r3, #8]
 8006420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006422:	8992      	ldrh	r2, [r2, #12]
 8006424:	0952      	lsrs	r2, r2, #5
 8006426:	b292      	uxth	r2, r2
 8006428:	fbb3 f1f2 	udiv	r1, r3, r2
 800642c:	fb01 f202 	mul.w	r2, r1, r2
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <find_volume+0x2a8>
 8006438:	230d      	movs	r3, #13
 800643a:	e126      	b.n	800668a <find_volume+0x4f2>
 800643c:	20000244 	.word	0x20000244

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	3338      	adds	r3, #56	@ 0x38
 8006444:	3313      	adds	r3, #19
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe f82a 	bl	80044a0 <ld_word>
 800644c:	4603      	mov	r3, r0
 800644e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <find_volume+0x2cc>
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	3338      	adds	r3, #56	@ 0x38
 800645a:	3320      	adds	r3, #32
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe f837 	bl	80044d0 <ld_dword>
 8006462:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	3338      	adds	r3, #56	@ 0x38
 8006468:	330e      	adds	r3, #14
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe f818 	bl	80044a0 <ld_word>
 8006470:	4603      	mov	r3, r0
 8006472:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006474:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <find_volume+0x2e6>
 800647a:	230d      	movs	r3, #13
 800647c:	e105      	b.n	800668a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800647e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006482:	4413      	add	r3, r2
 8006484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006486:	8911      	ldrh	r1, [r2, #8]
 8006488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800648a:	8992      	ldrh	r2, [r2, #12]
 800648c:	0952      	lsrs	r2, r2, #5
 800648e:	b292      	uxth	r2, r2
 8006490:	fbb1 f2f2 	udiv	r2, r1, r2
 8006494:	b292      	uxth	r2, r2
 8006496:	4413      	add	r3, r2
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800649a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	429a      	cmp	r2, r3
 80064a0:	d201      	bcs.n	80064a6 <find_volume+0x30e>
 80064a2:	230d      	movs	r3, #13
 80064a4:	e0f1      	b.n	800668a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80064a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ae:	8952      	ldrh	r2, [r2, #10]
 80064b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <find_volume+0x328>
 80064bc:	230d      	movs	r3, #13
 80064be:	e0e4      	b.n	800668a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80064c0:	2303      	movs	r3, #3
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d802      	bhi.n	80064d6 <find_volume+0x33e>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80064dc:	4293      	cmp	r3, r2
 80064de:	d802      	bhi.n	80064e6 <find_volume+0x34e>
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064f2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80064f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80064f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f8:	441a      	add	r2, r3
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80064fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	441a      	add	r2, r3
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006508:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800650c:	2b03      	cmp	r3, #3
 800650e:	d11e      	bne.n	800654e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	3338      	adds	r3, #56	@ 0x38
 8006514:	332a      	adds	r3, #42	@ 0x2a
 8006516:	4618      	mov	r0, r3
 8006518:	f7fd ffc2 	bl	80044a0 <ld_word>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <find_volume+0x38e>
 8006522:	230d      	movs	r3, #13
 8006524:	e0b1      	b.n	800668a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	891b      	ldrh	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <find_volume+0x39a>
 800652e:	230d      	movs	r3, #13
 8006530:	e0ab      	b.n	800668a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	3338      	adds	r3, #56	@ 0x38
 8006536:	332c      	adds	r3, #44	@ 0x2c
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd ffc9 	bl	80044d0 <ld_dword>
 800653e:	4602      	mov	r2, r0
 8006540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006542:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	647b      	str	r3, [r7, #68]	@ 0x44
 800654c:	e01f      	b.n	800658e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	891b      	ldrh	r3, [r3, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <find_volume+0x3c2>
 8006556:	230d      	movs	r3, #13
 8006558:	e097      	b.n	800668a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800655e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006560:	441a      	add	r2, r3
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006566:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <find_volume+0x3de>
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	e00a      	b.n	800658c <find_volume+0x3f4>
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	085a      	lsrs	r2, r3, #1
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800658c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	899b      	ldrh	r3, [r3, #12]
 8006596:	4619      	mov	r1, r3
 8006598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659a:	440b      	add	r3, r1
 800659c:	3b01      	subs	r3, #1
 800659e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065a0:	8989      	ldrh	r1, [r1, #12]
 80065a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d201      	bcs.n	80065ae <find_volume+0x416>
 80065aa:	230d      	movs	r3, #13
 80065ac:	e06d      	b.n	800668a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065b4:	619a      	str	r2, [r3, #24]
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	2280      	movs	r2, #128	@ 0x80
 80065c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80065c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d149      	bne.n	8006660 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	3338      	adds	r3, #56	@ 0x38
 80065d0:	3330      	adds	r3, #48	@ 0x30
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd ff64 	bl	80044a0 <ld_word>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d140      	bne.n	8006660 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80065de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e0:	3301      	adds	r3, #1
 80065e2:	4619      	mov	r1, r3
 80065e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065e6:	f7fe fa0b 	bl	8004a00 <move_window>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d137      	bne.n	8006660 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80065f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f2:	2200      	movs	r2, #0
 80065f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	3338      	adds	r3, #56	@ 0x38
 80065fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd ff4e 	bl	80044a0 <ld_word>
 8006604:	4603      	mov	r3, r0
 8006606:	461a      	mov	r2, r3
 8006608:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800660c:	429a      	cmp	r2, r3
 800660e:	d127      	bne.n	8006660 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006612:	3338      	adds	r3, #56	@ 0x38
 8006614:	4618      	mov	r0, r3
 8006616:	f7fd ff5b 	bl	80044d0 <ld_dword>
 800661a:	4603      	mov	r3, r0
 800661c:	4a1d      	ldr	r2, [pc, #116]	@ (8006694 <find_volume+0x4fc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d11e      	bne.n	8006660 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006624:	3338      	adds	r3, #56	@ 0x38
 8006626:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd ff50 	bl	80044d0 <ld_dword>
 8006630:	4603      	mov	r3, r0
 8006632:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <find_volume+0x500>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d113      	bne.n	8006660 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	3338      	adds	r3, #56	@ 0x38
 800663c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd ff45 	bl	80044d0 <ld_dword>
 8006646:	4602      	mov	r2, r0
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	3338      	adds	r3, #56	@ 0x38
 8006650:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006654:	4618      	mov	r0, r3
 8006656:	f7fd ff3b 	bl	80044d0 <ld_dword>
 800665a:	4602      	mov	r2, r0
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006666:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006668:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <find_volume+0x504>)
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <find_volume+0x504>)
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	4b09      	ldr	r3, [pc, #36]	@ (800669c <find_volume+0x504>)
 8006676:	881a      	ldrh	r2, [r3, #0]
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	4a08      	ldr	r2, [pc, #32]	@ (80066a0 <find_volume+0x508>)
 8006680:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006682:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006684:	f7fe f954 	bl	8004930 <clear_lock>
#endif
	return FR_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3758      	adds	r7, #88	@ 0x58
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	41615252 	.word	0x41615252
 8006698:	61417272 	.word	0x61417272
 800669c:	20000248 	.word	0x20000248
 80066a0:	2000026c 	.word	0x2000026c

080066a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80066ae:	2309      	movs	r3, #9
 80066b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01c      	beq.n	80066f2 <validate+0x4e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d018      	beq.n	80066f2 <validate+0x4e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d013      	beq.n	80066f2 <validate+0x4e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	889a      	ldrh	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d10c      	bne.n	80066f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fd fe3e 	bl	8004360 <disk_status>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <validate+0x4e>
			res = FR_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <validate+0x5a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	e000      	b.n	8006700 <validate+0x5c>
 80066fe:	2300      	movs	r3, #0
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	6013      	str	r3, [r2, #0]
	return res;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fc9c 	bl	8006064 <get_ldnumber>
 800672c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	da01      	bge.n	8006738 <f_mount+0x28>
 8006734:	230b      	movs	r3, #11
 8006736:	e02b      	b.n	8006790 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <f_mount+0x88>)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006740:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f7fe f8f1 	bl	8004930 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	490d      	ldr	r1, [pc, #52]	@ (8006798 <f_mount+0x88>)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <f_mount+0x66>
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d001      	beq.n	800677a <f_mount+0x6a>
 8006776:	2300      	movs	r3, #0
 8006778:	e00a      	b.n	8006790 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800677a:	f107 010c 	add.w	r1, r7, #12
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	2200      	movs	r2, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fd07 	bl	8006198 <find_volume>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000244 	.word	0x20000244

0800679c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b09a      	sub	sp, #104	@ 0x68
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <f_open+0x18>
 80067b0:	2309      	movs	r3, #9
 80067b2:	e1b7      	b.n	8006b24 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80067bc:	79fa      	ldrb	r2, [r7, #7]
 80067be:	f107 0114 	add.w	r1, r7, #20
 80067c2:	f107 0308 	add.w	r3, r7, #8
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fce6 	bl	8006198 <find_volume>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80067d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 819b 	bne.w	8006b12 <f_open+0x376>
		dj.obj.fs = fs;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	f107 0318 	add.w	r3, r7, #24
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fbc5 	bl	8005f78 <follow_path>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d118      	bne.n	800682e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80067fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006800:	b25b      	sxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	da03      	bge.n	800680e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006806:	2306      	movs	r3, #6
 8006808:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800680c:	e00f      	b.n	800682e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf8c      	ite	hi
 8006814:	2301      	movhi	r3, #1
 8006816:	2300      	movls	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f107 0318 	add.w	r3, r7, #24
 8006820:	4611      	mov	r1, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd ff3c 	bl	80046a0 <chk_lock>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	f003 031c 	and.w	r3, r3, #28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d07f      	beq.n	8006938 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006838:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800683c:	2b00      	cmp	r3, #0
 800683e:	d017      	beq.n	8006870 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006840:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006844:	2b04      	cmp	r3, #4
 8006846:	d10e      	bne.n	8006866 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006848:	f7fd ff86 	bl	8004758 <enq_lock>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <f_open+0xc4>
 8006852:	f107 0318 	add.w	r3, r7, #24
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff f8de 	bl	8005a18 <dir_register>
 800685c:	4603      	mov	r3, r0
 800685e:	e000      	b.n	8006862 <f_open+0xc6>
 8006860:	2312      	movs	r3, #18
 8006862:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	71fb      	strb	r3, [r7, #7]
 800686e:	e010      	b.n	8006892 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006870:	7fbb      	ldrb	r3, [r7, #30]
 8006872:	f003 0311 	and.w	r3, r3, #17
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <f_open+0xe6>
					res = FR_DENIED;
 800687a:	2307      	movs	r3, #7
 800687c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006880:	e007      	b.n	8006892 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <f_open+0xf6>
 800688c:	2308      	movs	r3, #8
 800688e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006892:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006896:	2b00      	cmp	r3, #0
 8006898:	d168      	bne.n	800696c <f_open+0x1d0>
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d063      	beq.n	800696c <f_open+0x1d0>
				dw = GET_FATTIME();
 80068a4:	f7fd f83a 	bl	800391c <get_fattime>
 80068a8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	330e      	adds	r3, #14
 80068ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fd fe4b 	bl	800454c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	3316      	adds	r3, #22
 80068ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fd fe45 	bl	800454c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	330b      	adds	r3, #11
 80068c6:	2220      	movs	r2, #32
 80068c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fe1a 	bl	800550a <ld_clust>
 80068d6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068dc:	2200      	movs	r2, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fe32 	bl	8005548 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	331c      	adds	r3, #28
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fd fe2e 	bl	800454c <st_dword>
					fs->wflag = 1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2201      	movs	r2, #1
 80068f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80068f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d037      	beq.n	800696c <f_open+0x1d0>
						dw = fs->winsect;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006900:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006902:	f107 0318 	add.w	r3, r7, #24
 8006906:	2200      	movs	r2, #0
 8006908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fb22 	bl	8004f54 <remove_chain>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006916:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800691a:	2b00      	cmp	r3, #0
 800691c:	d126      	bne.n	800696c <f_open+0x1d0>
							res = move_window(fs, dw);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe f86c 	bl	8004a00 <move_window>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006932:	3a01      	subs	r2, #1
 8006934:	615a      	str	r2, [r3, #20]
 8006936:	e019      	b.n	800696c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006938:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800693c:	2b00      	cmp	r3, #0
 800693e:	d115      	bne.n	800696c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006940:	7fbb      	ldrb	r3, [r7, #30]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <f_open+0x1b6>
					res = FR_NO_FILE;
 800694a:	2304      	movs	r3, #4
 800694c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006950:	e00c      	b.n	800696c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <f_open+0x1d0>
 800695c:	7fbb      	ldrb	r3, [r7, #30]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <f_open+0x1d0>
						res = FR_DENIED;
 8006966:	2307      	movs	r3, #7
 8006968:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800696c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006970:	2b00      	cmp	r3, #0
 8006972:	d126      	bne.n	80069c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006984:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800698e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	2b01      	cmp	r3, #1
 8006998:	bf8c      	ite	hi
 800699a:	2301      	movhi	r3, #1
 800699c:	2300      	movls	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f107 0318 	add.w	r3, r7, #24
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fd fef7 	bl	800479c <inc_lock>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <f_open+0x226>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80069c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 80a3 	bne.w	8006b12 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fd99 	bl	800550a <ld_clust>
 80069d8:	4602      	mov	r2, r0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	331c      	adds	r3, #28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fd fd74 	bl	80044d0 <ld_dword>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	88da      	ldrh	r2, [r3, #6]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	79fa      	ldrb	r2, [r7, #7]
 8006a06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3330      	adds	r3, #48	@ 0x30
 8006a1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd fdde 	bl	80045e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d06e      	beq.n	8006b12 <f_open+0x376>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d06a      	beq.n	8006b12 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	895b      	ldrh	r3, [r3, #10]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	899b      	ldrh	r3, [r3, #12]
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a60:	e016      	b.n	8006a90 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe f887 	bl	8004b7a <get_fat>
 8006a6c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d802      	bhi.n	8006a7a <f_open+0x2de>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d102      	bne.n	8006a88 <f_open+0x2ec>
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d103      	bne.n	8006aa0 <f_open+0x304>
 8006a98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d8e0      	bhi.n	8006a62 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006aa4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006aa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d131      	bne.n	8006b12 <f_open+0x376>
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	899b      	ldrh	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aba:	fb01 f202 	mul.w	r2, r1, r2
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d026      	beq.n	8006b12 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f837 	bl	8004b3c <clust2sect>
 8006ace:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <f_open+0x342>
						res = FR_INT_ERR;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006adc:	e019      	b.n	8006b12 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	899b      	ldrh	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	7858      	ldrb	r0, [r3, #1]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	2301      	movs	r3, #1
 8006b02:	f7fd fc6f 	bl	80043e4 <disk_read>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <f_open+0x376>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <f_open+0x384>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006b20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3768      	adds	r7, #104	@ 0x68
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08e      	sub	sp, #56	@ 0x38
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f107 0214 	add.w	r2, r7, #20
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fda9 	bl	80066a4 <validate>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <f_read+0x44>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7d5b      	ldrb	r3, [r3, #21]
 8006b64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006b68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <f_read+0x4a>
 8006b70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b74:	e135      	b.n	8006de2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	7d1b      	ldrb	r3, [r3, #20]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <f_read+0x5a>
 8006b82:	2307      	movs	r3, #7
 8006b84:	e12d      	b.n	8006de2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	f240 811e 	bls.w	8006dd8 <f_read+0x2ac>
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006ba0:	e11a      	b.n	8006dd8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	8992      	ldrh	r2, [r2, #12]
 8006baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bae:	fb01 f202 	mul.w	r2, r1, r2
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 80d5 	bne.w	8006d64 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	8992      	ldrh	r2, [r2, #12]
 8006bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	8952      	ldrh	r2, [r2, #10]
 8006bca:	3a01      	subs	r2, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d12f      	bne.n	8006c36 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	e013      	b.n	8006c0e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7fe faaa 	bl	800514e <clmt_clust>
 8006bfa:	6338      	str	r0, [r7, #48]	@ 0x30
 8006bfc:	e007      	b.n	8006c0e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fd ffb7 	bl	8004b7a <get_fat>
 8006c0c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d804      	bhi.n	8006c1e <f_read+0xf2>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2202      	movs	r2, #2
 8006c18:	755a      	strb	r2, [r3, #21]
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0e1      	b.n	8006de2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c24:	d104      	bne.n	8006c30 <f_read+0x104>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	755a      	strb	r2, [r3, #21]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0d8      	b.n	8006de2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c34:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7fd ff7c 	bl	8004b3c <clust2sect>
 8006c44:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <f_read+0x12a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	755a      	strb	r2, [r3, #21]
 8006c52:	2302      	movs	r3, #2
 8006c54:	e0c5      	b.n	8006de2 <f_read+0x2b6>
			sect += csect;
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	899b      	ldrh	r3, [r3, #12]
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d041      	beq.n	8006cf6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	4413      	add	r3, r2
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	8952      	ldrh	r2, [r2, #10]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d905      	bls.n	8006c8c <f_read+0x160>
					cc = fs->csize - csect;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	895b      	ldrh	r3, [r3, #10]
 8006c84:	461a      	mov	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	7858      	ldrb	r0, [r3, #1]
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c96:	f7fd fba5 	bl	80043e4 <disk_read>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <f_read+0x17e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	755a      	strb	r2, [r3, #21]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e09b      	b.n	8006de2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	7d1b      	ldrb	r3, [r3, #20]
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da18      	bge.n	8006ce6 <f_read+0x1ba>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1a      	ldr	r2, [r3, #32]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d911      	bls.n	8006ce6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	8992      	ldrh	r2, [r2, #12]
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd4:	18d0      	adds	r0, r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	899b      	ldrh	r3, [r3, #12]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f7fd fc5f 	bl	80045a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	899b      	ldrh	r3, [r3, #12]
 8006cea:	461a      	mov	r2, r3
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006cf4:	e05c      	b.n	8006db0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d02e      	beq.n	8006d5e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7d1b      	ldrb	r3, [r3, #20]
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da18      	bge.n	8006d3c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	7858      	ldrb	r0, [r3, #1]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f7fd fb83 	bl	8004424 <disk_write>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <f_read+0x202>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	755a      	strb	r2, [r3, #21]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e059      	b.n	8006de2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	7d1b      	ldrb	r3, [r3, #20]
 8006d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	7858      	ldrb	r0, [r3, #1]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d46:	2301      	movs	r3, #1
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	f7fd fb4b 	bl	80043e4 <disk_read>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <f_read+0x232>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	755a      	strb	r2, [r3, #21]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e041      	b.n	8006de2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	899b      	ldrh	r3, [r3, #12]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	8992      	ldrh	r2, [r2, #12]
 8006d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d76:	fb01 f202 	mul.w	r2, r1, r2
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	1ac3      	subs	r3, r0, r3
 8006d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d901      	bls.n	8006d8c <f_read+0x260>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	8992      	ldrh	r2, [r2, #12]
 8006d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d9e:	fb00 f202 	mul.w	r2, r0, r2
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	440b      	add	r3, r1
 8006da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da8:	4619      	mov	r1, r3
 8006daa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dac:	f7fd fbfa 	bl	80045a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	4413      	add	r3, r2
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbe:	441a      	add	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	619a      	str	r2, [r3, #24]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	441a      	add	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f47f aee1 	bne.w	8006ba2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3738      	adds	r7, #56	@ 0x38
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08c      	sub	sp, #48	@ 0x30
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f107 0210 	add.w	r2, r7, #16
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fc4a 	bl	80066a4 <validate>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d107      	bne.n	8006e2e <f_write+0x44>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	7d5b      	ldrb	r3, [r3, #21]
 8006e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006e26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <f_write+0x4a>
 8006e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e32:	e16a      	b.n	800710a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	7d1b      	ldrb	r3, [r3, #20]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <f_write+0x5a>
 8006e40:	2307      	movs	r3, #7
 8006e42:	e162      	b.n	800710a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	f080 814c 	bcs.w	80070ee <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006e5e:	e146      	b.n	80070ee <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	8992      	ldrh	r2, [r2, #12]
 8006e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e6c:	fb01 f202 	mul.w	r2, r1, r2
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80f1 	bne.w	800705a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	8992      	ldrh	r2, [r2, #12]
 8006e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	8952      	ldrh	r2, [r2, #10]
 8006e88:	3a01      	subs	r2, #1
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d143      	bne.n	8006f1c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11a      	bne.n	8006ede <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe f8b6 	bl	800501e <create_chain>
 8006eb2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006eb4:	e013      	b.n	8006ede <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7fe f942 	bl	800514e <clmt_clust>
 8006eca:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006ecc:	e007      	b.n	8006ede <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe f8a1 	bl	800501e <create_chain>
 8006edc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8109 	beq.w	80070f8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d104      	bne.n	8006ef6 <f_write+0x10c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	755a      	strb	r2, [r3, #21]
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e109      	b.n	800710a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006efc:	d104      	bne.n	8006f08 <f_write+0x11e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	755a      	strb	r2, [r3, #21]
 8006f04:	2301      	movs	r3, #1
 8006f06:	e100      	b.n	800710a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <f_write+0x132>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7d1b      	ldrb	r3, [r3, #20]
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da18      	bge.n	8006f58 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	7858      	ldrb	r0, [r3, #1]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1a      	ldr	r2, [r3, #32]
 8006f34:	2301      	movs	r3, #1
 8006f36:	f7fd fa75 	bl	8004424 <disk_write>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <f_write+0x160>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	755a      	strb	r2, [r3, #21]
 8006f46:	2301      	movs	r3, #1
 8006f48:	e0df      	b.n	800710a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	7d1b      	ldrb	r3, [r3, #20]
 8006f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fd fdeb 	bl	8004b3c <clust2sect>
 8006f66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <f_write+0x18e>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2202      	movs	r2, #2
 8006f72:	755a      	strb	r2, [r3, #21]
 8006f74:	2302      	movs	r3, #2
 8006f76:	e0c8      	b.n	800710a <f_write+0x320>
			sect += csect;
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	899b      	ldrh	r3, [r3, #12]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f8c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d043      	beq.n	800701c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	4413      	add	r3, r2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	8952      	ldrh	r2, [r2, #10]
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d905      	bls.n	8006fae <f_write+0x1c4>
					cc = fs->csize - csect;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	895b      	ldrh	r3, [r3, #10]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	7858      	ldrb	r0, [r3, #1]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	69f9      	ldr	r1, [r7, #28]
 8006fb8:	f7fd fa34 	bl	8004424 <disk_write>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <f_write+0x1e2>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	755a      	strb	r2, [r3, #21]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e09e      	b.n	800710a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d918      	bls.n	800700c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	8992      	ldrh	r2, [r2, #12]
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	18d1      	adds	r1, r2, r3
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	899b      	ldrh	r3, [r3, #12]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f7fd fad3 	bl	80045a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	7d1b      	ldrb	r3, [r3, #20]
 8007002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007006:	b2da      	uxtb	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	899b      	ldrh	r3, [r3, #12]
 8007010:	461a      	mov	r2, r3
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	fb02 f303 	mul.w	r3, r2, r3
 8007018:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800701a:	e04b      	b.n	80070b4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	429a      	cmp	r2, r3
 8007024:	d016      	beq.n	8007054 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800702e:	429a      	cmp	r2, r3
 8007030:	d210      	bcs.n	8007054 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	7858      	ldrb	r0, [r3, #1]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800703c:	2301      	movs	r3, #1
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	f7fd f9d0 	bl	80043e4 <disk_read>
 8007044:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	755a      	strb	r2, [r3, #21]
 8007050:	2301      	movs	r3, #1
 8007052:	e05a      	b.n	800710a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	899b      	ldrh	r3, [r3, #12]
 800705e:	4618      	mov	r0, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	8992      	ldrh	r2, [r2, #12]
 8007068:	fbb3 f1f2 	udiv	r1, r3, r2
 800706c:	fb01 f202 	mul.w	r2, r1, r2
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	1ac3      	subs	r3, r0, r3
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d901      	bls.n	8007082 <f_write+0x298>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	8992      	ldrh	r2, [r2, #12]
 8007090:	fbb3 f0f2 	udiv	r0, r3, r2
 8007094:	fb00 f202 	mul.w	r2, r0, r2
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	440b      	add	r3, r1
 800709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd fa7f 	bl	80045a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	7d1b      	ldrb	r3, [r3, #20]
 80070aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	4413      	add	r3, r2
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	619a      	str	r2, [r3, #24]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	bf38      	it	cc
 80070d4:	461a      	movcc	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	441a      	add	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f47f aeb5 	bne.w	8006e60 <f_write+0x76>
 80070f6:	e000      	b.n	80070fa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80070f8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7d1b      	ldrb	r3, [r3, #20]
 80070fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007102:	b2da      	uxtb	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3730      	adds	r7, #48	@ 0x30
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f107 0208 	add.w	r2, r7, #8
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fabe 	bl	80066a4 <validate>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d168      	bne.n	8007204 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d062      	beq.n	8007204 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7d1b      	ldrb	r3, [r3, #20]
 8007142:	b25b      	sxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	da15      	bge.n	8007174 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	7858      	ldrb	r0, [r3, #1]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	2301      	movs	r3, #1
 8007158:	f7fd f964 	bl	8004424 <disk_write>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <f_sync+0x54>
 8007162:	2301      	movs	r3, #1
 8007164:	e04f      	b.n	8007206 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7d1b      	ldrb	r3, [r3, #20]
 800716a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007174:	f7fc fbd2 	bl	800391c <get_fattime>
 8007178:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fd fc3c 	bl	8004a00 <move_window>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d138      	bne.n	8007204 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	330b      	adds	r3, #11
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	330b      	adds	r3, #11
 80071a2:	f042 0220 	orr.w	r2, r2, #32
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68f9      	ldr	r1, [r7, #12]
 80071b6:	f7fe f9c7 	bl	8005548 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f103 021c 	add.w	r2, r3, #28
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fd f9c0 	bl	800454c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3316      	adds	r3, #22
 80071d0:	6939      	ldr	r1, [r7, #16]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd f9ba 	bl	800454c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3312      	adds	r3, #18
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd f999 	bl	8004516 <st_word>
					fs->wflag = 1;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2201      	movs	r2, #1
 80071e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd fc35 	bl	8004a5c <sync_fs>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ff7b 	bl	8007112 <f_sync>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d118      	bne.n	8007258 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fa38 	bl	80066a4 <validate>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10c      	bne.n	8007258 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd fb38 	bl	80048b8 <dec_lock>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b090      	sub	sp, #64	@ 0x40
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f107 0208 	add.w	r2, r7, #8
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fa15 	bl	80066a4 <validate>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007280:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <f_lseek+0x2e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7d5b      	ldrb	r3, [r3, #21]
 800728c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <f_lseek+0x3c>
 8007298:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800729c:	e201      	b.n	80076a2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80d9 	beq.w	800745a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ae:	d15a      	bne.n	8007366 <f_lseek+0x104>
			tbl = fp->cltbl;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	1d1a      	adds	r2, r3, #4
 80072ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	2302      	movs	r3, #2
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d03a      	beq.n	8007346 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	2300      	movs	r3, #0
 80072d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	3302      	adds	r3, #2
 80072dc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	3301      	adds	r3, #1
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fd fc44 	bl	8004b7a <get_fat>
 80072f2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d804      	bhi.n	8007304 <f_lseek+0xa2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	755a      	strb	r2, [r3, #21]
 8007300:	2302      	movs	r3, #2
 8007302:	e1ce      	b.n	80076a2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800730a:	d104      	bne.n	8007316 <f_lseek+0xb4>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	755a      	strb	r2, [r3, #21]
 8007312:	2301      	movs	r3, #1
 8007314:	e1c5      	b.n	80076a2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731c:	429a      	cmp	r2, r3
 800731e:	d0de      	beq.n	80072de <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	d809      	bhi.n	800733c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	627a      	str	r2, [r7, #36]	@ 0x24
 800732e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1d1a      	adds	r2, r3, #4
 8007336:	627a      	str	r2, [r7, #36]	@ 0x24
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007342:	429a      	cmp	r2, r3
 8007344:	d3c4      	bcc.n	80072d0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800734c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800734e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	429a      	cmp	r2, r3
 8007354:	d803      	bhi.n	800735e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	e19f      	b.n	800769e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800735e:	2311      	movs	r3, #17
 8007360:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007364:	e19b      	b.n	800769e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d902      	bls.n	8007376 <f_lseek+0x114>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 818d 	beq.w	800769e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fd fedf 	bl	800514e <clmt_clust>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fd fbcc 	bl	8004b3c <clust2sect>
 80073a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <f_lseek+0x154>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	755a      	strb	r2, [r3, #21]
 80073b2:	2302      	movs	r3, #2
 80073b4:	e175      	b.n	80076a2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	8992      	ldrh	r2, [r2, #12]
 80073be:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	8952      	ldrh	r2, [r2, #10]
 80073c6:	3a01      	subs	r2, #1
 80073c8:	4013      	ands	r3, r2
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4413      	add	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	8992      	ldrh	r2, [r2, #12]
 80073d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073dc:	fb01 f202 	mul.w	r2, r1, r2
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 815b 	beq.w	800769e <f_lseek+0x43c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f000 8155 	beq.w	800769e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7d1b      	ldrb	r3, [r3, #20]
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da18      	bge.n	8007430 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	7858      	ldrb	r0, [r3, #1]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	2301      	movs	r3, #1
 800740e:	f7fd f809 	bl	8004424 <disk_write>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <f_lseek+0x1c0>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	755a      	strb	r2, [r3, #21]
 800741e:	2301      	movs	r3, #1
 8007420:	e13f      	b.n	80076a2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7d1b      	ldrb	r3, [r3, #20]
 8007426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800742a:	b2da      	uxtb	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	7858      	ldrb	r0, [r3, #1]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800743a:	2301      	movs	r3, #1
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	f7fc ffd1 	bl	80043e4 <disk_read>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <f_lseek+0x1f0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	755a      	strb	r2, [r3, #21]
 800744e:	2301      	movs	r3, #1
 8007450:	e127      	b.n	80076a2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	621a      	str	r2, [r3, #32]
 8007458:	e121      	b.n	800769e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d908      	bls.n	8007476 <f_lseek+0x214>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7d1b      	ldrb	r3, [r3, #20]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007484:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80b5 	beq.w	80075f8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	895b      	ldrh	r3, [r3, #10]
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	899b      	ldrh	r3, [r3, #12]
 8007498:	fb02 f303 	mul.w	r3, r2, r3
 800749c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	1e59      	subs	r1, r3, #1
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d30f      	bcc.n	80074dc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	425b      	negs	r3, r3
 80074c4:	401a      	ands	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074da:	e022      	b.n	8007522 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80074e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d119      	bne.n	800751c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd fd96 	bl	800501e <create_chain>
 80074f2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d104      	bne.n	8007504 <f_lseek+0x2a2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	755a      	strb	r2, [r3, #21]
 8007500:	2302      	movs	r3, #2
 8007502:	e0ce      	b.n	80076a2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800750a:	d104      	bne.n	8007516 <f_lseek+0x2b4>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	755a      	strb	r2, [r3, #21]
 8007512:	2301      	movs	r3, #1
 8007514:	e0c5      	b.n	80076a2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800751a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007520:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d067      	beq.n	80075f8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007528:	e03a      	b.n	80075a0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	441a      	add	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	7d1b      	ldrb	r3, [r3, #20]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00b      	beq.n	8007562 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd fd65 	bl	800501e <create_chain>
 8007554:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <f_lseek+0x30c>
							ofs = 0; break;
 800755c:	2300      	movs	r3, #0
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	e022      	b.n	80075a8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd fb07 	bl	8004b7a <get_fat>
 800756c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007574:	d104      	bne.n	8007580 <f_lseek+0x31e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	755a      	strb	r2, [r3, #21]
 800757c:	2301      	movs	r3, #1
 800757e:	e090      	b.n	80076a2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	2b01      	cmp	r3, #1
 8007584:	d904      	bls.n	8007590 <f_lseek+0x32e>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800758c:	429a      	cmp	r2, r3
 800758e:	d304      	bcc.n	800759a <f_lseek+0x338>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	755a      	strb	r2, [r3, #21]
 8007596:	2302      	movs	r3, #2
 8007598:	e083      	b.n	80076a2 <f_lseek+0x440>
					fp->clust = clst;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800759e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d8c0      	bhi.n	800752a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	441a      	add	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	899b      	ldrh	r3, [r3, #12]
 80075b8:	461a      	mov	r2, r3
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80075c0:	fb01 f202 	mul.w	r2, r1, r2
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d016      	beq.n	80075f8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd fab4 	bl	8004b3c <clust2sect>
 80075d4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <f_lseek+0x384>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	755a      	strb	r2, [r3, #21]
 80075e2:	2302      	movs	r3, #2
 80075e4:	e05d      	b.n	80076a2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	899b      	ldrh	r3, [r3, #12]
 80075ea:	461a      	mov	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075f4:	4413      	add	r3, r2
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	d90a      	bls.n	800761a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	8992      	ldrh	r2, [r2, #12]
 8007622:	fbb3 f1f2 	udiv	r1, r3, r2
 8007626:	fb01 f202 	mul.w	r2, r1, r2
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d036      	beq.n	800769e <f_lseek+0x43c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007636:	429a      	cmp	r2, r3
 8007638:	d031      	beq.n	800769e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7d1b      	ldrb	r3, [r3, #20]
 800763e:	b25b      	sxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	da18      	bge.n	8007676 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	7858      	ldrb	r0, [r3, #1]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	2301      	movs	r3, #1
 8007654:	f7fc fee6 	bl	8004424 <disk_write>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <f_lseek+0x406>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	755a      	strb	r2, [r3, #21]
 8007664:	2301      	movs	r3, #1
 8007666:	e01c      	b.n	80076a2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7d1b      	ldrb	r3, [r3, #20]
 800766c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007670:	b2da      	uxtb	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	7858      	ldrb	r0, [r3, #1]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007680:	2301      	movs	r3, #1
 8007682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007684:	f7fc feae 	bl	80043e4 <disk_read>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <f_lseek+0x436>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	755a      	strb	r2, [r3, #21]
 8007694:	2301      	movs	r3, #1
 8007696:	e004      	b.n	80076a2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800769c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800769e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3740      	adds	r7, #64	@ 0x40
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b092      	sub	sp, #72	@ 0x48
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80076b6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	2200      	movs	r2, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fd69 	bl	8006198 <find_volume>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80076cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8099 	bne.w	8007808 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80076d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	3b02      	subs	r3, #2
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d804      	bhi.n	80076f4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e089      	b.n	8007808 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d128      	bne.n	8007752 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007700:	2302      	movs	r3, #2
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd fa33 	bl	8004b7a <get_fat>
 8007714:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800771c:	d103      	bne.n	8007726 <f_getfree+0x7c>
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007724:	e063      	b.n	80077ee <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007728:	2b01      	cmp	r3, #1
 800772a:	d103      	bne.n	8007734 <f_getfree+0x8a>
 800772c:	2302      	movs	r3, #2
 800772e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007732:	e05c      	b.n	80077ee <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <f_getfree+0x96>
 800773a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800773c:	3301      	adds	r3, #1
 800773e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007742:	3301      	adds	r3, #1
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800774c:	429a      	cmp	r2, r3
 800774e:	d3db      	bcc.n	8007708 <f_getfree+0x5e>
 8007750:	e04d      	b.n	80077ee <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
 8007762:	2300      	movs	r3, #0
 8007764:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	2b00      	cmp	r3, #0
 800776a:	d113      	bne.n	8007794 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800776c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007774:	4619      	mov	r1, r3
 8007776:	f7fd f943 	bl	8004a00 <move_window>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007780:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007784:	2b00      	cmp	r3, #0
 8007786:	d131      	bne.n	80077ec <f_getfree+0x142>
							p = fs->win;
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	3338      	adds	r3, #56	@ 0x38
 800778c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	899b      	ldrh	r3, [r3, #12]
 8007792:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d10f      	bne.n	80077bc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800779c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800779e:	f7fc fe7f 	bl	80044a0 <ld_word>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <f_getfree+0x104>
 80077a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077aa:	3301      	adds	r3, #1
 80077ac:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	3302      	adds	r3, #2
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80077b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b6:	3b02      	subs	r3, #2
 80077b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ba:	e010      	b.n	80077de <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80077bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077be:	f7fc fe87 	bl	80044d0 <ld_dword>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <f_getfree+0x128>
 80077cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ce:	3301      	adds	r3, #1
 80077d0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	3304      	adds	r3, #4
 80077d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077da:	3b04      	subs	r3, #4
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80077de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e0:	3b01      	subs	r3, #1
 80077e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1bd      	bne.n	8007766 <f_getfree+0xbc>
 80077ea:	e000      	b.n	80077ee <f_getfree+0x144>
							if (res != FR_OK) break;
 80077ec:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80077f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	791a      	ldrb	r2, [r3, #4]
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	f042 0201 	orr.w	r2, r2, #1
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007808:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800780c:	4618      	mov	r0, r3
 800780e:	3748      	adds	r7, #72	@ 0x48
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007828:	e01c      	b.n	8007864 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800782a:	f107 0310 	add.w	r3, r7, #16
 800782e:	f107 0114 	add.w	r1, r7, #20
 8007832:	2201      	movs	r2, #1
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff f979 	bl	8006b2c <f_read>
		if (rc != 1) break;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d117      	bne.n	8007870 <f_gets+0x5c>
		c = s[0];
 8007840:	7d3b      	ldrb	r3, [r7, #20]
 8007842:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b0d      	cmp	r3, #13
 8007848:	d00b      	beq.n	8007862 <f_gets+0x4e>
		*p++ = c;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	61ba      	str	r2, [r7, #24]
 8007850:	7dfa      	ldrb	r2, [r7, #23]
 8007852:	701a      	strb	r2, [r3, #0]
		n++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b0a      	cmp	r3, #10
 800785e:	d009      	beq.n	8007874 <f_gets+0x60>
 8007860:	e000      	b.n	8007864 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007862:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3b01      	subs	r3, #1
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	429a      	cmp	r2, r3
 800786c:	dbdd      	blt.n	800782a <f_gets+0x16>
 800786e:	e002      	b.n	8007876 <f_gets+0x62>
		if (rc != 1) break;
 8007870:	bf00      	nop
 8007872:	e000      	b.n	8007876 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007874:	bf00      	nop
	}
	*p = 0;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <f_gets+0x72>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	e000      	b.n	8007888 <f_gets+0x74>
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	2b0a      	cmp	r3, #10
 80078a0:	d103      	bne.n	80078aa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80078a2:	210d      	movs	r1, #13
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fff3 	bl	8007890 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	db25      	blt.n	8007902 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	60fa      	str	r2, [r7, #12]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80078c8:	dd12      	ble.n	80078f0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f103 010c 	add.w	r1, r3, #12
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	f7ff fa86 	bl	8006dea <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d101      	bne.n	80078ea <putc_bfd+0x5a>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e001      	b.n	80078ee <putc_bfd+0x5e>
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078ee:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	e000      	b.n	8007904 <putc_bfd+0x74>
	if (i < 0) return;
 8007902:	bf00      	nop
}
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	db16      	blt.n	8007948 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f103 010c 	add.w	r1, r3, #12
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	461a      	mov	r2, r3
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	f7ff fa5c 	bl	8006dea <f_write>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d107      	bne.n	8007948 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4293      	cmp	r3, r2
 8007940:	d102      	bne.n	8007948 <putc_flush+0x3e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	e001      	b.n	800794c <putc_flush+0x42>
	return EOF;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b096      	sub	sp, #88	@ 0x58
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff ffe0 	bl	8007954 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007994:	e009      	b.n	80079aa <f_puts+0x2c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff ff73 	bl	8007890 <putc_bfd>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f1      	bne.n	8007996 <f_puts+0x18>
	return putc_flush(&pb);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff ffa7 	bl	800790a <putc_flush>
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3758      	adds	r7, #88	@ 0x58
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80079de:	4b1f      	ldr	r3, [pc, #124]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 80079e0:	7a5b      	ldrb	r3, [r3, #9]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d131      	bne.n	8007a4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80079e8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 80079ea:	7a5b      	ldrb	r3, [r3, #9]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 80079f2:	2100      	movs	r1, #0
 80079f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80079f6:	4b19      	ldr	r3, [pc, #100]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 80079f8:	7a5b      	ldrb	r3, [r3, #9]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	4a17      	ldr	r2, [pc, #92]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a06:	4b15      	ldr	r3, [pc, #84]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 8007a08:	7a5b      	ldrb	r3, [r3, #9]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 8007a10:	4413      	add	r3, r2
 8007a12:	79fa      	ldrb	r2, [r7, #7]
 8007a14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a16:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 8007a18:	7a5b      	ldrb	r3, [r3, #9]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	b2d1      	uxtb	r1, r2
 8007a20:	4a0e      	ldr	r2, [pc, #56]	@ (8007a5c <FATFS_LinkDriverEx+0x94>)
 8007a22:	7251      	strb	r1, [r2, #9]
 8007a24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a26:	7dbb      	ldrb	r3, [r7, #22]
 8007a28:	3330      	adds	r3, #48	@ 0x30
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3301      	adds	r3, #1
 8007a34:	223a      	movs	r2, #58	@ 0x3a
 8007a36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3302      	adds	r3, #2
 8007a3c:	222f      	movs	r2, #47	@ 0x2f
 8007a3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	3303      	adds	r3, #3
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	2000046c 	.word	0x2000046c

08007a60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ffaa 	bl	80079c8 <FATFS_LinkDriverEx>
 8007a74:	4603      	mov	r3, r0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a90:	d802      	bhi.n	8007a98 <ff_convert+0x18>
		c = chr;
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	81fb      	strh	r3, [r7, #14]
 8007a96:	e025      	b.n	8007ae4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	2bff      	cmp	r3, #255	@ 0xff
 8007aa2:	d805      	bhi.n	8007ab0 <ff_convert+0x30>
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	3b80      	subs	r3, #128	@ 0x80
 8007aa8:	4a12      	ldr	r2, [pc, #72]	@ (8007af4 <ff_convert+0x74>)
 8007aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aae:	e000      	b.n	8007ab2 <ff_convert+0x32>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	81fb      	strh	r3, [r7, #14]
 8007ab4:	e016      	b.n	8007ae4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	81fb      	strh	r3, [r7, #14]
 8007aba:	e009      	b.n	8007ad0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007abc:	89fb      	ldrh	r3, [r7, #14]
 8007abe:	4a0d      	ldr	r2, [pc, #52]	@ (8007af4 <ff_convert+0x74>)
 8007ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d006      	beq.n	8007ad8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007aca:	89fb      	ldrh	r3, [r7, #14]
 8007acc:	3301      	adds	r3, #1
 8007ace:	81fb      	strh	r3, [r7, #14]
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ad4:	d9f2      	bls.n	8007abc <ff_convert+0x3c>
 8007ad6:	e000      	b.n	8007ada <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007ad8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	3380      	adds	r3, #128	@ 0x80
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	080089b8 	.word	0x080089b8

08007af8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b08:	d201      	bcs.n	8007b0e <ff_wtoupper+0x16>
 8007b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c04 <ff_wtoupper+0x10c>)
 8007b0c:	e000      	b.n	8007b10 <ff_wtoupper+0x18>
 8007b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c08 <ff_wtoupper+0x110>)
 8007b10:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	1c9a      	adds	r2, r3, #2
 8007b16:	617a      	str	r2, [r7, #20]
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007b1c:	8a7b      	ldrh	r3, [r7, #18]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d068      	beq.n	8007bf4 <ff_wtoupper+0xfc>
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	8a7b      	ldrh	r3, [r7, #18]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d364      	bcc.n	8007bf4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	617a      	str	r2, [r7, #20]
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	823b      	strh	r3, [r7, #16]
 8007b34:	8a3b      	ldrh	r3, [r7, #16]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	81fb      	strh	r3, [r7, #14]
 8007b3a:	8a3b      	ldrh	r3, [r7, #16]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	8a79      	ldrh	r1, [r7, #18]
 8007b44:	8a3b      	ldrh	r3, [r7, #16]
 8007b46:	440b      	add	r3, r1
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	da49      	bge.n	8007be0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d84f      	bhi.n	8007bf2 <ff_wtoupper+0xfa>
 8007b52:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <ff_wtoupper+0x60>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b7d 	.word	0x08007b7d
 8007b5c:	08007b8f 	.word	0x08007b8f
 8007b60:	08007ba5 	.word	0x08007ba5
 8007b64:	08007bad 	.word	0x08007bad
 8007b68:	08007bb5 	.word	0x08007bb5
 8007b6c:	08007bbd 	.word	0x08007bbd
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007bd5 	.word	0x08007bd5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007b7c:	88fa      	ldrh	r2, [r7, #6]
 8007b7e:	8a7b      	ldrh	r3, [r7, #18]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	80fb      	strh	r3, [r7, #6]
 8007b8c:	e027      	b.n	8007bde <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	8a7b      	ldrh	r3, [r7, #18]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	80fb      	strh	r3, [r7, #6]
 8007ba2:	e01c      	b.n	8007bde <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	3b10      	subs	r3, #16
 8007ba8:	80fb      	strh	r3, [r7, #6]
 8007baa:	e018      	b.n	8007bde <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	3b20      	subs	r3, #32
 8007bb0:	80fb      	strh	r3, [r7, #6]
 8007bb2:	e014      	b.n	8007bde <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	3b30      	subs	r3, #48	@ 0x30
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	e010      	b.n	8007bde <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	3b1a      	subs	r3, #26
 8007bc0:	80fb      	strh	r3, [r7, #6]
 8007bc2:	e00c      	b.n	8007bde <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	80fb      	strh	r3, [r7, #6]
 8007bca:	e008      	b.n	8007bde <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	3b50      	subs	r3, #80	@ 0x50
 8007bd0:	80fb      	strh	r3, [r7, #6]
 8007bd2:	e004      	b.n	8007bde <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007bda:	80fb      	strh	r3, [r7, #6]
 8007bdc:	bf00      	nop
			}
			break;
 8007bde:	e008      	b.n	8007bf2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007be0:	89fb      	ldrh	r3, [r7, #14]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d195      	bne.n	8007b12 <ff_wtoupper+0x1a>
 8007be6:	8a3b      	ldrh	r3, [r7, #16]
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4413      	add	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007bf0:	e78f      	b.n	8007b12 <ff_wtoupper+0x1a>
			break;
 8007bf2:	bf00      	nop
	}

	return chr;
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	08008ab8 	.word	0x08008ab8
 8007c08:	08008cac 	.word	0x08008cac

08007c0c <siprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b500      	push	{lr}
 8007c10:	b09c      	sub	sp, #112	@ 0x70
 8007c12:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	9006      	str	r0, [sp, #24]
 8007c18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c1c:	4809      	ldr	r0, [pc, #36]	@ (8007c44 <siprintf+0x38>)
 8007c1e:	9107      	str	r1, [sp, #28]
 8007c20:	9104      	str	r1, [sp, #16]
 8007c22:	4909      	ldr	r1, [pc, #36]	@ (8007c48 <siprintf+0x3c>)
 8007c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	a902      	add	r1, sp, #8
 8007c30:	f000 f89c 	bl	8007d6c <_svfiprintf_r>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	b01c      	add	sp, #112	@ 0x70
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	20000024 	.word	0x20000024
 8007c48:	ffff0208 	.word	0xffff0208

08007c4c <memset>:
 8007c4c:	4402      	add	r2, r0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d100      	bne.n	8007c56 <memset+0xa>
 8007c54:	4770      	bx	lr
 8007c56:	f803 1b01 	strb.w	r1, [r3], #1
 8007c5a:	e7f9      	b.n	8007c50 <memset+0x4>

08007c5c <__errno>:
 8007c5c:	4b01      	ldr	r3, [pc, #4]	@ (8007c64 <__errno+0x8>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000024 	.word	0x20000024

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cac <__libc_init_array+0x44>)
 8007c7c:	f000 fc66 	bl	800854c <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	08008da4 	.word	0x08008da4
 8007ca4:	08008da4 	.word	0x08008da4
 8007ca8:	08008da4 	.word	0x08008da4
 8007cac:	08008da8 	.word	0x08008da8

08007cb0 <__retarget_lock_acquire_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_release_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__ssputs_r>:
 8007cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	688e      	ldr	r6, [r1, #8]
 8007cba:	461f      	mov	r7, r3
 8007cbc:	42be      	cmp	r6, r7
 8007cbe:	680b      	ldr	r3, [r1, #0]
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	d82d      	bhi.n	8007d24 <__ssputs_r+0x70>
 8007cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cd0:	d026      	beq.n	8007d20 <__ssputs_r+0x6c>
 8007cd2:	6965      	ldr	r5, [r4, #20]
 8007cd4:	6909      	ldr	r1, [r1, #16]
 8007cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cda:	eba3 0901 	sub.w	r9, r3, r1
 8007cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce2:	1c7b      	adds	r3, r7, #1
 8007ce4:	444b      	add	r3, r9
 8007ce6:	106d      	asrs	r5, r5, #1
 8007ce8:	429d      	cmp	r5, r3
 8007cea:	bf38      	it	cc
 8007cec:	461d      	movcc	r5, r3
 8007cee:	0553      	lsls	r3, r2, #21
 8007cf0:	d527      	bpl.n	8007d42 <__ssputs_r+0x8e>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f000 f958 	bl	8007fa8 <_malloc_r>
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	b360      	cbz	r0, 8007d56 <__ssputs_r+0xa2>
 8007cfc:	6921      	ldr	r1, [r4, #16]
 8007cfe:	464a      	mov	r2, r9
 8007d00:	f000 fbc4 	bl	800848c <memcpy>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0e:	81a3      	strh	r3, [r4, #12]
 8007d10:	6126      	str	r6, [r4, #16]
 8007d12:	6165      	str	r5, [r4, #20]
 8007d14:	444e      	add	r6, r9
 8007d16:	eba5 0509 	sub.w	r5, r5, r9
 8007d1a:	6026      	str	r6, [r4, #0]
 8007d1c:	60a5      	str	r5, [r4, #8]
 8007d1e:	463e      	mov	r6, r7
 8007d20:	42be      	cmp	r6, r7
 8007d22:	d900      	bls.n	8007d26 <__ssputs_r+0x72>
 8007d24:	463e      	mov	r6, r7
 8007d26:	6820      	ldr	r0, [r4, #0]
 8007d28:	4632      	mov	r2, r6
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	f000 fb84 	bl	8008438 <memmove>
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	1b9b      	subs	r3, r3, r6
 8007d34:	60a3      	str	r3, [r4, #8]
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	4433      	add	r3, r6
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d42:	462a      	mov	r2, r5
 8007d44:	f000 fb4a 	bl	80083dc <_realloc_r>
 8007d48:	4606      	mov	r6, r0
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1e0      	bne.n	8007d10 <__ssputs_r+0x5c>
 8007d4e:	6921      	ldr	r1, [r4, #16]
 8007d50:	4650      	mov	r0, sl
 8007d52:	f000 fba9 	bl	80084a8 <_free_r>
 8007d56:	230c      	movs	r3, #12
 8007d58:	f8ca 3000 	str.w	r3, [sl]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d68:	e7e9      	b.n	8007d3e <__ssputs_r+0x8a>
	...

08007d6c <_svfiprintf_r>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	4698      	mov	r8, r3
 8007d72:	898b      	ldrh	r3, [r1, #12]
 8007d74:	061b      	lsls	r3, r3, #24
 8007d76:	b09d      	sub	sp, #116	@ 0x74
 8007d78:	4607      	mov	r7, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	4614      	mov	r4, r2
 8007d7e:	d510      	bpl.n	8007da2 <_svfiprintf_r+0x36>
 8007d80:	690b      	ldr	r3, [r1, #16]
 8007d82:	b973      	cbnz	r3, 8007da2 <_svfiprintf_r+0x36>
 8007d84:	2140      	movs	r1, #64	@ 0x40
 8007d86:	f000 f90f 	bl	8007fa8 <_malloc_r>
 8007d8a:	6028      	str	r0, [r5, #0]
 8007d8c:	6128      	str	r0, [r5, #16]
 8007d8e:	b930      	cbnz	r0, 8007d9e <_svfiprintf_r+0x32>
 8007d90:	230c      	movs	r3, #12
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d98:	b01d      	add	sp, #116	@ 0x74
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	2340      	movs	r3, #64	@ 0x40
 8007da0:	616b      	str	r3, [r5, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da6:	2320      	movs	r3, #32
 8007da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db0:	2330      	movs	r3, #48	@ 0x30
 8007db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f50 <_svfiprintf_r+0x1e4>
 8007db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dba:	f04f 0901 	mov.w	r9, #1
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	b10a      	cbz	r2, 8007dcc <_svfiprintf_r+0x60>
 8007dc8:	2a25      	cmp	r2, #37	@ 0x25
 8007dca:	d1f9      	bne.n	8007dc0 <_svfiprintf_r+0x54>
 8007dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd0:	d00b      	beq.n	8007dea <_svfiprintf_r+0x7e>
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ff6b 	bl	8007cb4 <__ssputs_r>
 8007dde:	3001      	adds	r0, #1
 8007de0:	f000 80a7 	beq.w	8007f32 <_svfiprintf_r+0x1c6>
 8007de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007de6:	445a      	add	r2, fp
 8007de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 809f 	beq.w	8007f32 <_svfiprintf_r+0x1c6>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfe:	f10a 0a01 	add.w	sl, sl, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	484e      	ldr	r0, [pc, #312]	@ (8007f50 <_svfiprintf_r+0x1e4>)
 8007e16:	f7f8 fa03 	bl	8000220 <memchr>
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	b9d8      	cbnz	r0, 8007e56 <_svfiprintf_r+0xea>
 8007e1e:	06d0      	lsls	r0, r2, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2320      	movmi	r3, #32
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e28:	0711      	lsls	r1, r2, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	232b      	movmi	r3, #43	@ 0x2b
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e32:	f89a 3000 	ldrb.w	r3, [sl]
 8007e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e38:	d015      	beq.n	8007e66 <_svfiprintf_r+0xfa>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4621      	mov	r1, r4
 8007e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4a:	3b30      	subs	r3, #48	@ 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d94b      	bls.n	8007ee8 <_svfiprintf_r+0x17c>
 8007e50:	b1b0      	cbz	r0, 8007e80 <_svfiprintf_r+0x114>
 8007e52:	9207      	str	r2, [sp, #28]
 8007e54:	e014      	b.n	8007e80 <_svfiprintf_r+0x114>
 8007e56:	eba0 0308 	sub.w	r3, r0, r8
 8007e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	46a2      	mov	sl, r4
 8007e64:	e7d2      	b.n	8007e0c <_svfiprintf_r+0xa0>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfbb      	ittet	lt
 8007e72:	425b      	neglt	r3, r3
 8007e74:	f042 0202 	orrlt.w	r2, r2, #2
 8007e78:	9307      	strge	r3, [sp, #28]
 8007e7a:	9307      	strlt	r3, [sp, #28]
 8007e7c:	bfb8      	it	lt
 8007e7e:	9204      	strlt	r2, [sp, #16]
 8007e80:	7823      	ldrb	r3, [r4, #0]
 8007e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e84:	d10a      	bne.n	8007e9c <_svfiprintf_r+0x130>
 8007e86:	7863      	ldrb	r3, [r4, #1]
 8007e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e8a:	d132      	bne.n	8007ef2 <_svfiprintf_r+0x186>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e98:	3402      	adds	r4, #2
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f60 <_svfiprintf_r+0x1f4>
 8007ea0:	7821      	ldrb	r1, [r4, #0]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	4650      	mov	r0, sl
 8007ea6:	f7f8 f9bb 	bl	8000220 <memchr>
 8007eaa:	b138      	cbz	r0, 8007ebc <_svfiprintf_r+0x150>
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	eba0 000a 	sub.w	r0, r0, sl
 8007eb2:	2240      	movs	r2, #64	@ 0x40
 8007eb4:	4082      	lsls	r2, r0
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	3401      	adds	r4, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec0:	4824      	ldr	r0, [pc, #144]	@ (8007f54 <_svfiprintf_r+0x1e8>)
 8007ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ec6:	2206      	movs	r2, #6
 8007ec8:	f7f8 f9aa 	bl	8000220 <memchr>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d036      	beq.n	8007f3e <_svfiprintf_r+0x1d2>
 8007ed0:	4b21      	ldr	r3, [pc, #132]	@ (8007f58 <_svfiprintf_r+0x1ec>)
 8007ed2:	bb1b      	cbnz	r3, 8007f1c <_svfiprintf_r+0x1b0>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	3307      	adds	r3, #7
 8007ed8:	f023 0307 	bic.w	r3, r3, #7
 8007edc:	3308      	adds	r3, #8
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee2:	4433      	add	r3, r6
 8007ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee6:	e76a      	b.n	8007dbe <_svfiprintf_r+0x52>
 8007ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eec:	460c      	mov	r4, r1
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7a8      	b.n	8007e44 <_svfiprintf_r+0xd8>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	3401      	adds	r4, #1
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f04f 0c0a 	mov.w	ip, #10
 8007efe:	4620      	mov	r0, r4
 8007f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f04:	3a30      	subs	r2, #48	@ 0x30
 8007f06:	2a09      	cmp	r2, #9
 8007f08:	d903      	bls.n	8007f12 <_svfiprintf_r+0x1a6>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0c6      	beq.n	8007e9c <_svfiprintf_r+0x130>
 8007f0e:	9105      	str	r1, [sp, #20]
 8007f10:	e7c4      	b.n	8007e9c <_svfiprintf_r+0x130>
 8007f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f16:	4604      	mov	r4, r0
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e7f0      	b.n	8007efe <_svfiprintf_r+0x192>
 8007f1c:	ab03      	add	r3, sp, #12
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	462a      	mov	r2, r5
 8007f22:	4b0e      	ldr	r3, [pc, #56]	@ (8007f5c <_svfiprintf_r+0x1f0>)
 8007f24:	a904      	add	r1, sp, #16
 8007f26:	4638      	mov	r0, r7
 8007f28:	f3af 8000 	nop.w
 8007f2c:	1c42      	adds	r2, r0, #1
 8007f2e:	4606      	mov	r6, r0
 8007f30:	d1d6      	bne.n	8007ee0 <_svfiprintf_r+0x174>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	065b      	lsls	r3, r3, #25
 8007f36:	f53f af2d 	bmi.w	8007d94 <_svfiprintf_r+0x28>
 8007f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f3c:	e72c      	b.n	8007d98 <_svfiprintf_r+0x2c>
 8007f3e:	ab03      	add	r3, sp, #12
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4b05      	ldr	r3, [pc, #20]	@ (8007f5c <_svfiprintf_r+0x1f0>)
 8007f46:	a904      	add	r1, sp, #16
 8007f48:	4638      	mov	r0, r7
 8007f4a:	f000 f91b 	bl	8008184 <_printf_i>
 8007f4e:	e7ed      	b.n	8007f2c <_svfiprintf_r+0x1c0>
 8007f50:	08008d68 	.word	0x08008d68
 8007f54:	08008d72 	.word	0x08008d72
 8007f58:	00000000 	.word	0x00000000
 8007f5c:	08007cb5 	.word	0x08007cb5
 8007f60:	08008d6e 	.word	0x08008d6e

08007f64 <sbrk_aligned>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4e0f      	ldr	r6, [pc, #60]	@ (8007fa4 <sbrk_aligned+0x40>)
 8007f68:	460c      	mov	r4, r1
 8007f6a:	6831      	ldr	r1, [r6, #0]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	b911      	cbnz	r1, 8007f76 <sbrk_aligned+0x12>
 8007f70:	f000 fa7c 	bl	800846c <_sbrk_r>
 8007f74:	6030      	str	r0, [r6, #0]
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 fa77 	bl	800846c <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d103      	bne.n	8007f8a <sbrk_aligned+0x26>
 8007f82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f86:	4620      	mov	r0, r4
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
 8007f8a:	1cc4      	adds	r4, r0, #3
 8007f8c:	f024 0403 	bic.w	r4, r4, #3
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d0f8      	beq.n	8007f86 <sbrk_aligned+0x22>
 8007f94:	1a21      	subs	r1, r4, r0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 fa68 	bl	800846c <_sbrk_r>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d1f2      	bne.n	8007f86 <sbrk_aligned+0x22>
 8007fa0:	e7ef      	b.n	8007f82 <sbrk_aligned+0x1e>
 8007fa2:	bf00      	nop
 8007fa4:	200005b4 	.word	0x200005b4

08007fa8 <_malloc_r>:
 8007fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fac:	1ccd      	adds	r5, r1, #3
 8007fae:	f025 0503 	bic.w	r5, r5, #3
 8007fb2:	3508      	adds	r5, #8
 8007fb4:	2d0c      	cmp	r5, #12
 8007fb6:	bf38      	it	cc
 8007fb8:	250c      	movcc	r5, #12
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	db01      	blt.n	8007fc4 <_malloc_r+0x1c>
 8007fc0:	42a9      	cmp	r1, r5
 8007fc2:	d904      	bls.n	8007fce <_malloc_r+0x26>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	6033      	str	r3, [r6, #0]
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080a4 <_malloc_r+0xfc>
 8007fd2:	f000 f9f7 	bl	80083c4 <__malloc_lock>
 8007fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fda:	461c      	mov	r4, r3
 8007fdc:	bb44      	cbnz	r4, 8008030 <_malloc_r+0x88>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff ffbf 	bl	8007f64 <sbrk_aligned>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	4604      	mov	r4, r0
 8007fea:	d158      	bne.n	800809e <_malloc_r+0xf6>
 8007fec:	f8d8 4000 	ldr.w	r4, [r8]
 8007ff0:	4627      	mov	r7, r4
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	d143      	bne.n	800807e <_malloc_r+0xd6>
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	d04b      	beq.n	8008092 <_malloc_r+0xea>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4630      	mov	r0, r6
 8008000:	eb04 0903 	add.w	r9, r4, r3
 8008004:	f000 fa32 	bl	800846c <_sbrk_r>
 8008008:	4581      	cmp	r9, r0
 800800a:	d142      	bne.n	8008092 <_malloc_r+0xea>
 800800c:	6821      	ldr	r1, [r4, #0]
 800800e:	1a6d      	subs	r5, r5, r1
 8008010:	4629      	mov	r1, r5
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff ffa6 	bl	8007f64 <sbrk_aligned>
 8008018:	3001      	adds	r0, #1
 800801a:	d03a      	beq.n	8008092 <_malloc_r+0xea>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	442b      	add	r3, r5
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	f8d8 3000 	ldr.w	r3, [r8]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	bb62      	cbnz	r2, 8008084 <_malloc_r+0xdc>
 800802a:	f8c8 7000 	str.w	r7, [r8]
 800802e:	e00f      	b.n	8008050 <_malloc_r+0xa8>
 8008030:	6822      	ldr	r2, [r4, #0]
 8008032:	1b52      	subs	r2, r2, r5
 8008034:	d420      	bmi.n	8008078 <_malloc_r+0xd0>
 8008036:	2a0b      	cmp	r2, #11
 8008038:	d917      	bls.n	800806a <_malloc_r+0xc2>
 800803a:	1961      	adds	r1, r4, r5
 800803c:	42a3      	cmp	r3, r4
 800803e:	6025      	str	r5, [r4, #0]
 8008040:	bf18      	it	ne
 8008042:	6059      	strne	r1, [r3, #4]
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	bf08      	it	eq
 8008048:	f8c8 1000 	streq.w	r1, [r8]
 800804c:	5162      	str	r2, [r4, r5]
 800804e:	604b      	str	r3, [r1, #4]
 8008050:	4630      	mov	r0, r6
 8008052:	f000 f9bd 	bl	80083d0 <__malloc_unlock>
 8008056:	f104 000b 	add.w	r0, r4, #11
 800805a:	1d23      	adds	r3, r4, #4
 800805c:	f020 0007 	bic.w	r0, r0, #7
 8008060:	1ac2      	subs	r2, r0, r3
 8008062:	bf1c      	itt	ne
 8008064:	1a1b      	subne	r3, r3, r0
 8008066:	50a3      	strne	r3, [r4, r2]
 8008068:	e7af      	b.n	8007fca <_malloc_r+0x22>
 800806a:	6862      	ldr	r2, [r4, #4]
 800806c:	42a3      	cmp	r3, r4
 800806e:	bf0c      	ite	eq
 8008070:	f8c8 2000 	streq.w	r2, [r8]
 8008074:	605a      	strne	r2, [r3, #4]
 8008076:	e7eb      	b.n	8008050 <_malloc_r+0xa8>
 8008078:	4623      	mov	r3, r4
 800807a:	6864      	ldr	r4, [r4, #4]
 800807c:	e7ae      	b.n	8007fdc <_malloc_r+0x34>
 800807e:	463c      	mov	r4, r7
 8008080:	687f      	ldr	r7, [r7, #4]
 8008082:	e7b6      	b.n	8007ff2 <_malloc_r+0x4a>
 8008084:	461a      	mov	r2, r3
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	42a3      	cmp	r3, r4
 800808a:	d1fb      	bne.n	8008084 <_malloc_r+0xdc>
 800808c:	2300      	movs	r3, #0
 800808e:	6053      	str	r3, [r2, #4]
 8008090:	e7de      	b.n	8008050 <_malloc_r+0xa8>
 8008092:	230c      	movs	r3, #12
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	4630      	mov	r0, r6
 8008098:	f000 f99a 	bl	80083d0 <__malloc_unlock>
 800809c:	e794      	b.n	8007fc8 <_malloc_r+0x20>
 800809e:	6005      	str	r5, [r0, #0]
 80080a0:	e7d6      	b.n	8008050 <_malloc_r+0xa8>
 80080a2:	bf00      	nop
 80080a4:	200005b8 	.word	0x200005b8

080080a8 <_printf_common>:
 80080a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	4616      	mov	r6, r2
 80080ae:	4698      	mov	r8, r3
 80080b0:	688a      	ldr	r2, [r1, #8]
 80080b2:	690b      	ldr	r3, [r1, #16]
 80080b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080b8:	4293      	cmp	r3, r2
 80080ba:	bfb8      	it	lt
 80080bc:	4613      	movlt	r3, r2
 80080be:	6033      	str	r3, [r6, #0]
 80080c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080c4:	4607      	mov	r7, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b10a      	cbz	r2, 80080ce <_printf_common+0x26>
 80080ca:	3301      	adds	r3, #1
 80080cc:	6033      	str	r3, [r6, #0]
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	0699      	lsls	r1, r3, #26
 80080d2:	bf42      	ittt	mi
 80080d4:	6833      	ldrmi	r3, [r6, #0]
 80080d6:	3302      	addmi	r3, #2
 80080d8:	6033      	strmi	r3, [r6, #0]
 80080da:	6825      	ldr	r5, [r4, #0]
 80080dc:	f015 0506 	ands.w	r5, r5, #6
 80080e0:	d106      	bne.n	80080f0 <_printf_common+0x48>
 80080e2:	f104 0a19 	add.w	sl, r4, #25
 80080e6:	68e3      	ldr	r3, [r4, #12]
 80080e8:	6832      	ldr	r2, [r6, #0]
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	42ab      	cmp	r3, r5
 80080ee:	dc26      	bgt.n	800813e <_printf_common+0x96>
 80080f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	3b00      	subs	r3, #0
 80080f8:	bf18      	it	ne
 80080fa:	2301      	movne	r3, #1
 80080fc:	0692      	lsls	r2, r2, #26
 80080fe:	d42b      	bmi.n	8008158 <_printf_common+0xb0>
 8008100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008104:	4641      	mov	r1, r8
 8008106:	4638      	mov	r0, r7
 8008108:	47c8      	blx	r9
 800810a:	3001      	adds	r0, #1
 800810c:	d01e      	beq.n	800814c <_printf_common+0xa4>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	6922      	ldr	r2, [r4, #16]
 8008112:	f003 0306 	and.w	r3, r3, #6
 8008116:	2b04      	cmp	r3, #4
 8008118:	bf02      	ittt	eq
 800811a:	68e5      	ldreq	r5, [r4, #12]
 800811c:	6833      	ldreq	r3, [r6, #0]
 800811e:	1aed      	subeq	r5, r5, r3
 8008120:	68a3      	ldr	r3, [r4, #8]
 8008122:	bf0c      	ite	eq
 8008124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008128:	2500      	movne	r5, #0
 800812a:	4293      	cmp	r3, r2
 800812c:	bfc4      	itt	gt
 800812e:	1a9b      	subgt	r3, r3, r2
 8008130:	18ed      	addgt	r5, r5, r3
 8008132:	2600      	movs	r6, #0
 8008134:	341a      	adds	r4, #26
 8008136:	42b5      	cmp	r5, r6
 8008138:	d11a      	bne.n	8008170 <_printf_common+0xc8>
 800813a:	2000      	movs	r0, #0
 800813c:	e008      	b.n	8008150 <_printf_common+0xa8>
 800813e:	2301      	movs	r3, #1
 8008140:	4652      	mov	r2, sl
 8008142:	4641      	mov	r1, r8
 8008144:	4638      	mov	r0, r7
 8008146:	47c8      	blx	r9
 8008148:	3001      	adds	r0, #1
 800814a:	d103      	bne.n	8008154 <_printf_common+0xac>
 800814c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008154:	3501      	adds	r5, #1
 8008156:	e7c6      	b.n	80080e6 <_printf_common+0x3e>
 8008158:	18e1      	adds	r1, r4, r3
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	2030      	movs	r0, #48	@ 0x30
 800815e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008162:	4422      	add	r2, r4
 8008164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800816c:	3302      	adds	r3, #2
 800816e:	e7c7      	b.n	8008100 <_printf_common+0x58>
 8008170:	2301      	movs	r3, #1
 8008172:	4622      	mov	r2, r4
 8008174:	4641      	mov	r1, r8
 8008176:	4638      	mov	r0, r7
 8008178:	47c8      	blx	r9
 800817a:	3001      	adds	r0, #1
 800817c:	d0e6      	beq.n	800814c <_printf_common+0xa4>
 800817e:	3601      	adds	r6, #1
 8008180:	e7d9      	b.n	8008136 <_printf_common+0x8e>
	...

08008184 <_printf_i>:
 8008184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	7e0f      	ldrb	r7, [r1, #24]
 800818a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800818c:	2f78      	cmp	r7, #120	@ 0x78
 800818e:	4691      	mov	r9, r2
 8008190:	4680      	mov	r8, r0
 8008192:	460c      	mov	r4, r1
 8008194:	469a      	mov	sl, r3
 8008196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800819a:	d807      	bhi.n	80081ac <_printf_i+0x28>
 800819c:	2f62      	cmp	r7, #98	@ 0x62
 800819e:	d80a      	bhi.n	80081b6 <_printf_i+0x32>
 80081a0:	2f00      	cmp	r7, #0
 80081a2:	f000 80d2 	beq.w	800834a <_printf_i+0x1c6>
 80081a6:	2f58      	cmp	r7, #88	@ 0x58
 80081a8:	f000 80b9 	beq.w	800831e <_printf_i+0x19a>
 80081ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081b4:	e03a      	b.n	800822c <_printf_i+0xa8>
 80081b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081ba:	2b15      	cmp	r3, #21
 80081bc:	d8f6      	bhi.n	80081ac <_printf_i+0x28>
 80081be:	a101      	add	r1, pc, #4	@ (adr r1, 80081c4 <_printf_i+0x40>)
 80081c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081c4:	0800821d 	.word	0x0800821d
 80081c8:	08008231 	.word	0x08008231
 80081cc:	080081ad 	.word	0x080081ad
 80081d0:	080081ad 	.word	0x080081ad
 80081d4:	080081ad 	.word	0x080081ad
 80081d8:	080081ad 	.word	0x080081ad
 80081dc:	08008231 	.word	0x08008231
 80081e0:	080081ad 	.word	0x080081ad
 80081e4:	080081ad 	.word	0x080081ad
 80081e8:	080081ad 	.word	0x080081ad
 80081ec:	080081ad 	.word	0x080081ad
 80081f0:	08008331 	.word	0x08008331
 80081f4:	0800825b 	.word	0x0800825b
 80081f8:	080082eb 	.word	0x080082eb
 80081fc:	080081ad 	.word	0x080081ad
 8008200:	080081ad 	.word	0x080081ad
 8008204:	08008353 	.word	0x08008353
 8008208:	080081ad 	.word	0x080081ad
 800820c:	0800825b 	.word	0x0800825b
 8008210:	080081ad 	.word	0x080081ad
 8008214:	080081ad 	.word	0x080081ad
 8008218:	080082f3 	.word	0x080082f3
 800821c:	6833      	ldr	r3, [r6, #0]
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6032      	str	r2, [r6, #0]
 8008224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800822c:	2301      	movs	r3, #1
 800822e:	e09d      	b.n	800836c <_printf_i+0x1e8>
 8008230:	6833      	ldr	r3, [r6, #0]
 8008232:	6820      	ldr	r0, [r4, #0]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	6031      	str	r1, [r6, #0]
 8008238:	0606      	lsls	r6, r0, #24
 800823a:	d501      	bpl.n	8008240 <_printf_i+0xbc>
 800823c:	681d      	ldr	r5, [r3, #0]
 800823e:	e003      	b.n	8008248 <_printf_i+0xc4>
 8008240:	0645      	lsls	r5, r0, #25
 8008242:	d5fb      	bpl.n	800823c <_printf_i+0xb8>
 8008244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008248:	2d00      	cmp	r5, #0
 800824a:	da03      	bge.n	8008254 <_printf_i+0xd0>
 800824c:	232d      	movs	r3, #45	@ 0x2d
 800824e:	426d      	negs	r5, r5
 8008250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008254:	4859      	ldr	r0, [pc, #356]	@ (80083bc <_printf_i+0x238>)
 8008256:	230a      	movs	r3, #10
 8008258:	e011      	b.n	800827e <_printf_i+0xfa>
 800825a:	6821      	ldr	r1, [r4, #0]
 800825c:	6833      	ldr	r3, [r6, #0]
 800825e:	0608      	lsls	r0, r1, #24
 8008260:	f853 5b04 	ldr.w	r5, [r3], #4
 8008264:	d402      	bmi.n	800826c <_printf_i+0xe8>
 8008266:	0649      	lsls	r1, r1, #25
 8008268:	bf48      	it	mi
 800826a:	b2ad      	uxthmi	r5, r5
 800826c:	2f6f      	cmp	r7, #111	@ 0x6f
 800826e:	4853      	ldr	r0, [pc, #332]	@ (80083bc <_printf_i+0x238>)
 8008270:	6033      	str	r3, [r6, #0]
 8008272:	bf14      	ite	ne
 8008274:	230a      	movne	r3, #10
 8008276:	2308      	moveq	r3, #8
 8008278:	2100      	movs	r1, #0
 800827a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800827e:	6866      	ldr	r6, [r4, #4]
 8008280:	60a6      	str	r6, [r4, #8]
 8008282:	2e00      	cmp	r6, #0
 8008284:	bfa2      	ittt	ge
 8008286:	6821      	ldrge	r1, [r4, #0]
 8008288:	f021 0104 	bicge.w	r1, r1, #4
 800828c:	6021      	strge	r1, [r4, #0]
 800828e:	b90d      	cbnz	r5, 8008294 <_printf_i+0x110>
 8008290:	2e00      	cmp	r6, #0
 8008292:	d04b      	beq.n	800832c <_printf_i+0x1a8>
 8008294:	4616      	mov	r6, r2
 8008296:	fbb5 f1f3 	udiv	r1, r5, r3
 800829a:	fb03 5711 	mls	r7, r3, r1, r5
 800829e:	5dc7      	ldrb	r7, [r0, r7]
 80082a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082a4:	462f      	mov	r7, r5
 80082a6:	42bb      	cmp	r3, r7
 80082a8:	460d      	mov	r5, r1
 80082aa:	d9f4      	bls.n	8008296 <_printf_i+0x112>
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d10b      	bne.n	80082c8 <_printf_i+0x144>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	07df      	lsls	r7, r3, #31
 80082b4:	d508      	bpl.n	80082c8 <_printf_i+0x144>
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	6861      	ldr	r1, [r4, #4]
 80082ba:	4299      	cmp	r1, r3
 80082bc:	bfde      	ittt	le
 80082be:	2330      	movle	r3, #48	@ 0x30
 80082c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80082c8:	1b92      	subs	r2, r2, r6
 80082ca:	6122      	str	r2, [r4, #16]
 80082cc:	f8cd a000 	str.w	sl, [sp]
 80082d0:	464b      	mov	r3, r9
 80082d2:	aa03      	add	r2, sp, #12
 80082d4:	4621      	mov	r1, r4
 80082d6:	4640      	mov	r0, r8
 80082d8:	f7ff fee6 	bl	80080a8 <_printf_common>
 80082dc:	3001      	adds	r0, #1
 80082de:	d14a      	bne.n	8008376 <_printf_i+0x1f2>
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082e4:	b004      	add	sp, #16
 80082e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	f043 0320 	orr.w	r3, r3, #32
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	4833      	ldr	r0, [pc, #204]	@ (80083c0 <_printf_i+0x23c>)
 80082f4:	2778      	movs	r7, #120	@ 0x78
 80082f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	6831      	ldr	r1, [r6, #0]
 80082fe:	061f      	lsls	r7, r3, #24
 8008300:	f851 5b04 	ldr.w	r5, [r1], #4
 8008304:	d402      	bmi.n	800830c <_printf_i+0x188>
 8008306:	065f      	lsls	r7, r3, #25
 8008308:	bf48      	it	mi
 800830a:	b2ad      	uxthmi	r5, r5
 800830c:	6031      	str	r1, [r6, #0]
 800830e:	07d9      	lsls	r1, r3, #31
 8008310:	bf44      	itt	mi
 8008312:	f043 0320 	orrmi.w	r3, r3, #32
 8008316:	6023      	strmi	r3, [r4, #0]
 8008318:	b11d      	cbz	r5, 8008322 <_printf_i+0x19e>
 800831a:	2310      	movs	r3, #16
 800831c:	e7ac      	b.n	8008278 <_printf_i+0xf4>
 800831e:	4827      	ldr	r0, [pc, #156]	@ (80083bc <_printf_i+0x238>)
 8008320:	e7e9      	b.n	80082f6 <_printf_i+0x172>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	f023 0320 	bic.w	r3, r3, #32
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	e7f6      	b.n	800831a <_printf_i+0x196>
 800832c:	4616      	mov	r6, r2
 800832e:	e7bd      	b.n	80082ac <_printf_i+0x128>
 8008330:	6833      	ldr	r3, [r6, #0]
 8008332:	6825      	ldr	r5, [r4, #0]
 8008334:	6961      	ldr	r1, [r4, #20]
 8008336:	1d18      	adds	r0, r3, #4
 8008338:	6030      	str	r0, [r6, #0]
 800833a:	062e      	lsls	r6, r5, #24
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	d501      	bpl.n	8008344 <_printf_i+0x1c0>
 8008340:	6019      	str	r1, [r3, #0]
 8008342:	e002      	b.n	800834a <_printf_i+0x1c6>
 8008344:	0668      	lsls	r0, r5, #25
 8008346:	d5fb      	bpl.n	8008340 <_printf_i+0x1bc>
 8008348:	8019      	strh	r1, [r3, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	4616      	mov	r6, r2
 8008350:	e7bc      	b.n	80082cc <_printf_i+0x148>
 8008352:	6833      	ldr	r3, [r6, #0]
 8008354:	1d1a      	adds	r2, r3, #4
 8008356:	6032      	str	r2, [r6, #0]
 8008358:	681e      	ldr	r6, [r3, #0]
 800835a:	6862      	ldr	r2, [r4, #4]
 800835c:	2100      	movs	r1, #0
 800835e:	4630      	mov	r0, r6
 8008360:	f7f7 ff5e 	bl	8000220 <memchr>
 8008364:	b108      	cbz	r0, 800836a <_printf_i+0x1e6>
 8008366:	1b80      	subs	r0, r0, r6
 8008368:	6060      	str	r0, [r4, #4]
 800836a:	6863      	ldr	r3, [r4, #4]
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	2300      	movs	r3, #0
 8008370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008374:	e7aa      	b.n	80082cc <_printf_i+0x148>
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	4632      	mov	r2, r6
 800837a:	4649      	mov	r1, r9
 800837c:	4640      	mov	r0, r8
 800837e:	47d0      	blx	sl
 8008380:	3001      	adds	r0, #1
 8008382:	d0ad      	beq.n	80082e0 <_printf_i+0x15c>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	079b      	lsls	r3, r3, #30
 8008388:	d413      	bmi.n	80083b2 <_printf_i+0x22e>
 800838a:	68e0      	ldr	r0, [r4, #12]
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	4298      	cmp	r0, r3
 8008390:	bfb8      	it	lt
 8008392:	4618      	movlt	r0, r3
 8008394:	e7a6      	b.n	80082e4 <_printf_i+0x160>
 8008396:	2301      	movs	r3, #1
 8008398:	4632      	mov	r2, r6
 800839a:	4649      	mov	r1, r9
 800839c:	4640      	mov	r0, r8
 800839e:	47d0      	blx	sl
 80083a0:	3001      	adds	r0, #1
 80083a2:	d09d      	beq.n	80082e0 <_printf_i+0x15c>
 80083a4:	3501      	adds	r5, #1
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	9903      	ldr	r1, [sp, #12]
 80083aa:	1a5b      	subs	r3, r3, r1
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dcf2      	bgt.n	8008396 <_printf_i+0x212>
 80083b0:	e7eb      	b.n	800838a <_printf_i+0x206>
 80083b2:	2500      	movs	r5, #0
 80083b4:	f104 0619 	add.w	r6, r4, #25
 80083b8:	e7f5      	b.n	80083a6 <_printf_i+0x222>
 80083ba:	bf00      	nop
 80083bc:	08008d79 	.word	0x08008d79
 80083c0:	08008d8a 	.word	0x08008d8a

080083c4 <__malloc_lock>:
 80083c4:	4801      	ldr	r0, [pc, #4]	@ (80083cc <__malloc_lock+0x8>)
 80083c6:	f7ff bc73 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 80083ca:	bf00      	nop
 80083cc:	200005b0 	.word	0x200005b0

080083d0 <__malloc_unlock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_unlock+0x8>)
 80083d2:	f7ff bc6e 	b.w	8007cb2 <__retarget_lock_release_recursive>
 80083d6:	bf00      	nop
 80083d8:	200005b0 	.word	0x200005b0

080083dc <_realloc_r>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	4680      	mov	r8, r0
 80083e2:	4615      	mov	r5, r2
 80083e4:	460c      	mov	r4, r1
 80083e6:	b921      	cbnz	r1, 80083f2 <_realloc_r+0x16>
 80083e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	4611      	mov	r1, r2
 80083ee:	f7ff bddb 	b.w	8007fa8 <_malloc_r>
 80083f2:	b92a      	cbnz	r2, 8008400 <_realloc_r+0x24>
 80083f4:	f000 f858 	bl	80084a8 <_free_r>
 80083f8:	2400      	movs	r4, #0
 80083fa:	4620      	mov	r0, r4
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	f000 f89c 	bl	800853c <_malloc_usable_size_r>
 8008404:	4285      	cmp	r5, r0
 8008406:	4606      	mov	r6, r0
 8008408:	d802      	bhi.n	8008410 <_realloc_r+0x34>
 800840a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800840e:	d8f4      	bhi.n	80083fa <_realloc_r+0x1e>
 8008410:	4629      	mov	r1, r5
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff fdc8 	bl	8007fa8 <_malloc_r>
 8008418:	4607      	mov	r7, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d0ec      	beq.n	80083f8 <_realloc_r+0x1c>
 800841e:	42b5      	cmp	r5, r6
 8008420:	462a      	mov	r2, r5
 8008422:	4621      	mov	r1, r4
 8008424:	bf28      	it	cs
 8008426:	4632      	movcs	r2, r6
 8008428:	f000 f830 	bl	800848c <memcpy>
 800842c:	4621      	mov	r1, r4
 800842e:	4640      	mov	r0, r8
 8008430:	f000 f83a 	bl	80084a8 <_free_r>
 8008434:	463c      	mov	r4, r7
 8008436:	e7e0      	b.n	80083fa <_realloc_r+0x1e>

08008438 <memmove>:
 8008438:	4288      	cmp	r0, r1
 800843a:	b510      	push	{r4, lr}
 800843c:	eb01 0402 	add.w	r4, r1, r2
 8008440:	d902      	bls.n	8008448 <memmove+0x10>
 8008442:	4284      	cmp	r4, r0
 8008444:	4623      	mov	r3, r4
 8008446:	d807      	bhi.n	8008458 <memmove+0x20>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	42a1      	cmp	r1, r4
 800844c:	d008      	beq.n	8008460 <memmove+0x28>
 800844e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008456:	e7f8      	b.n	800844a <memmove+0x12>
 8008458:	4402      	add	r2, r0
 800845a:	4601      	mov	r1, r0
 800845c:	428a      	cmp	r2, r1
 800845e:	d100      	bne.n	8008462 <memmove+0x2a>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800846a:	e7f7      	b.n	800845c <memmove+0x24>

0800846c <_sbrk_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d06      	ldr	r5, [pc, #24]	@ (8008488 <_sbrk_r+0x1c>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7f9 f856 	bl	8001528 <_sbrk>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_sbrk_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_sbrk_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	200005bc 	.word	0x200005bc

0800848c <memcpy>:
 800848c:	440a      	add	r2, r1
 800848e:	4291      	cmp	r1, r2
 8008490:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008494:	d100      	bne.n	8008498 <memcpy+0xc>
 8008496:	4770      	bx	lr
 8008498:	b510      	push	{r4, lr}
 800849a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a2:	4291      	cmp	r1, r2
 80084a4:	d1f9      	bne.n	800849a <memcpy+0xe>
 80084a6:	bd10      	pop	{r4, pc}

080084a8 <_free_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4605      	mov	r5, r0
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d041      	beq.n	8008534 <_free_r+0x8c>
 80084b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084b4:	1f0c      	subs	r4, r1, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	bfb8      	it	lt
 80084ba:	18e4      	addlt	r4, r4, r3
 80084bc:	f7ff ff82 	bl	80083c4 <__malloc_lock>
 80084c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <_free_r+0x90>)
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	b933      	cbnz	r3, 80084d4 <_free_r+0x2c>
 80084c6:	6063      	str	r3, [r4, #4]
 80084c8:	6014      	str	r4, [r2, #0]
 80084ca:	4628      	mov	r0, r5
 80084cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d0:	f7ff bf7e 	b.w	80083d0 <__malloc_unlock>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d908      	bls.n	80084ea <_free_r+0x42>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	1821      	adds	r1, r4, r0
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf01      	itttt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	1809      	addeq	r1, r1, r0
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	e7ed      	b.n	80084c6 <_free_r+0x1e>
 80084ea:	461a      	mov	r2, r3
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	b10b      	cbz	r3, 80084f4 <_free_r+0x4c>
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d9fa      	bls.n	80084ea <_free_r+0x42>
 80084f4:	6811      	ldr	r1, [r2, #0]
 80084f6:	1850      	adds	r0, r2, r1
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d10b      	bne.n	8008514 <_free_r+0x6c>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	4401      	add	r1, r0
 8008500:	1850      	adds	r0, r2, r1
 8008502:	4283      	cmp	r3, r0
 8008504:	6011      	str	r1, [r2, #0]
 8008506:	d1e0      	bne.n	80084ca <_free_r+0x22>
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	6053      	str	r3, [r2, #4]
 800850e:	4408      	add	r0, r1
 8008510:	6010      	str	r0, [r2, #0]
 8008512:	e7da      	b.n	80084ca <_free_r+0x22>
 8008514:	d902      	bls.n	800851c <_free_r+0x74>
 8008516:	230c      	movs	r3, #12
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	e7d6      	b.n	80084ca <_free_r+0x22>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	1821      	adds	r1, r4, r0
 8008520:	428b      	cmp	r3, r1
 8008522:	bf04      	itt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	6063      	str	r3, [r4, #4]
 800852a:	bf04      	itt	eq
 800852c:	1809      	addeq	r1, r1, r0
 800852e:	6021      	streq	r1, [r4, #0]
 8008530:	6054      	str	r4, [r2, #4]
 8008532:	e7ca      	b.n	80084ca <_free_r+0x22>
 8008534:	bd38      	pop	{r3, r4, r5, pc}
 8008536:	bf00      	nop
 8008538:	200005b8 	.word	0x200005b8

0800853c <_malloc_usable_size_r>:
 800853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008540:	1f18      	subs	r0, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfbc      	itt	lt
 8008546:	580b      	ldrlt	r3, [r1, r0]
 8008548:	18c0      	addlt	r0, r0, r3
 800854a:	4770      	bx	lr

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
