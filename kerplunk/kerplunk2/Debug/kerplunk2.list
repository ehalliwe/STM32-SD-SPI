
kerplunk2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008db4  08008db4  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008db4  08008db4  00009db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dbc  08008dbc  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dbc  08008dbc  00009dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dc0  08008dc0  00009dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008dc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000080  08008e44  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08008e44  0000a628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaef  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f8  00000000  00000000  00018b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a34  00000000  00000000  0001bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e12  00000000  00000000  0001ca24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001314b  00000000  00000000  00040836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb89  00000000  00000000  00053981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012150a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  00121550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00125440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800849c 	.word	0x0800849c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800849c 	.word	0x0800849c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <UART_Print>:
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
static void UART_Print(char* str)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <UART_Print+0x24>)
 80005c8:	f002 faac 	bl	8002b24 <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000014c 	.word	0x2000014c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fce7 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f81d 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f919 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f8ed 	bl	80007c8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005ee:	f002 fe55 	bl	800329c <MX_FATFS_Init>
  MX_SPI3_Init();
 80005f2:	f000 f8b3 	bl	800075c <MX_SPI3_Init>
  MX_SPI2_Init();
 80005f6:	f000 f87f 	bl	80006f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //Test The SD Card
//  SD_Card_Test();
  int* counter = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  SD_Card_Foo(&counter);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f969 	bl	80008d8 <SD_Card_Foo>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
	//SD_Card_Test();
	SD_Card_Foo(&counter);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f965 	bl	80008d8 <SD_Card_Foo>
	HAL_Delay(1000);		/* Insert delay 100 ms */
 800060e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000612:	f000 fd3f 	bl	8001094 <HAL_Delay>
//	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
	counter++;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3304      	adds	r3, #4
 800061a:	607b      	str	r3, [r7, #4]
	SD_Card_Foo(&counter);
 800061c:	bf00      	nop
 800061e:	e7f2      	b.n	8000606 <main+0x2e>

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 ff24 	bl	800747c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <SystemClock_Config+0xd0>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd4>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000694:	2308      	movs	r3, #8
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000698:	2350      	movs	r3, #80	@ 0x50
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 faf3 	bl	8001c98 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 fa10 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 ff93 	bl	8001604 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006e4:	f000 f9fa 	bl	8000adc <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	@ 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_SPI2_Init+0x5c>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <MX_SPI2_Init+0x60>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000714:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000742:	f001 fd47 	bl	80021d4 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f9c6 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000009c 	.word	0x2000009c
 8000758:	40003800 	.word	0x40003800

0800075c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI3_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI3_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000790:	2210      	movs	r2, #16
 8000792:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI3_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI3_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI3_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI3_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI3_Init+0x64>)
 80007ae:	f001 fd11 	bl	80021d4 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f990 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000f4 	.word	0x200000f4
 80007c4:	40003c00 	.word	0x40003c00

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f002 f940 	bl	8002a84 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f967 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000014c 	.word	0x2000014c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a25      	ldr	r2, [pc, #148]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_GPIO_Init+0xb4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI3_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2121      	movs	r1, #33	@ 0x21
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <MX_GPIO_Init+0xb8>)
 80008a8:	f000 fe92 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI3_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin|LD2_Pin;
 80008ac:	2321      	movs	r3, #33	@ 0x21
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_GPIO_Init+0xb8>)
 80008c4:	f000 fcf0 	bl	80012a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <SD_Card_Foo>:
    HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
    HAL_UART_Transmit_IT(&huart2, RX_Buffer, BUFFER_SIZE);
}

static void SD_Card_Foo(int* cnt)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008ea:	6018      	str	r0, [r3, #0]
	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	UINT RWC, WWC, temp = *cnt; // Read/Write Word Counter
 80008ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80008fc:	f102 0204 	add.w	r2, r2, #4
 8000900:	6013      	str	r3, [r2, #0]
    char RW_Buffer[200];
    do
    {
    	printf(TxBuffer, "-----------Start-a-mundo--------- \r\n");
 8000902:	496c      	ldr	r1, [pc, #432]	@ (8000ab4 <SD_Card_Foo+0x1dc>)
 8000904:	486c      	ldr	r0, [pc, #432]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000906:	f006 fda7 	bl	8007458 <iprintf>
    	UART_Print(TxBuffer);
 800090a:	486b      	ldr	r0, [pc, #428]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 800090c:	f7ff fe50 	bl	80005b0 <UART_Print>
    	FR_Status = f_mount(&FatFs, "",1);
 8000910:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000914:	f103 0308 	add.w	r3, r3, #8
 8000918:	2201      	movs	r2, #1
 800091a:	4968      	ldr	r1, [pc, #416]	@ (8000abc <SD_Card_Foo+0x1e4>)
 800091c:	4618      	mov	r0, r3
 800091e:	f005 fbc9 	bl	80060b4 <f_mount>
 8000922:	4603      	mov	r3, r0
 8000924:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000928:	f102 0203 	add.w	r2, r2, #3
 800092c:	7013      	strb	r3, [r2, #0]
    	if (FR_Status != FR_OK)
 800092e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000932:	f103 0303 	add.w	r3, r3, #3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00d      	beq.n	8000958 <SD_Card_Foo+0x80>
    	{
    		sprintf(TxBuffer, "Whilst Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800093c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000940:	f103 0303 	add.w	r3, r3, #3
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	495d      	ldr	r1, [pc, #372]	@ (8000ac0 <SD_Card_Foo+0x1e8>)
 800094a:	485b      	ldr	r0, [pc, #364]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 800094c:	f006 fca2 	bl	8007294 <siprintf>
    		UART_Print(TxBuffer);
 8000950:	4859      	ldr	r0, [pc, #356]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000952:	f7ff fe2d 	bl	80005b0 <UART_Print>
    		break;
 8000956:	e07f      	b.n	8000a58 <SD_Card_Foo+0x180>
    	}
    	sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n");
 8000958:	495a      	ldr	r1, [pc, #360]	@ (8000ac4 <SD_Card_Foo+0x1ec>)
 800095a:	4857      	ldr	r0, [pc, #348]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 800095c:	f006 fc9a 	bl	8007294 <siprintf>
    	UART_Print(TxBuffer);
 8000960:	4855      	ldr	r0, [pc, #340]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000962:	f7ff fe25 	bl	80005b0 <UART_Print>

    FR_Status = f_open(&Fil, "bar.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800096a:	3b30      	subs	r3, #48	@ 0x30
 800096c:	220a      	movs	r2, #10
 800096e:	4956      	ldr	r1, [pc, #344]	@ (8000ac8 <SD_Card_Foo+0x1f0>)
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fbe5 	bl	8006140 <f_open>
 8000976:	4603      	mov	r3, r0
 8000978:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800097c:	f102 0203 	add.w	r2, r2, #3
 8000980:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil));
 8000982:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000986:	f853 2c64 	ldr.w	r2, [r3, #-100]
 800098a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800098e:	3b30      	subs	r3, #48	@ 0x30
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f006 f937 	bl	8006c06 <f_lseek>
 8000998:	4603      	mov	r3, r0
 800099a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800099e:	f102 0203 	add.w	r2, r2, #3
 80009a2:	7013      	strb	r3, [r2, #0]
    sprintf(RW_Buffer, "%d\n", temp);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80009ac:	f102 0204 	add.w	r2, r2, #4
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	4946      	ldr	r1, [pc, #280]	@ (8000acc <SD_Card_Foo+0x1f4>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fc6d 	bl	8007294 <siprintf>
    FR_Status = f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc26 	bl	8000210 <strlen>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009ca:	3b38      	subs	r3, #56	@ 0x38
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80009d4:	3830      	subs	r0, #48	@ 0x30
 80009d6:	f005 feda 	bl	800678e <f_write>
 80009da:	4603      	mov	r3, r0
 80009dc:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80009e0:	f102 0203 	add.w	r2, r2, #3
 80009e4:	7013      	strb	r3, [r2, #0]
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	22c8      	movs	r2, #200	@ 0xc8
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fd44 	bl	800747c <memset>
    f_close(&Fil);
 80009f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009f8:	3b30      	subs	r3, #48	@ 0x30
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 f8d9 	bl	8006bb2 <f_close>


    FR_Status = f_open(&Fil, "bar.txt", FA_READ);
 8000a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	2201      	movs	r2, #1
 8000a08:	492f      	ldr	r1, [pc, #188]	@ (8000ac8 <SD_Card_Foo+0x1f0>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fb98 	bl	8006140 <f_open>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000a16:	f102 0203 	add.w	r2, r2, #3
 8000a1a:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000a1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a20:	f853 2c64 	ldr.w	r2, [r3, #-100]
 8000a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a28:	3b34      	subs	r3, #52	@ 0x34
 8000a2a:	f107 0108 	add.w	r1, r7, #8
 8000a2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000a32:	3830      	subs	r0, #48	@ 0x30
 8000a34:	f005 fd4c 	bl	80064d0 <f_read>
    sprintf(TxBuffer, "simon says %s \n", RW_Buffer);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4924      	ldr	r1, [pc, #144]	@ (8000ad0 <SD_Card_Foo+0x1f8>)
 8000a40:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000a42:	f006 fc27 	bl	8007294 <siprintf>
    UART_Print(TxBuffer);
 8000a46:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000a48:	f7ff fdb2 	bl	80005b0 <UART_Print>
    f_close(&Fil);
 8000a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a50:	3b30      	subs	r3, #48	@ 0x30
 8000a52:	4618      	mov	r0, r3
 8000a54:	f006 f8ad 	bl	8006bb2 <f_close>

    } while(0);
   	  //------------------[ Test Complete! Unmount The SD Card ]--------------------
   	  FR_Status = f_mount(NULL, "", 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4918      	ldr	r1, [pc, #96]	@ (8000abc <SD_Card_Foo+0x1e4>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f005 fb29 	bl	80060b4 <f_mount>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000a68:	f102 0203 	add.w	r2, r2, #3
 8000a6c:	7013      	strb	r3, [r2, #0]
  	  if (FR_Status != FR_OK)
 8000a6e:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000a72:	f103 0303 	add.w	r3, r3, #3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00d      	beq.n	8000a98 <SD_Card_Foo+0x1c0>
      {
          sprintf(TxBuffer, "Whilst Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000a7c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000a80:	f103 0303 	add.w	r3, r3, #3
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4912      	ldr	r1, [pc, #72]	@ (8000ad4 <SD_Card_Foo+0x1fc>)
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000a8c:	f006 fc02 	bl	8007294 <siprintf>
          UART_Print(TxBuffer);
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000a92:	f7ff fd8d 	bl	80005b0 <UART_Print>
      } else{
          sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
          UART_Print(TxBuffer);
    }

}
 8000a96:	e006      	b.n	8000aa6 <SD_Card_Foo+0x1ce>
          sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000a98:	490f      	ldr	r1, [pc, #60]	@ (8000ad8 <SD_Card_Foo+0x200>)
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000a9c:	f006 fbfa 	bl	8007294 <siprintf>
          UART_Print(TxBuffer);
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <SD_Card_Foo+0x1e0>)
 8000aa2:	f7ff fd85 	bl	80005b0 <UART_Print>
}
 8000aa6:	bf00      	nop
 8000aa8:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	080084b4 	.word	0x080084b4
 8000ab8:	20000194 	.word	0x20000194
 8000abc:	080084dc 	.word	0x080084dc
 8000ac0:	080084e0 	.word	0x080084e0
 8000ac4:	0800850c 	.word	0x0800850c
 8000ac8:	08008530 	.word	0x08008530
 8000acc:	08008538 	.word	0x08008538
 8000ad0:	0800853c 	.word	0x0800853c
 8000ad4:	0800854c 	.word	0x0800854c
 8000ad8:	0800857c 	.word	0x0800857c

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f000 fb8a 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a59      	ldr	r2, [pc, #356]	@ (8000cbc <HAL_SPI_MspInit+0x184>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d15b      	bne.n	8000c12 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	4b58      	ldr	r3, [pc, #352]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a57      	ldr	r2, [pc, #348]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b55      	ldr	r3, [pc, #340]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	623b      	str	r3, [r7, #32]
 8000b74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	4b51      	ldr	r3, [pc, #324]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a50      	ldr	r2, [pc, #320]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a49      	ldr	r2, [pc, #292]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB4     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483e      	ldr	r0, [pc, #248]	@ (8000cc4 <HAL_SPI_MspInit+0x18c>)
 8000bca:	f000 fb6d 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be0:	2305      	movs	r3, #5
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4837      	ldr	r0, [pc, #220]	@ (8000cc8 <HAL_SPI_MspInit+0x190>)
 8000bec:	f000 fb5c 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482f      	ldr	r0, [pc, #188]	@ (8000cc8 <HAL_SPI_MspInit+0x190>)
 8000c0c:	f000 fb4c 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c10:	e04f      	b.n	8000cb2 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI3)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a2d      	ldr	r2, [pc, #180]	@ (8000ccc <HAL_SPI_MspInit+0x194>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d14a      	bne.n	8000cb2 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a18      	ldr	r2, [pc, #96]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_SPI_MspInit+0x188>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c70:	2301      	movs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <HAL_SPI_MspInit+0x190>)
 8000c8c:	f000 fb0c 	bl	80012a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_SPI_MspInit+0x18c>)
 8000cae:	f000 fafb 	bl	80012a8 <HAL_GPIO_Init>
}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	@ 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40003800 	.word	0x40003800
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40003c00 	.word	0x40003c00

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	@ (8000d54 <HAL_UART_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_UART_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <HAL_UART_MspInit+0x8c>)
 8000d46:	f000 faaf 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <SysTick_Handler+0x34>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <SysTick_Handler+0x18>
    Timer1--;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <SysTick_Handler+0x34>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <SysTick_Handler+0x34>)
 8000dca:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <SysTick_Handler+0x38>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <SysTick_Handler+0x2c>
    Timer2--;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Handler+0x38>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <SysTick_Handler+0x38>)
 8000dde:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f938 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200002a0 	.word	0x200002a0
 8000dec:	200002a2 	.word	0x200002a2

08000df0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
  }

  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e009      	b.n	8000e50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf1      	blt.n	8000e3c <_write+0x12>
  }
  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f006 fac6 	bl	800748c <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20000290 	.word	0x20000290
 8000f34:	20000628 	.word	0x20000628

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f006 fa85 	bl	8007498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fb23 	bl	80005d8 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000fa0:	08008dc4 	.word	0x08008dc4
  ldr r2, =_sbss
 8000fa4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fa8:	20000628 	.word	0x20000628

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f931 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fd80 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f93b 	bl	800128e <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001030:	f000 f911 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000294 	.word	0x20000294

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000294 	.word	0x20000294

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff47 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff5c 	bl	8001124 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb0 	bl	80011fc <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e165      	b.n	8001590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f040 8154 	bne.w	800158a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d005      	beq.n	80012fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b03      	cmp	r3, #3
 8001366:	d017      	beq.n	8001398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d123      	bne.n	80013ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80ae 	beq.w	800158a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b5d      	ldr	r3, [pc, #372]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b5a      	ldr	r3, [pc, #360]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144a:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <HAL_GPIO_Init+0x304>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	@ (80015b0 <HAL_GPIO_Init+0x308>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x21a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4e      	ldr	r2, [pc, #312]	@ (80015b4 <HAL_GPIO_Init+0x30c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x216>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4d      	ldr	r2, [pc, #308]	@ (80015b8 <HAL_GPIO_Init+0x310>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x212>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <HAL_GPIO_Init+0x314>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x20e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4b      	ldr	r2, [pc, #300]	@ (80015c0 <HAL_GPIO_Init+0x318>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x20a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_GPIO_Init+0x31c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x206>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a49      	ldr	r2, [pc, #292]	@ (80015c8 <HAL_GPIO_Init+0x320>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x202>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	@ (80015ac <HAL_GPIO_Init+0x304>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <HAL_GPIO_Init+0x324>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_GPIO_Init+0x324>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a26      	ldr	r2, [pc, #152]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_GPIO_Init+0x324>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f ae96 	bls.w	80012c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40013c00 	.word	0x40013c00

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fcc2 	bl	800107c <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff fcbe 	bl	800107c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f855 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fc22 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08008928 	.word	0x08008928
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000

080017e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0a9b      	lsrs	r3, r3, #10
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4903      	ldr	r1, [pc, #12]	@ (800180c <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	08008938 	.word	0x08008938

08001810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001814:	f7ff ffdc 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	0b5b      	lsrs	r3, r3, #13
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4903      	ldr	r1, [pc, #12]	@ (8001834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	08008938 	.word	0x08008938

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800183c:	b0ae      	sub	sp, #184	@ 0xb8
 800183e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185e:	4bcb      	ldr	r3, [pc, #812]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b0c      	cmp	r3, #12
 8001868:	f200 8206 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x440>
 800186c:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <HAL_RCC_GetSysClockFreq+0x3c>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	080018a9 	.word	0x080018a9
 8001878:	08001c79 	.word	0x08001c79
 800187c:	08001c79 	.word	0x08001c79
 8001880:	08001c79 	.word	0x08001c79
 8001884:	080018b1 	.word	0x080018b1
 8001888:	08001c79 	.word	0x08001c79
 800188c:	08001c79 	.word	0x08001c79
 8001890:	08001c79 	.word	0x08001c79
 8001894:	080018b9 	.word	0x080018b9
 8001898:	08001c79 	.word	0x08001c79
 800189c:	08001c79 	.word	0x08001c79
 80018a0:	08001c79 	.word	0x08001c79
 80018a4:	08001aa9 	.word	0x08001aa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x358>)
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80018ae:	e1e7      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018b6:	e1e3      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4bb4      	ldr	r3, [pc, #720]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c4:	4bb1      	ldr	r3, [pc, #708]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d071      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4bae      	ldr	r3, [pc, #696]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	0159      	lsls	r1, r3, #5
 8001904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001908:	0150      	lsls	r0, r2, #5
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4621      	mov	r1, r4
 8001910:	1a51      	subs	r1, r2, r1
 8001912:	6439      	str	r1, [r7, #64]	@ 0x40
 8001914:	4629      	mov	r1, r5
 8001916:	eb63 0301 	sbc.w	r3, r3, r1
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001928:	4649      	mov	r1, r9
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	4641      	mov	r1, r8
 800192e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001932:	4641      	mov	r1, r8
 8001934:	018a      	lsls	r2, r1, #6
 8001936:	4641      	mov	r1, r8
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800193c:	4649      	mov	r1, r9
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001950:	4649      	mov	r1, r9
 8001952:	00cb      	lsls	r3, r1, #3
 8001954:	4641      	mov	r1, r8
 8001956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800195a:	4641      	mov	r1, r8
 800195c:	00ca      	lsls	r2, r1, #3
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	4603      	mov	r3, r0
 8001964:	4622      	mov	r2, r4
 8001966:	189b      	adds	r3, r3, r2
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
 800196a:	462b      	mov	r3, r5
 800196c:	460a      	mov	r2, r1
 800196e:	eb42 0303 	adc.w	r3, r2, r3
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001980:	4629      	mov	r1, r5
 8001982:	024b      	lsls	r3, r1, #9
 8001984:	4621      	mov	r1, r4
 8001986:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800198a:	4621      	mov	r1, r4
 800198c:	024a      	lsls	r2, r1, #9
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001996:	2200      	movs	r2, #0
 8001998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800199c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80019a4:	f7fe fc8c 	bl	80002c0 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019b2:	e067      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b4:	4b75      	ldr	r3, [pc, #468]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80019c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019ce:	2300      	movs	r3, #0
 80019d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a08:	4649      	mov	r1, r9
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4641      	mov	r1, r8
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4641      	mov	r1, r8
 8001a18:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a36:	4692      	mov	sl, r2
 8001a38:	469b      	mov	fp, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	eb1a 0303 	adds.w	r3, sl, r3
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	462b      	mov	r3, r5
 8001a44:	eb4b 0303 	adc.w	r3, fp, r3
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a56:	4629      	mov	r1, r5
 8001a58:	028b      	lsls	r3, r1, #10
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a60:	4621      	mov	r1, r4
 8001a62:	028a      	lsls	r2, r1, #10
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a70:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a76:	f7fe fc23 	bl	80002c0 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a84:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001aa6:	e0eb      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab4:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d06b      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ad8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001adc:	4622      	mov	r2, r4
 8001ade:	462b      	mov	r3, r5
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0159      	lsls	r1, r3, #5
 8001aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aee:	0150      	lsls	r0, r2, #5
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4621      	mov	r1, r4
 8001af6:	1a51      	subs	r1, r2, r1
 8001af8:	61b9      	str	r1, [r7, #24]
 8001afa:	4629      	mov	r1, r5
 8001afc:	eb63 0301 	sbc.w	r3, r3, r1
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b0e:	4659      	mov	r1, fp
 8001b10:	018b      	lsls	r3, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b18:	4651      	mov	r1, sl
 8001b1a:	018a      	lsls	r2, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ebb2 0801 	subs.w	r8, r2, r1
 8001b22:	4659      	mov	r1, fp
 8001b24:	eb63 0901 	sbc.w	r9, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	4623      	mov	r3, r4
 8001b42:	eb18 0303 	adds.w	r3, r8, r3
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	462b      	mov	r3, r5
 8001b4a:	eb49 0303 	adc.w	r3, r9, r3
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	024b      	lsls	r3, r1, #9
 8001b60:	4621      	mov	r1, r4
 8001b62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b66:	4621      	mov	r1, r4
 8001b68:	024a      	lsls	r2, r1, #9
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b72:	2200      	movs	r2, #0
 8001b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b7c:	f7fe fba0 	bl	80002c0 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b8a:	e065      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x420>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001baa:	2300      	movs	r3, #0
 8001bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	0159      	lsls	r1, r3, #5
 8001bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc4:	0150      	lsls	r0, r2, #5
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4641      	mov	r1, r8
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001be4:	4659      	mov	r1, fp
 8001be6:	018b      	lsls	r3, r1, #6
 8001be8:	4651      	mov	r1, sl
 8001bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bee:	4651      	mov	r1, sl
 8001bf0:	018a      	lsls	r2, r1, #6
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	1a54      	subs	r4, r2, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	eb63 0501 	sbc.w	r5, r3, r1
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c40:	2200      	movs	r2, #0
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c4a:	f7fe fb39 	bl	80002c0 <__aeabi_uldivmod>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0f1b      	lsrs	r3, r3, #28
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c76:	e003      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	37b8      	adds	r7, #184	@ 0xb8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400

08001c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e28d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8083 	beq.w	8001dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cb8:	4b94      	ldr	r3, [pc, #592]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d019      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cc4:	4b91      	ldr	r3, [pc, #580]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cde:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b88      	ldr	r3, [pc, #544]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf6:	d10b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b84      	ldr	r3, [pc, #528]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05b      	beq.n	8001dbc <HAL_RCC_OscConfig+0x124>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e25a      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x90>
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0xb4>
 8001d32:	4b76      	ldr	r3, [pc, #472]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a75      	ldr	r2, [pc, #468]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a72      	ldr	r2, [pc, #456]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b6c      	ldr	r3, [pc, #432]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f986 	bl	800107c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff f982 	bl	800107c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	@ 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e21f      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xdc>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f972 	bl	800107c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f96e 	bl	800107c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e20b      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x104>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06f      	beq.n	8001eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dca:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de2:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1d3      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4937      	ldr	r1, [pc, #220]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f91b 	bl	800107c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f917 	bl	800107c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1b4      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4925      	ldr	r1, [pc, #148]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8fa 	bl	800107c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f8f6 	bl	800107c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e193      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d036      	beq.n	8001f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f8da 	bl	800107c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f8d6 	bl	800107c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e173      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x234>
 8001eea:	e01b      	b.n	8001f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f8c3 	bl	800107c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	e00e      	b.n	8001f18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff f8bf 	bl	800107c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d907      	bls.n	8001f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e15c      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	42470000 	.word	0x42470000
 8001f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ea      	bne.n	8001efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8097 	beq.w	8002060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b83      	ldr	r3, [pc, #524]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b7f      	ldr	r3, [pc, #508]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b79      	ldr	r3, [pc, #484]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f87f 	bl	800107c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff f87b 	bl	800107c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e118      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x31e>
 8001fa8:	4b66      	ldr	r3, [pc, #408]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a65      	ldr	r2, [pc, #404]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x340>
 8001fbe:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	4a60      	ldr	r2, [pc, #384]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fca:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a5d      	ldr	r2, [pc, #372]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fdc:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe4:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f840 	bl	800107c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff f83c 	bl	800107c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0d7      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ee      	beq.n	8002000 <HAL_RCC_OscConfig+0x368>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f82a 	bl	800107c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f826 	bl	800107c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0c1      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ee      	bne.n	800202c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a3a      	ldr	r2, [pc, #232]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ad 	beq.w	80021c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d060      	beq.n	8002138 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d145      	bne.n	800210a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fffa 	bl	800107c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fff6 	bl	800107c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e093      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	071b      	lsls	r3, r3, #28
 80020d6:	491b      	ldr	r1, [pc, #108]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe ffcb 	bl	800107c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe ffc7 	bl	800107c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e064      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x452>
 8002108:	e05c      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe ffb4 	bl	800107c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe ffb0 	bl	800107c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x480>
 8002136:	e045      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_RCC_OscConfig+0x538>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d030      	beq.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d129      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d122      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d119      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d10f      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07b      	b.n	80022de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021f6:	d009      	beq.n	800220c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	e005      	b.n	800220c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fc86 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0104 	and.w	r1, r3, #4
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	f003 0210 	and.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_SPI_Transmit+0x22>
 8002304:	2302      	movs	r3, #2
 8002306:	e12d      	b.n	8002564 <HAL_SPI_Transmit+0x27e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002310:	f7fe feb4 	bl	800107c <HAL_GetTick>
 8002314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d002      	beq.n	800232c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800232a:	e116      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x52>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800233c:	e10d      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002384:	d10f      	bne.n	80023a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b0:	2b40      	cmp	r3, #64	@ 0x40
 80023b2:	d007      	beq.n	80023c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023cc:	d14f      	bne.n	800246e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_SPI_Transmit+0xf6>
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d142      	bne.n	8002462 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002400:	e02f      	b.n	8002462 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d112      	bne.n	8002436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002434:	e015      	b.n	8002462 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe fe21 	bl	800107c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Transmit+0x168>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Transmit+0x16e>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002460:	e07b      	b.n	800255a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ca      	bne.n	8002402 <HAL_SPI_Transmit+0x11c>
 800246c:	e050      	b.n	8002510 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_SPI_Transmit+0x196>
 8002476:	8afb      	ldrh	r3, [r7, #22]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d144      	bne.n	8002506 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024a2:	e030      	b.n	8002506 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d113      	bne.n	80024da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024d8:	e015      	b.n	8002506 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024da:	f7fe fdcf 	bl	800107c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d803      	bhi.n	80024f2 <HAL_SPI_Transmit+0x20c>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f0:	d102      	bne.n	80024f8 <HAL_SPI_Transmit+0x212>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002504:	e029      	b.n	800255a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1c9      	bne.n	80024a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fa61 	bl	80029dc <SPI_EndRxTxTransaction>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	77fb      	strb	r3, [r7, #31]
 8002550:	e003      	b.n	800255a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002562:	7ffb      	ldrb	r3, [r7, #31]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	@ 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800257a:	2301      	movs	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_SPI_TransmitReceive+0x26>
 800258e:	2302      	movs	r3, #2
 8002590:	e198      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x358>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800259a:	f7fe fd6f 	bl	800107c <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d00f      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x70>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025c2:	d107      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x68>
 80025cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d003      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80025da:	e16d      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_SPI_TransmitReceive+0x82>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_TransmitReceive+0x82>
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80025f4:	e160      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d003      	beq.n	800260a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2205      	movs	r2, #5
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264a:	2b40      	cmp	r3, #64	@ 0x40
 800264c:	d007      	beq.n	800265e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002666:	d17c      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_SPI_TransmitReceive+0x10a>
 8002670:	8b7b      	ldrh	r3, [r7, #26]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d16a      	bne.n	800274c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	1c9a      	adds	r2, r3, #2
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269a:	e057      	b.n	800274c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d11b      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x176>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d016      	beq.n	80026e2 <HAL_SPI_TransmitReceive+0x176>
 80026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d113      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	1c9a      	adds	r2, r3, #2
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d119      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1b8>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d014      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	b292      	uxth	r2, r2
 8002706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	1c9a      	adds	r2, r3, #2
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002724:	f7fe fcaa 	bl	800107c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002730:	429a      	cmp	r2, r3
 8002732:	d80b      	bhi.n	800274c <HAL_SPI_TransmitReceive+0x1e0>
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800273a:	d007      	beq.n	800274c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800274a:	e0b5      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1a2      	bne.n	800269c <HAL_SPI_TransmitReceive+0x130>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d19d      	bne.n	800269c <HAL_SPI_TransmitReceive+0x130>
 8002760:	e080      	b.n	8002864 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x204>
 800276a:	8b7b      	ldrh	r3, [r7, #26]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d16f      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002796:	e05b      	b.n	8002850 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d11c      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x274>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d017      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x274>
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d114      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d119      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2b6>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d014      	beq.n	8002822 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800281e:	2301      	movs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002822:	f7fe fc2b 	bl	800107c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800282e:	429a      	cmp	r2, r3
 8002830:	d803      	bhi.n	800283a <HAL_SPI_TransmitReceive+0x2ce>
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002838:	d102      	bne.n	8002840 <HAL_SPI_TransmitReceive+0x2d4>
 800283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800284e:	e033      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d19e      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x22c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d199      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f8b7 	bl	80029dc <SPI_EndRxTxTransaction>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002880:	e01a      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ae:	e003      	b.n	80028b8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80028c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3730      	adds	r7, #48	@ 0x30
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028dc:	f7fe fbce 	bl	800107c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ec:	f7fe fbc6 	bl	800107c <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f2:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002902:	e054      	b.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800290a:	d050      	beq.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290c:	f7fe fbb6 	bl	800107c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d902      	bls.n	8002922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13d      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800293a:	d111      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002944:	d004      	beq.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294e:	d107      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002968:	d10f      	bne.n	800298a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e017      	b.n	80029ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d19b      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000000 	.word	0x20000000

080029dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2201      	movs	r2, #1
 80029f0:	2102      	movs	r1, #2
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff6a 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e032      	b.n	8002a74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <SPI_EndRxTxTransaction+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <SPI_EndRxTxTransaction+0xa4>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	0d5b      	lsrs	r3, r3, #21
 8002a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2c:	d112      	bne.n	8002a54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff ff47 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d016      	beq.n	8002a72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e00f      	b.n	8002a74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6a:	2b80      	cmp	r3, #128	@ 0x80
 8002a6c:	d0f2      	beq.n	8002a54 <SPI_EndRxTxTransaction+0x78>
 8002a6e:	e000      	b.n	8002a72 <SPI_EndRxTxTransaction+0x96>
        break;
 8002a70:	bf00      	nop
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	165e9f81 	.word	0x165e9f81

08002a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e042      	b.n	8002b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f910 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	@ 0x24
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f973 	bl	8002db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d175      	bne.n	8002c30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Transmit+0x2c>
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e06e      	b.n	8002c32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2221      	movs	r2, #33	@ 0x21
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b62:	f7fe fa8b 	bl	800107c <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7c:	d108      	bne.n	8002b90 <HAL_UART_Transmit+0x6c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d104      	bne.n	8002b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e003      	b.n	8002b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b98:	e02e      	b.n	8002bf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2180      	movs	r1, #128	@ 0x80
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f848 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e03a      	b.n	8002c32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e007      	b.n	8002bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1cb      	bne.n	8002b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2140      	movs	r1, #64	@ 0x40
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f814 	bl	8002c3a <UART_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e006      	b.n	8002c32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4a:	e03b      	b.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c52:	d037      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe fa12 	bl	800107c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	6a3a      	ldr	r2, [r7, #32]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e03a      	b.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d023      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d020      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b40      	cmp	r3, #64	@ 0x40
 8002c86:	d01d      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d116      	bne.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f81d 	bl	8002cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e00f      	b.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0b4      	beq.n	8002c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b095      	sub	sp, #84	@ 0x54
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d14:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3314      	adds	r3, #20
 8002d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3314      	adds	r3, #20
 8002d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e5      	bne.n	8002d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d119      	bne.n	8002d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0310 	bic.w	r3, r3, #16
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d84:	61ba      	str	r2, [r7, #24]
 8002d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d88:	6979      	ldr	r1, [r7, #20]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	613b      	str	r3, [r7, #16]
   return(result);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e5      	bne.n	8002d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002da6:	bf00      	nop
 8002da8:	3754      	adds	r7, #84	@ 0x54
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b0c0      	sub	sp, #256	@ 0x100
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	ea40 0301 	orr.w	r3, r0, r1
 8002ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e0c:	f021 010c 	bic.w	r1, r1, #12
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2e:	6999      	ldr	r1, [r3, #24]
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	ea40 0301 	orr.w	r3, r0, r1
 8002e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8f      	ldr	r3, [pc, #572]	@ (8003080 <UART_SetConfig+0x2cc>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d005      	beq.n	8002e54 <UART_SetConfig+0xa0>
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003084 <UART_SetConfig+0x2d0>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d104      	bne.n	8002e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7fe fcdc 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
 8002e58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e5c:	e003      	b.n	8002e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e5e:	f7fe fcc3 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 8002e62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e70:	f040 810c 	bne.w	800308c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e86:	4622      	mov	r2, r4
 8002e88:	462b      	mov	r3, r5
 8002e8a:	1891      	adds	r1, r2, r2
 8002e8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e8e:	415b      	adcs	r3, r3
 8002e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e96:	4621      	mov	r1, r4
 8002e98:	eb12 0801 	adds.w	r8, r2, r1
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb6:	4690      	mov	r8, r2
 8002eb8:	4699      	mov	r9, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	eb18 0303 	adds.w	r3, r8, r3
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	eb49 0303 	adc.w	r3, r9, r3
 8002eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	18db      	adds	r3, r3, r3
 8002ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ee8:	4613      	mov	r3, r2
 8002eea:	eb42 0303 	adc.w	r3, r2, r3
 8002eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ef8:	f7fd f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <UART_SetConfig+0x2d4>)
 8002f02:	fba3 2302 	umull	r2, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	011c      	lsls	r4, r3, #4
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f24:	415b      	adcs	r3, r3
 8002f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0b01 	adc.w	fp, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f4c:	4692      	mov	sl, r2
 8002f4e:	469b      	mov	fp, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	eb1a 0303 	adds.w	r3, sl, r3
 8002f56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	18db      	adds	r3, r3, r3
 8002f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f7e:	4613      	mov	r3, r2
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f8e:	f7fd f997 	bl	80002c0 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2264      	movs	r2, #100	@ 0x64
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	1acb      	subs	r3, r1, r3
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fae:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <UART_SetConfig+0x2d4>)
 8002fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fbc:	441c      	add	r4, r3
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	1851      	adds	r1, r2, r1
 8002fe4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	00cb      	lsls	r3, r1, #3
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003002:	4651      	mov	r1, sl
 8003004:	00ca      	lsls	r2, r1, #3
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	4603      	mov	r3, r0
 800300c:	4642      	mov	r2, r8
 800300e:	189b      	adds	r3, r3, r2
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003014:	464b      	mov	r3, r9
 8003016:	460a      	mov	r2, r1
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800302c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003034:	460b      	mov	r3, r1
 8003036:	18db      	adds	r3, r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303a:	4613      	mov	r3, r2
 800303c:	eb42 0303 	adc.w	r3, r2, r3
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800304a:	f7fd f939 	bl	80002c0 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <UART_SetConfig+0x2d4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	@ 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3332      	adds	r3, #50	@ 0x32
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <UART_SetConfig+0x2d4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4422      	add	r2, r4
 800307a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800307c:	e106      	b.n	800328c <UART_SetConfig+0x4d8>
 800307e:	bf00      	nop
 8003080:	40011000 	.word	0x40011000
 8003084:	40011400 	.word	0x40011400
 8003088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003096:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800309a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800309e:	4642      	mov	r2, r8
 80030a0:	464b      	mov	r3, r9
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	6239      	str	r1, [r7, #32]
 80030a6:	415b      	adcs	r3, r3
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ae:	4641      	mov	r1, r8
 80030b0:	1854      	adds	r4, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb43 0501 	adc.w	r5, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	00eb      	lsls	r3, r5, #3
 80030c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c6:	00e2      	lsls	r2, r4, #3
 80030c8:	4614      	mov	r4, r2
 80030ca:	461d      	mov	r5, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	18e3      	adds	r3, r4, r3
 80030d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030d4:	464b      	mov	r3, r9
 80030d6:	eb45 0303 	adc.w	r3, r5, r3
 80030da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030fa:	4629      	mov	r1, r5
 80030fc:	008b      	lsls	r3, r1, #2
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003104:	4621      	mov	r1, r4
 8003106:	008a      	lsls	r2, r1, #2
 8003108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800310c:	f7fd f8d8 	bl	80002c0 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4b60      	ldr	r3, [pc, #384]	@ (8003298 <UART_SetConfig+0x4e4>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011c      	lsls	r4, r3, #4
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800312c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	61b9      	str	r1, [r7, #24]
 8003138:	415b      	adcs	r3, r3
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	4641      	mov	r1, r8
 8003142:	1851      	adds	r1, r2, r1
 8003144:	6139      	str	r1, [r7, #16]
 8003146:	4649      	mov	r1, r9
 8003148:	414b      	adcs	r3, r1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003158:	4659      	mov	r1, fp
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4651      	mov	r1, sl
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4642      	mov	r2, r8
 800316e:	189b      	adds	r3, r3, r2
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003174:	464b      	mov	r3, r9
 8003176:	460a      	mov	r2, r1
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800318a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003198:	4649      	mov	r1, r9
 800319a:	008b      	lsls	r3, r1, #2
 800319c:	4641      	mov	r1, r8
 800319e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a2:	4641      	mov	r1, r8
 80031a4:	008a      	lsls	r2, r1, #2
 80031a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031aa:	f7fd f889 	bl	80002c0 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	4b38      	ldr	r3, [pc, #224]	@ (8003298 <UART_SetConfig+0x4e4>)
 80031b6:	fba3 2301 	umull	r2, r3, r3, r1
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2264      	movs	r2, #100	@ 0x64
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	1acb      	subs	r3, r1, r3
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	3332      	adds	r3, #50	@ 0x32
 80031c8:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <UART_SetConfig+0x4e4>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d4:	441c      	add	r4, r3
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80031de:	677a      	str	r2, [r7, #116]	@ 0x74
 80031e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031e4:	4642      	mov	r2, r8
 80031e6:	464b      	mov	r3, r9
 80031e8:	1891      	adds	r1, r2, r2
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	415b      	adcs	r3, r3
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f4:	4641      	mov	r1, r8
 80031f6:	1851      	adds	r1, r2, r1
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	4649      	mov	r1, r9
 80031fc:	414b      	adcs	r3, r1
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800320c:	4659      	mov	r1, fp
 800320e:	00cb      	lsls	r3, r1, #3
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003216:	4651      	mov	r1, sl
 8003218:	00ca      	lsls	r2, r1, #3
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	4603      	mov	r3, r0
 8003220:	4642      	mov	r2, r8
 8003222:	189b      	adds	r3, r3, r2
 8003224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003226:	464b      	mov	r3, r9
 8003228:	460a      	mov	r2, r1
 800322a:	eb42 0303 	adc.w	r3, r2, r3
 800322e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	663b      	str	r3, [r7, #96]	@ 0x60
 800323a:	667a      	str	r2, [r7, #100]	@ 0x64
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003248:	4649      	mov	r1, r9
 800324a:	008b      	lsls	r3, r1, #2
 800324c:	4641      	mov	r1, r8
 800324e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003252:	4641      	mov	r1, r8
 8003254:	008a      	lsls	r2, r1, #2
 8003256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800325a:	f7fd f831 	bl	80002c0 <__aeabi_uldivmod>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <UART_SetConfig+0x4e4>)
 8003264:	fba3 1302 	umull	r1, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	2164      	movs	r1, #100	@ 0x64
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	3332      	adds	r3, #50	@ 0x32
 8003276:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <UART_SetConfig+0x4e4>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4422      	add	r2, r4
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003292:	46bd      	mov	sp, r7
 8003294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003298:	51eb851f 	.word	0x51eb851f

0800329c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <MX_FATFS_Init+0x18>)
 80032a2:	4805      	ldr	r0, [pc, #20]	@ (80032b8 <MX_FATFS_Init+0x1c>)
 80032a4:	f003 ff20 	bl	80070e8 <FATFS_LinkDriver>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <MX_FATFS_Init+0x20>)
 80032ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	2000029c 	.word	0x2000029c
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	20000298 	.word	0x20000298

080032c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f9fd 	bl	80036dc <SD_disk_initialize>
 80032e2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fad5 	bl	80038a8 <SD_disk_status>
 80032fe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003318:	7bf8      	ldrb	r0, [r7, #15]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	f000 fad8 	bl	80038d4 <SD_disk_read>
 8003324:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4603      	mov	r3, r0
 800333c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800333e:	7bf8      	ldrb	r0, [r7, #15]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	f000 fb2f 	bl	80039a8 <SD_disk_write>
 800334a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	603a      	str	r2, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	460b      	mov	r3, r1
 8003362:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003364:	79b9      	ldrb	r1, [r7, #6]
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fba0 	bl	8003ab0 <SD_disk_ioctl>
 8003370:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	2101      	movs	r1, #1
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <SELECT+0x14>)
 8003386:	f7fe f923 	bl	80015d0 <HAL_GPIO_WritePin>
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40020000 	.word	0x40020000

08003394 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003398:	2201      	movs	r2, #1
 800339a:	2101      	movs	r1, #1
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <DESELECT+0x14>)
 800339e:	f7fe f917 	bl	80015d0 <HAL_GPIO_WritePin>
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40020000 	.word	0x40020000

080033ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80033b6:	bf00      	nop
 80033b8:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <SPI_TxByte+0x30>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d1f8      	bne.n	80033b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80033c6:	1df9      	adds	r1, r7, #7
 80033c8:	2364      	movs	r3, #100	@ 0x64
 80033ca:	2201      	movs	r2, #1
 80033cc:	4803      	ldr	r0, [pc, #12]	@ (80033dc <SPI_TxByte+0x30>)
 80033ce:	f7fe ff8a 	bl	80022e6 <HAL_SPI_Transmit>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200000f4 	.word	0x200000f4

080033e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80033ec:	bf00      	nop
 80033ee:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <SPI_TxBuffer+0x30>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d1f8      	bne.n	80033ee <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80033fc:	887a      	ldrh	r2, [r7, #2]
 80033fe:	2364      	movs	r3, #100	@ 0x64
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4803      	ldr	r0, [pc, #12]	@ (8003410 <SPI_TxBuffer+0x30>)
 8003404:	f7fe ff6f 	bl	80022e6 <HAL_SPI_Transmit>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200000f4 	.word	0x200000f4

08003414 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800341a:	23ff      	movs	r3, #255	@ 0xff
 800341c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800341e:	bf00      	nop
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <SPI_RxByte+0x34>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d1f8      	bne.n	8003420 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800342e:	1dba      	adds	r2, r7, #6
 8003430:	1df9      	adds	r1, r7, #7
 8003432:	2364      	movs	r3, #100	@ 0x64
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2301      	movs	r3, #1
 8003438:	4803      	ldr	r0, [pc, #12]	@ (8003448 <SPI_RxByte+0x34>)
 800343a:	f7ff f897 	bl	800256c <HAL_SPI_TransmitReceive>
  return data;
 800343e:	79bb      	ldrb	r3, [r7, #6]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000f4 	.word	0x200000f4

0800344c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003454:	f7ff ffde 	bl	8003414 <SPI_RxByte>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	701a      	strb	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <SD_ReadyWait+0x30>)
 8003470:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003474:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003476:	f7ff ffcd 	bl	8003414 <SPI_RxByte>
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2bff      	cmp	r3, #255	@ 0xff
 8003482:	d003      	beq.n	800348c <SD_ReadyWait+0x24>
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <SD_ReadyWait+0x30>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f4      	bne.n	8003476 <SD_ReadyWait+0xe>
  return res;
 800348c:	79fb      	ldrb	r3, [r7, #7]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200002a2 	.word	0x200002a2

0800349c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80034a2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80034a6:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80034a8:	f7ff ff74 	bl	8003394 <DESELECT>
  for(int i = 0; i < 10; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	e005      	b.n	80034be <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80034b2:	20ff      	movs	r0, #255	@ 0xff
 80034b4:	f7ff ff7a 	bl	80033ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b09      	cmp	r3, #9
 80034c2:	ddf6      	ble.n	80034b2 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80034c4:	f7ff ff5a 	bl	800337c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80034c8:	2340      	movs	r3, #64	@ 0x40
 80034ca:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80034dc:	2395      	movs	r3, #149	@ 0x95
 80034de:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80034e0:	463b      	mov	r3, r7
 80034e2:	2106      	movs	r1, #6
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff7b 	bl	80033e0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80034ea:	e002      	b.n	80034f2 <SD_PowerOn+0x56>
  {
    cnt--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80034f2:	f7ff ff8f 	bl	8003414 <SPI_RxByte>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d002      	beq.n	8003502 <SD_PowerOn+0x66>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f4      	bne.n	80034ec <SD_PowerOn+0x50>
  }
  DESELECT();
 8003502:	f7ff ff47 	bl	8003394 <DESELECT>
  SPI_TxByte(0XFF);
 8003506:	20ff      	movs	r0, #255	@ 0xff
 8003508:	f7ff ff50 	bl	80033ac <SPI_TxByte>
  PowerFlag = 1;
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <SD_PowerOn+0x80>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200002a5 	.word	0x200002a5

08003520 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <SD_PowerOff+0x14>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	200002a5 	.word	0x200002a5

08003538 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800353c:	4b03      	ldr	r3, [pc, #12]	@ (800354c <SD_CheckPower+0x14>)
 800353e:	781b      	ldrb	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	200002a5 	.word	0x200002a5

08003550 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <SD_RxDataBlock+0x58>)
 800355c:	22c8      	movs	r2, #200	@ 0xc8
 800355e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8003560:	f7ff ff58 	bl	8003414 <SPI_RxByte>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d103      	bne.n	8003576 <SD_RxDataBlock+0x26>
 800356e:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <SD_RxDataBlock+0x58>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f4      	bne.n	8003560 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2bfe      	cmp	r3, #254	@ 0xfe
 800357a:	d001      	beq.n	8003580 <SD_RxDataBlock+0x30>
 800357c:	2300      	movs	r3, #0
 800357e:	e00f      	b.n	80035a0 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff60 	bl	800344c <SPI_RxBytePtr>
  } while(len--);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	603a      	str	r2, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f4      	bne.n	8003580 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8003596:	f7ff ff3d 	bl	8003414 <SPI_RxByte>
  SPI_RxByte();
 800359a:	f7ff ff3b 	bl	8003414 <SPI_RxByte>
  return TRUE;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200002a0 	.word	0x200002a0

080035ac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80035bc:	f7ff ff54 	bl	8003468 <SD_ReadyWait>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2bff      	cmp	r3, #255	@ 0xff
 80035c4:	d001      	beq.n	80035ca <SD_TxDataBlock+0x1e>
 80035c6:	2300      	movs	r3, #0
 80035c8:	e02f      	b.n	800362a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff feed 	bl	80033ac <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	2bfd      	cmp	r3, #253	@ 0xfd
 80035d6:	d020      	beq.n	800361a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80035d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff feff 	bl	80033e0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80035e2:	f7ff ff17 	bl	8003414 <SPI_RxByte>
    SPI_RxByte();
 80035e6:	f7ff ff15 	bl	8003414 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80035ea:	e00b      	b.n	8003604 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80035ec:	f7ff ff12 	bl	8003414 <SPI_RxByte>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d006      	beq.n	800360c <SD_TxDataBlock+0x60>
      i++;
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	3301      	adds	r3, #1
 8003602:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d9f0      	bls.n	80035ec <SD_TxDataBlock+0x40>
 800360a:	e000      	b.n	800360e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800360c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800360e:	bf00      	nop
 8003610:	f7ff ff00 	bl	8003414 <SPI_RxByte>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0fa      	beq.n	8003610 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2b05      	cmp	r3, #5
 8003622:	d101      	bne.n	8003628 <SD_TxDataBlock+0x7c>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <SD_TxDataBlock+0x7e>

  return FALSE;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	6039      	str	r1, [r7, #0]
 800363c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800363e:	f7ff ff13 	bl	8003468 <SD_ReadyWait>
 8003642:	4603      	mov	r3, r0
 8003644:	2bff      	cmp	r3, #255	@ 0xff
 8003646:	d001      	beq.n	800364c <SD_SendCmd+0x1a>
 8003648:	23ff      	movs	r3, #255	@ 0xff
 800364a:	e042      	b.n	80036d2 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff feac 	bl	80033ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	0e1b      	lsrs	r3, r3, #24
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fea6 	bl	80033ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	b2db      	uxtb	r3, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fea0 	bl	80033ac <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fe9a 	bl	80033ac <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fe95 	bl	80033ac <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d102      	bne.n	800368e <SD_SendCmd+0x5c>
 8003688:	2395      	movs	r3, #149	@ 0x95
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e007      	b.n	800369e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b48      	cmp	r3, #72	@ 0x48
 8003692:	d102      	bne.n	800369a <SD_SendCmd+0x68>
 8003694:	2387      	movs	r3, #135	@ 0x87
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e001      	b.n	800369e <SD_SendCmd+0x6c>
  else crc = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fe83 	bl	80033ac <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b4c      	cmp	r3, #76	@ 0x4c
 80036aa:	d101      	bne.n	80036b0 <SD_SendCmd+0x7e>
 80036ac:	f7ff feb2 	bl	8003414 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 80036b0:	230a      	movs	r3, #10
 80036b2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80036b4:	f7ff feae 	bl	8003414 <SPI_RxByte>
 80036b8:	4603      	mov	r3, r0
 80036ba:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80036bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da05      	bge.n	80036d0 <SD_SendCmd+0x9e>
 80036c4:	7bbb      	ldrb	r3, [r7, #14]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	73bb      	strb	r3, [r7, #14]
 80036ca:	7bbb      	ldrb	r3, [r7, #14]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f1      	bne.n	80036b4 <SD_SendCmd+0x82>

  return res;
 80036d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <SD_disk_initialize+0x14>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d1      	b.n	8003894 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80036f0:	4b6a      	ldr	r3, [pc, #424]	@ (800389c <SD_disk_initialize+0x1c0>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <SD_disk_initialize+0x2a>
 80036fe:	4b67      	ldr	r3, [pc, #412]	@ (800389c <SD_disk_initialize+0x1c0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e0c6      	b.n	8003894 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8003706:	f7ff fec9 	bl	800349c <SD_PowerOn>
  /* slave select */
  SELECT();
 800370a:	f7ff fe37 	bl	800337c <SELECT>
  /* check disk type */
  type = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003712:	2100      	movs	r1, #0
 8003714:	2040      	movs	r0, #64	@ 0x40
 8003716:	f7ff ff8c 	bl	8003632 <SD_SendCmd>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	f040 80a1 	bne.w	8003864 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <SD_disk_initialize+0x1c4>)
 8003724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003728:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800372a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800372e:	2048      	movs	r0, #72	@ 0x48
 8003730:	f7ff ff7f 	bl	8003632 <SD_SendCmd>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d155      	bne.n	80037e6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	e00c      	b.n	800375a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8003740:	7bfc      	ldrb	r4, [r7, #15]
 8003742:	f7ff fe67 	bl	8003414 <SPI_RxByte>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	f104 0310 	add.w	r3, r4, #16
 800374e:	443b      	add	r3, r7
 8003750:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	3301      	adds	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d9ef      	bls.n	8003740 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003760:	7abb      	ldrb	r3, [r7, #10]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d17e      	bne.n	8003864 <SD_disk_initialize+0x188>
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	2baa      	cmp	r3, #170	@ 0xaa
 800376a:	d17b      	bne.n	8003864 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800376c:	2100      	movs	r1, #0
 800376e:	2077      	movs	r0, #119	@ 0x77
 8003770:	f7ff ff5f 	bl	8003632 <SD_SendCmd>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d807      	bhi.n	800378a <SD_disk_initialize+0xae>
 800377a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800377e:	2069      	movs	r0, #105	@ 0x69
 8003780:	f7ff ff57 	bl	8003632 <SD_SendCmd>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800378a:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <SD_disk_initialize+0x1c4>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ec      	bne.n	800376c <SD_disk_initialize+0x90>
 8003792:	e000      	b.n	8003796 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003794:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003796:	4b42      	ldr	r3, [pc, #264]	@ (80038a0 <SD_disk_initialize+0x1c4>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d062      	beq.n	8003864 <SD_disk_initialize+0x188>
 800379e:	2100      	movs	r1, #0
 80037a0:	207a      	movs	r0, #122	@ 0x7a
 80037a2:	f7ff ff46 	bl	8003632 <SD_SendCmd>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d15b      	bne.n	8003864 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e00c      	b.n	80037cc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80037b2:	7bfc      	ldrb	r4, [r7, #15]
 80037b4:	f7ff fe2e 	bl	8003414 <SPI_RxByte>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	f104 0310 	add.w	r3, r4, #16
 80037c0:	443b      	add	r3, r7
 80037c2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	3301      	adds	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d9ef      	bls.n	80037b2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80037d2:	7a3b      	ldrb	r3, [r7, #8]
 80037d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <SD_disk_initialize+0x104>
 80037dc:	230c      	movs	r3, #12
 80037de:	e000      	b.n	80037e2 <SD_disk_initialize+0x106>
 80037e0:	2304      	movs	r3, #4
 80037e2:	73bb      	strb	r3, [r7, #14]
 80037e4:	e03e      	b.n	8003864 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80037e6:	2100      	movs	r1, #0
 80037e8:	2077      	movs	r0, #119	@ 0x77
 80037ea:	f7ff ff22 	bl	8003632 <SD_SendCmd>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d808      	bhi.n	8003806 <SD_disk_initialize+0x12a>
 80037f4:	2100      	movs	r1, #0
 80037f6:	2069      	movs	r0, #105	@ 0x69
 80037f8:	f7ff ff1b 	bl	8003632 <SD_SendCmd>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d801      	bhi.n	8003806 <SD_disk_initialize+0x12a>
 8003802:	2302      	movs	r3, #2
 8003804:	e000      	b.n	8003808 <SD_disk_initialize+0x12c>
 8003806:	2301      	movs	r3, #1
 8003808:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800380a:	7bbb      	ldrb	r3, [r7, #14]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10e      	bne.n	800382e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003810:	2100      	movs	r1, #0
 8003812:	2077      	movs	r0, #119	@ 0x77
 8003814:	f7ff ff0d 	bl	8003632 <SD_SendCmd>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d80e      	bhi.n	800383c <SD_disk_initialize+0x160>
 800381e:	2100      	movs	r1, #0
 8003820:	2069      	movs	r0, #105	@ 0x69
 8003822:	f7ff ff06 	bl	8003632 <SD_SendCmd>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <SD_disk_initialize+0x160>
 800382c:	e00c      	b.n	8003848 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800382e:	2100      	movs	r1, #0
 8003830:	2041      	movs	r0, #65	@ 0x41
 8003832:	f7ff fefe 	bl	8003632 <SD_SendCmd>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800383c:	4b18      	ldr	r3, [pc, #96]	@ (80038a0 <SD_disk_initialize+0x1c4>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e2      	bne.n	800380a <SD_disk_initialize+0x12e>
 8003844:	e000      	b.n	8003848 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003846:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003848:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <SD_disk_initialize+0x1c4>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <SD_disk_initialize+0x184>
 8003850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003854:	2050      	movs	r0, #80	@ 0x50
 8003856:	f7ff feec 	bl	8003632 <SD_SendCmd>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_disk_initialize+0x188>
 8003860:	2300      	movs	r3, #0
 8003862:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8003864:	4a0f      	ldr	r2, [pc, #60]	@ (80038a4 <SD_disk_initialize+0x1c8>)
 8003866:	7bbb      	ldrb	r3, [r7, #14]
 8003868:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800386a:	f7ff fd93 	bl	8003394 <DESELECT>
  SPI_RxByte();
 800386e:	f7ff fdd1 	bl	8003414 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <SD_disk_initialize+0x1c0>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	b2da      	uxtb	r2, r3
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <SD_disk_initialize+0x1c0>)
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e001      	b.n	800388e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800388a:	f7ff fe49 	bl	8003520 <SD_PowerOff>
  }
  return Stat;
 800388e:	4b03      	ldr	r3, [pc, #12]	@ (800389c <SD_disk_initialize+0x1c0>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	20000020 	.word	0x20000020
 80038a0:	200002a0 	.word	0x200002a0
 80038a4:	200002a4 	.word	0x200002a4

080038a8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <SD_disk_status+0x14>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e002      	b.n	80038c2 <SD_disk_status+0x1a>
  return Stat;
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <SD_disk_status+0x28>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b2db      	uxtb	r3, r3
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000020 	.word	0x20000020

080038d4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <SD_disk_read+0x1c>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <SD_disk_read+0x20>
 80038f0:	2304      	movs	r3, #4
 80038f2:	e051      	b.n	8003998 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80038f4:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <SD_disk_read+0xcc>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <SD_disk_read+0x32>
 8003902:	2303      	movs	r3, #3
 8003904:	e048      	b.n	8003998 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003906:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <SD_disk_read+0xd0>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <SD_disk_read+0x44>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	607b      	str	r3, [r7, #4]

  SELECT();
 8003918:	f7ff fd30 	bl	800337c <SELECT>

  if (count == 1)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d111      	bne.n	8003946 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	2051      	movs	r0, #81	@ 0x51
 8003926:	f7ff fe84 	bl	8003632 <SD_SendCmd>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d129      	bne.n	8003984 <SD_disk_read+0xb0>
 8003930:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f7ff fe0b 	bl	8003550 <SD_RxDataBlock>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d021      	beq.n	8003984 <SD_disk_read+0xb0>
 8003940:	2300      	movs	r3, #0
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	e01e      	b.n	8003984 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	2052      	movs	r0, #82	@ 0x52
 800394a:	f7ff fe72 	bl	8003632 <SD_SendCmd>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d117      	bne.n	8003984 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f7ff fdf9 	bl	8003550 <SD_RxDataBlock>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <SD_disk_read+0xa6>
        buff += 512;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800396a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ed      	bne.n	8003954 <SD_disk_read+0x80>
 8003978:	e000      	b.n	800397c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800397a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800397c:	2100      	movs	r1, #0
 800397e:	204c      	movs	r0, #76	@ 0x4c
 8003980:	f7ff fe57 	bl	8003632 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003984:	f7ff fd06 	bl	8003394 <DESELECT>
  SPI_RxByte();
 8003988:	f7ff fd44 	bl	8003414 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000020 	.word	0x20000020
 80039a4:	200002a4 	.word	0x200002a4

080039a8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <SD_disk_write+0x1c>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <SD_disk_write+0x20>
 80039c4:	2304      	movs	r3, #4
 80039c6:	e06b      	b.n	8003aa0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80039c8:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <SD_disk_write+0x100>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SD_disk_write+0x32>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e062      	b.n	8003aa0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80039da:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <SD_disk_write+0x100>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <SD_disk_write+0x44>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e059      	b.n	8003aa0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80039ec:	4b2f      	ldr	r3, [pc, #188]	@ (8003aac <SD_disk_write+0x104>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <SD_disk_write+0x56>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	607b      	str	r3, [r7, #4]

  SELECT();
 80039fe:	f7ff fcbd 	bl	800337c <SELECT>

  if (count == 1)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d110      	bne.n	8003a2a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	2058      	movs	r0, #88	@ 0x58
 8003a0c:	f7ff fe11 	bl	8003632 <SD_SendCmd>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d13a      	bne.n	8003a8c <SD_disk_write+0xe4>
 8003a16:	21fe      	movs	r1, #254	@ 0xfe
 8003a18:	68b8      	ldr	r0, [r7, #8]
 8003a1a:	f7ff fdc7 	bl	80035ac <SD_TxDataBlock>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d033      	beq.n	8003a8c <SD_disk_write+0xe4>
      count = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	e030      	b.n	8003a8c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <SD_disk_write+0x104>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003a36:	2100      	movs	r1, #0
 8003a38:	2077      	movs	r0, #119	@ 0x77
 8003a3a:	f7ff fdfa 	bl	8003632 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	2057      	movs	r0, #87	@ 0x57
 8003a42:	f7ff fdf6 	bl	8003632 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	2059      	movs	r0, #89	@ 0x59
 8003a4a:	f7ff fdf2 	bl	8003632 <SD_SendCmd>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11b      	bne.n	8003a8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003a54:	21fc      	movs	r1, #252	@ 0xfc
 8003a56:	68b8      	ldr	r0, [r7, #8]
 8003a58:	f7ff fda8 	bl	80035ac <SD_TxDataBlock>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <SD_disk_write+0xd0>
        buff += 512;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ee      	bne.n	8003a54 <SD_disk_write+0xac>
 8003a76:	e000      	b.n	8003a7a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003a78:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003a7a:	21fd      	movs	r1, #253	@ 0xfd
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7ff fd95 	bl	80035ac <SD_TxDataBlock>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <SD_disk_write+0xe4>
      {
        count = 1;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8003a8c:	f7ff fc82 	bl	8003394 <DESELECT>
  SPI_RxByte();
 8003a90:	f7ff fcc0 	bl	8003414 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000020 	.word	0x20000020
 8003aac:	200002a4 	.word	0x200002a4

08003ab0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b08b      	sub	sp, #44	@ 0x2c
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	603a      	str	r2, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
 8003abc:	460b      	mov	r3, r1
 8003abe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <SD_disk_ioctl+0x1e>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e113      	b.n	8003cf6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003ad4:	79bb      	ldrb	r3, [r7, #6]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d124      	bne.n	8003b24 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d012      	beq.n	8003b08 <SD_disk_ioctl+0x58>
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	dc1a      	bgt.n	8003b1c <SD_disk_ioctl+0x6c>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <SD_disk_ioctl+0x40>
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d006      	beq.n	8003afc <SD_disk_ioctl+0x4c>
 8003aee:	e015      	b.n	8003b1c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003af0:	f7ff fd16 	bl	8003520 <SD_PowerOff>
      res = RES_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003afa:	e0fa      	b.n	8003cf2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8003afc:	f7ff fcce 	bl	800349c <SD_PowerOn>
      res = RES_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b06:	e0f4      	b.n	8003cf2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	1c5c      	adds	r4, r3, #1
 8003b0c:	f7ff fd14 	bl	8003538 <SD_CheckPower>
 8003b10:	4603      	mov	r3, r0
 8003b12:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b1a:	e0ea      	b.n	8003cf2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b22:	e0e6      	b.n	8003cf2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003b24:	4b76      	ldr	r3, [pc, #472]	@ (8003d00 <SD_disk_ioctl+0x250>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0df      	b.n	8003cf6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003b36:	f7ff fc21 	bl	800337c <SELECT>
    switch (ctrl)
 8003b3a:	79bb      	ldrb	r3, [r7, #6]
 8003b3c:	2b0d      	cmp	r3, #13
 8003b3e:	f200 80c9 	bhi.w	8003cd4 <SD_disk_ioctl+0x224>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <SD_disk_ioctl+0x98>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003c3f 	.word	0x08003c3f
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003c2f 	.word	0x08003c2f
 8003b54:	08003cd5 	.word	0x08003cd5
 8003b58:	08003cd5 	.word	0x08003cd5
 8003b5c:	08003cd5 	.word	0x08003cd5
 8003b60:	08003cd5 	.word	0x08003cd5
 8003b64:	08003cd5 	.word	0x08003cd5
 8003b68:	08003cd5 	.word	0x08003cd5
 8003b6c:	08003cd5 	.word	0x08003cd5
 8003b70:	08003cd5 	.word	0x08003cd5
 8003b74:	08003c51 	.word	0x08003c51
 8003b78:	08003c75 	.word	0x08003c75
 8003b7c:	08003c99 	.word	0x08003c99
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003b80:	2100      	movs	r1, #0
 8003b82:	2049      	movs	r0, #73	@ 0x49
 8003b84:	f7ff fd55 	bl	8003632 <SD_SendCmd>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 80a6 	bne.w	8003cdc <SD_disk_ioctl+0x22c>
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	2110      	movs	r1, #16
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fcda 	bl	8003550 <SD_RxDataBlock>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 809c 	beq.w	8003cdc <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8003ba4:	7b3b      	ldrb	r3, [r7, #12]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003bae:	7d7b      	ldrb	r3, [r7, #21]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	7d3b      	ldrb	r3, [r7, #20]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003bc0:	8bfb      	ldrh	r3, [r7, #30]
 8003bc2:	029a      	lsls	r2, r3, #10
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e02d      	b.n	8003c26 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003bca:	7c7b      	ldrb	r3, [r7, #17]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	7dbb      	ldrb	r3, [r7, #22]
 8003bd4:	09db      	lsrs	r3, r3, #7
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	7d7b      	ldrb	r3, [r7, #21]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0306 	and.w	r3, r3, #6
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3302      	adds	r3, #2
 8003bee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003bf2:	7d3b      	ldrb	r3, [r7, #20]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	7cbb      	ldrb	r3, [r7, #18]
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003c18:	8bfa      	ldrh	r2, [r7, #30]
 8003c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c1e:	3b09      	subs	r3, #9
 8003c20:	409a      	lsls	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003c2c:	e056      	b.n	8003cdc <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c34:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c3c:	e055      	b.n	8003cea <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003c3e:	f7ff fc13 	bl	8003468 <SD_ReadyWait>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2bff      	cmp	r3, #255	@ 0xff
 8003c46:	d14b      	bne.n	8003ce0 <SD_disk_ioctl+0x230>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c4e:	e047      	b.n	8003ce0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003c50:	2100      	movs	r1, #0
 8003c52:	2049      	movs	r0, #73	@ 0x49
 8003c54:	f7ff fced 	bl	8003632 <SD_SendCmd>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d142      	bne.n	8003ce4 <SD_disk_ioctl+0x234>
 8003c5e:	2110      	movs	r1, #16
 8003c60:	6a38      	ldr	r0, [r7, #32]
 8003c62:	f7ff fc75 	bl	8003550 <SD_RxDataBlock>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03b      	beq.n	8003ce4 <SD_disk_ioctl+0x234>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c72:	e037      	b.n	8003ce4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003c74:	2100      	movs	r1, #0
 8003c76:	204a      	movs	r0, #74	@ 0x4a
 8003c78:	f7ff fcdb 	bl	8003632 <SD_SendCmd>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d132      	bne.n	8003ce8 <SD_disk_ioctl+0x238>
 8003c82:	2110      	movs	r1, #16
 8003c84:	6a38      	ldr	r0, [r7, #32]
 8003c86:	f7ff fc63 	bl	8003550 <SD_RxDataBlock>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02b      	beq.n	8003ce8 <SD_disk_ioctl+0x238>
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c96:	e027      	b.n	8003ce8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003c98:	2100      	movs	r1, #0
 8003c9a:	207a      	movs	r0, #122	@ 0x7a
 8003c9c:	f7ff fcc9 	bl	8003632 <SD_SendCmd>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cac:	e00b      	b.n	8003cc6 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8003cae:	6a3c      	ldr	r4, [r7, #32]
 8003cb0:	1c63      	adds	r3, r4, #1
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	f7ff fbae 	bl	8003414 <SPI_RxByte>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d9ef      	bls.n	8003cae <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003cda:	e006      	b.n	8003cea <SD_disk_ioctl+0x23a>
      break;
 8003cdc:	bf00      	nop
 8003cde:	e004      	b.n	8003cea <SD_disk_ioctl+0x23a>
      break;
 8003ce0:	bf00      	nop
 8003ce2:	e002      	b.n	8003cea <SD_disk_ioctl+0x23a>
      break;
 8003ce4:	bf00      	nop
 8003ce6:	e000      	b.n	8003cea <SD_disk_ioctl+0x23a>
      break;
 8003ce8:	bf00      	nop
    }
    DESELECT();
 8003cea:	f7ff fb53 	bl	8003394 <DESELECT>
    SPI_RxByte();
 8003cee:	f7ff fb91 	bl	8003414 <SPI_RxByte>
  }
  return res;
 8003cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	372c      	adds	r7, #44	@ 0x2c
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000020 	.word	0x20000020

08003d04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	4a08      	ldr	r2, [pc, #32]	@ (8003d34 <disk_status+0x30>)
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	79fa      	ldrb	r2, [r7, #7]
 8003d1c:	4905      	ldr	r1, [pc, #20]	@ (8003d34 <disk_status+0x30>)
 8003d1e:	440a      	add	r2, r1
 8003d20:	7a12      	ldrb	r2, [r2, #8]
 8003d22:	4610      	mov	r0, r2
 8003d24:	4798      	blx	r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200004d0 	.word	0x200004d0

08003d38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	4a0e      	ldr	r2, [pc, #56]	@ (8003d84 <disk_initialize+0x4c>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d114      	bne.n	8003d7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	4a0c      	ldr	r2, [pc, #48]	@ (8003d84 <disk_initialize+0x4c>)
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	79fa      	ldrb	r2, [r7, #7]
 8003d5e:	4909      	ldr	r1, [pc, #36]	@ (8003d84 <disk_initialize+0x4c>)
 8003d60:	440a      	add	r2, r1
 8003d62:	7a12      	ldrb	r2, [r2, #8]
 8003d64:	4610      	mov	r0, r2
 8003d66:	4798      	blx	r3
 8003d68:	4603      	mov	r3, r0
 8003d6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4a03      	ldr	r2, [pc, #12]	@ (8003d84 <disk_initialize+0x4c>)
 8003d76:	2101      	movs	r1, #1
 8003d78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200004d0 	.word	0x200004d0

08003d88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <disk_read+0x3c>)
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	689c      	ldr	r4, [r3, #8]
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	4a07      	ldr	r2, [pc, #28]	@ (8003dc4 <disk_read+0x3c>)
 8003da8:	4413      	add	r3, r2
 8003daa:	7a18      	ldrb	r0, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	47a0      	blx	r4
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200004d0 	.word	0x200004d0

08003dc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <disk_write+0x3c>)
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68dc      	ldr	r4, [r3, #12]
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	4a07      	ldr	r2, [pc, #28]	@ (8003e04 <disk_write+0x3c>)
 8003de8:	4413      	add	r3, r2
 8003dea:	7a18      	ldrb	r0, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	47a0      	blx	r4
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd90      	pop	{r4, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200004d0 	.word	0x200004d0

08003e08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	603a      	str	r2, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
 8003e14:	460b      	mov	r3, r1
 8003e16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <disk_ioctl+0x38>)
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	79fa      	ldrb	r2, [r7, #7]
 8003e26:	4906      	ldr	r1, [pc, #24]	@ (8003e40 <disk_ioctl+0x38>)
 8003e28:	440a      	add	r2, r1
 8003e2a:	7a10      	ldrb	r0, [r2, #8]
 8003e2c:	79b9      	ldrb	r1, [r7, #6]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4798      	blx	r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
  return res;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200004d0 	.word	0x200004d0

08003e44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	b21a      	sxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003e66:	89fb      	ldrh	r3, [r7, #14]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	3202      	adds	r2, #2
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	3201      	adds	r2, #1
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
	return rv;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	1c53      	adds	r3, r2, #1
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	6179      	str	r1, [r7, #20]
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f1      	bne.n	8003f62 <mem_cpy+0x1a>
	}
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	617a      	str	r2, [r7, #20]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f3      	bne.n	8003f9a <mem_set+0x10>
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	61fa      	str	r2, [r7, #28]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	61ba      	str	r2, [r7, #24]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	1acb      	subs	r3, r1, r3
 8003fec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <mem_cmp+0x40>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0eb      	beq.n	8003fd8 <mem_cmp+0x18>

	return r;
 8004000:	697b      	ldr	r3, [r7, #20]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004018:	e002      	b.n	8004020 <chk_chr+0x12>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3301      	adds	r3, #1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <chk_chr+0x26>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4293      	cmp	r3, r2
 8004032:	d1f2      	bne.n	800401a <chk_chr+0xc>
	return *str;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	781b      	ldrb	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e029      	b.n	80040ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004058:	4a27      	ldr	r2, [pc, #156]	@ (80040f8 <chk_lock+0xb4>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	4413      	add	r3, r2
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01d      	beq.n	80040a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004066:	4a24      	ldr	r2, [pc, #144]	@ (80040f8 <chk_lock+0xb4>)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d116      	bne.n	80040a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004078:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <chk_lock+0xb4>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004088:	429a      	cmp	r2, r3
 800408a:	d10c      	bne.n	80040a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800408c:	4a1a      	ldr	r2, [pc, #104]	@ (80040f8 <chk_lock+0xb4>)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	4413      	add	r3, r2
 8004094:	3308      	adds	r3, #8
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800409c:	429a      	cmp	r2, r3
 800409e:	d102      	bne.n	80040a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80040a0:	e007      	b.n	80040b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d9d2      	bls.n	8004058 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d109      	bne.n	80040cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <chk_lock+0x80>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d101      	bne.n	80040c8 <chk_lock+0x84>
 80040c4:	2300      	movs	r3, #0
 80040c6:	e010      	b.n	80040ea <chk_lock+0xa6>
 80040c8:	2312      	movs	r3, #18
 80040ca:	e00e      	b.n	80040ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <chk_lock+0xa0>
 80040d2:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <chk_lock+0xb4>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4413      	add	r3, r2
 80040da:	330c      	adds	r3, #12
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	d101      	bne.n	80040e8 <chk_lock+0xa4>
 80040e4:	2310      	movs	r3, #16
 80040e6:	e000      	b.n	80040ea <chk_lock+0xa6>
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	200002b0 	.word	0x200002b0

080040fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	e002      	b.n	800410e <enq_lock+0x12>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d806      	bhi.n	8004122 <enq_lock+0x26>
 8004114:	4a09      	ldr	r2, [pc, #36]	@ (800413c <enq_lock+0x40>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	4413      	add	r3, r2
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f2      	bne.n	8004108 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	200002b0 	.word	0x200002b0

08004140 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e01f      	b.n	8004190 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004150:	4a41      	ldr	r2, [pc, #260]	@ (8004258 <inc_lock+0x118>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	4413      	add	r3, r2
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d113      	bne.n	800418a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004162:	4a3d      	ldr	r2, [pc, #244]	@ (8004258 <inc_lock+0x118>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004172:	429a      	cmp	r2, r3
 8004174:	d109      	bne.n	800418a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004176:	4a38      	ldr	r2, [pc, #224]	@ (8004258 <inc_lock+0x118>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	3308      	adds	r3, #8
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004186:	429a      	cmp	r2, r3
 8004188:	d006      	beq.n	8004198 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d9dc      	bls.n	8004150 <inc_lock+0x10>
 8004196:	e000      	b.n	800419a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004198:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d132      	bne.n	8004206 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e002      	b.n	80041ac <inc_lock+0x6c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d806      	bhi.n	80041c0 <inc_lock+0x80>
 80041b2:	4a29      	ldr	r2, [pc, #164]	@ (8004258 <inc_lock+0x118>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f2      	bne.n	80041a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d101      	bne.n	80041ca <inc_lock+0x8a>
 80041c6:	2300      	movs	r3, #0
 80041c8:	e040      	b.n	800424c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4922      	ldr	r1, [pc, #136]	@ (8004258 <inc_lock+0x118>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	440b      	add	r3, r1
 80041d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	491e      	ldr	r1, [pc, #120]	@ (8004258 <inc_lock+0x118>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	440b      	add	r3, r1
 80041e4:	3304      	adds	r3, #4
 80041e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	491a      	ldr	r1, [pc, #104]	@ (8004258 <inc_lock+0x118>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	440b      	add	r3, r1
 80041f4:	3308      	adds	r3, #8
 80041f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <inc_lock+0x118>)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	4413      	add	r3, r2
 8004200:	330c      	adds	r3, #12
 8004202:	2200      	movs	r2, #0
 8004204:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <inc_lock+0xe0>
 800420c:	4a12      	ldr	r2, [pc, #72]	@ (8004258 <inc_lock+0x118>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	4413      	add	r3, r2
 8004214:	330c      	adds	r3, #12
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <inc_lock+0xe0>
 800421c:	2300      	movs	r3, #0
 800421e:	e015      	b.n	800424c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <inc_lock+0xf8>
 8004226:	4a0c      	ldr	r2, [pc, #48]	@ (8004258 <inc_lock+0x118>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	4413      	add	r3, r2
 800422e:	330c      	adds	r3, #12
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	e001      	b.n	800423c <inc_lock+0xfc>
 8004238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800423c:	4906      	ldr	r1, [pc, #24]	@ (8004258 <inc_lock+0x118>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	440b      	add	r3, r1
 8004244:	330c      	adds	r3, #12
 8004246:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	200002b0 	.word	0x200002b0

0800425c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d825      	bhi.n	80042bc <dec_lock+0x60>
		n = Files[i].ctr;
 8004270:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <dec_lock+0x74>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	330c      	adds	r3, #12
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004284:	d101      	bne.n	800428a <dec_lock+0x2e>
 8004286:	2300      	movs	r3, #0
 8004288:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800428a:	89fb      	ldrh	r3, [r7, #14]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <dec_lock+0x3a>
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	3b01      	subs	r3, #1
 8004294:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004296:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <dec_lock+0x74>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4413      	add	r3, r2
 800429e:	330c      	adds	r3, #12
 80042a0:	89fa      	ldrh	r2, [r7, #14]
 80042a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <dec_lock+0x5a>
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <dec_lock+0x74>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	737b      	strb	r3, [r7, #13]
 80042ba:	e001      	b.n	80042c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80042bc:	2302      	movs	r3, #2
 80042be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80042c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	200002b0 	.word	0x200002b0

080042d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e010      	b.n	8004304 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80042e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004318 <clear_lock+0x44>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d105      	bne.n	80042fe <clear_lock+0x2a>
 80042f2:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <clear_lock+0x44>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	4413      	add	r3, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d9eb      	bls.n	80042e2 <clear_lock+0xe>
	}
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	200002b0 	.word	0x200002b0

0800431c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	78db      	ldrb	r3, [r3, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d034      	beq.n	800439a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004334:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7858      	ldrb	r0, [r3, #1]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004340:	2301      	movs	r3, #1
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	f7ff fd40 	bl	8003dc8 <disk_write>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <sync_window+0x38>
			res = FR_DISK_ERR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	e022      	b.n	800439a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	429a      	cmp	r2, r3
 8004368:	d217      	bcs.n	800439a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e010      	b.n	8004394 <sync_window+0x78>
					wsect += fs->fsize;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	7858      	ldrb	r0, [r3, #1]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004386:	2301      	movs	r3, #1
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	f7ff fd1d 	bl	8003dc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3b01      	subs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d8eb      	bhi.n	8004372 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d01b      	beq.n	80043f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ffad 	bl	800431c <sync_window>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d113      	bne.n	80043f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	7858      	ldrb	r0, [r3, #1]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80043d6:	2301      	movs	r3, #1
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	f7ff fcd5 	bl	8003d88 <disk_read>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff87 	bl	800431c <sync_window>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d159      	bne.n	80044cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d149      	bne.n	80044b4 <sync_fs+0xb4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	791b      	ldrb	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d145      	bne.n	80044b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	899b      	ldrh	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	2100      	movs	r1, #0
 8004436:	f7ff fda8 	bl	8003f8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3338      	adds	r3, #56	@ 0x38
 800443e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004442:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fd37 	bl	8003eba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3338      	adds	r3, #56	@ 0x38
 8004450:	4921      	ldr	r1, [pc, #132]	@ (80044d8 <sync_fs+0xd8>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fd4c 	bl	8003ef0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3338      	adds	r3, #56	@ 0x38
 800445c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004460:	491e      	ldr	r1, [pc, #120]	@ (80044dc <sync_fs+0xdc>)
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fd44 	bl	8003ef0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3338      	adds	r3, #56	@ 0x38
 800446c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7ff fd3a 	bl	8003ef0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3338      	adds	r3, #56	@ 0x38
 8004480:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7ff fd30 	bl	8003ef0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7858      	ldrb	r0, [r3, #1]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a8:	2301      	movs	r3, #1
 80044aa:	f7ff fc8d 	bl	8003dc8 <disk_write>
			fs->fsi_flag = 0;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fca3 	bl	8003e08 <disk_ioctl>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <sync_fs+0xcc>
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	41615252 	.word	0x41615252
 80044dc:	61417272 	.word	0x61417272

080044e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	3b02      	subs	r3, #2
 80044ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	3b02      	subs	r3, #2
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d301      	bcc.n	8004500 <clust2sect+0x20>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e008      	b.n	8004512 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	895b      	ldrh	r3, [r3, #10]
 8004504:	461a      	mov	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	fb03 f202 	mul.w	r2, r3, r2
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	4413      	add	r3, r2
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d904      	bls.n	800453e <get_fat+0x20>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <get_fat+0x26>
		val = 1;	/* Internal error */
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e0ba      	b.n	80046ba <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004548:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b03      	cmp	r3, #3
 8004550:	f000 8082 	beq.w	8004658 <get_fat+0x13a>
 8004554:	2b03      	cmp	r3, #3
 8004556:	f300 80a6 	bgt.w	80046a6 <get_fat+0x188>
 800455a:	2b01      	cmp	r3, #1
 800455c:	d002      	beq.n	8004564 <get_fat+0x46>
 800455e:	2b02      	cmp	r3, #2
 8004560:	d055      	beq.n	800460e <get_fat+0xf0>
 8004562:	e0a0      	b.n	80046a6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	899b      	ldrh	r3, [r3, #12]
 800457a:	4619      	mov	r1, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004582:	4413      	add	r3, r2
 8004584:	4619      	mov	r1, r3
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f7ff ff0c 	bl	80043a4 <move_window>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 808c 	bne.w	80046ac <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	60fa      	str	r2, [r7, #12]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	8992      	ldrh	r2, [r2, #12]
 800459e:	fbb3 f1f2 	udiv	r1, r3, r2
 80045a2:	fb01 f202 	mul.w	r2, r1, r2
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	899b      	ldrh	r3, [r3, #12]
 80045ba:	4619      	mov	r1, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c2:	4413      	add	r3, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f7ff feec 	bl	80043a4 <move_window>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d16e      	bne.n	80046b0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	899b      	ldrh	r3, [r3, #12]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	fbb3 f1f2 	udiv	r1, r3, r2
 80045de:	fb01 f202 	mul.w	r2, r1, r2
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <get_fat+0xe6>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	e002      	b.n	800460a <get_fat+0xec>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	617b      	str	r3, [r7, #20]
			break;
 800460c:	e055      	b.n	80046ba <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	899b      	ldrh	r3, [r3, #12]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	b29b      	uxth	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004622:	4413      	add	r3, r2
 8004624:	4619      	mov	r1, r3
 8004626:	6938      	ldr	r0, [r7, #16]
 8004628:	f7ff febc 	bl	80043a4 <move_window>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d140      	bne.n	80046b4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	8992      	ldrh	r2, [r2, #12]
 8004640:	fbb3 f0f2 	udiv	r0, r3, r2
 8004644:	fb00 f202 	mul.w	r2, r0, r2
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	440b      	add	r3, r1
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fbf9 	bl	8003e44 <ld_word>
 8004652:	4603      	mov	r3, r0
 8004654:	617b      	str	r3, [r7, #20]
			break;
 8004656:	e030      	b.n	80046ba <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	899b      	ldrh	r3, [r3, #12]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	b29b      	uxth	r3, r3
 8004664:	4619      	mov	r1, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	fbb3 f3f1 	udiv	r3, r3, r1
 800466c:	4413      	add	r3, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6938      	ldr	r0, [r7, #16]
 8004672:	f7ff fe97 	bl	80043a4 <move_window>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11d      	bne.n	80046b8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	8992      	ldrh	r2, [r2, #12]
 800468a:	fbb3 f0f2 	udiv	r0, r3, r2
 800468e:	fb00 f202 	mul.w	r2, r0, r2
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	440b      	add	r3, r1
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fbec 	bl	8003e74 <ld_dword>
 800469c:	4603      	mov	r3, r0
 800469e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80046a2:	617b      	str	r3, [r7, #20]
			break;
 80046a4:	e009      	b.n	80046ba <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e006      	b.n	80046ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046ac:	bf00      	nop
 80046ae:	e004      	b.n	80046ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80046b8:	bf00      	nop
		}
	}

	return val;
 80046ba:	697b      	ldr	r3, [r7, #20]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80046d0:	2302      	movs	r3, #2
 80046d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f240 8109 	bls.w	80048ee <put_fat+0x22a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f080 8103 	bcs.w	80048ee <put_fat+0x22a>
		switch (fs->fs_type) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	f000 80b6 	beq.w	800485e <put_fat+0x19a>
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	f300 80fb 	bgt.w	80048ee <put_fat+0x22a>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d003      	beq.n	8004704 <put_fat+0x40>
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f000 8083 	beq.w	8004808 <put_fat+0x144>
 8004702:	e0f4      	b.n	80048ee <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	899b      	ldrh	r3, [r3, #12]
 800471a:	4619      	mov	r1, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004722:	4413      	add	r3, r2
 8004724:	4619      	mov	r1, r3
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff fe3c 	bl	80043a4 <move_window>
 800472c:	4603      	mov	r3, r0
 800472e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 80d4 	bne.w	80048e0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	61ba      	str	r2, [r7, #24]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	8992      	ldrh	r2, [r2, #12]
 8004748:	fbb3 f0f2 	udiv	r0, r3, r2
 800474c:	fb00 f202 	mul.w	r2, r0, r2
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	440b      	add	r3, r1
 8004754:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <put_fat+0xb8>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b25a      	sxtb	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	b25b      	sxtb	r3, r3
 8004774:	4313      	orrs	r3, r2
 8004776:	b25b      	sxtb	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e001      	b.n	8004780 <put_fat+0xbc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	899b      	ldrh	r3, [r3, #12]
 8004792:	4619      	mov	r1, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fbb3 f3f1 	udiv	r3, r3, r1
 800479a:	4413      	add	r3, r2
 800479c:	4619      	mov	r1, r3
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff fe00 	bl	80043a4 <move_window>
 80047a4:	4603      	mov	r3, r0
 80047a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047a8:	7ffb      	ldrb	r3, [r7, #31]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 809a 	bne.w	80048e4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	899b      	ldrh	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	fbb3 f0f2 	udiv	r0, r3, r2
 80047c2:	fb00 f202 	mul.w	r2, r0, r2
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	440b      	add	r3, r1
 80047ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <put_fat+0x11a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e00e      	b.n	80047fc <put_fat+0x138>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	b25a      	sxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	70da      	strb	r2, [r3, #3]
			break;
 8004806:	e072      	b.n	80048ee <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	899b      	ldrh	r3, [r3, #12]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	fbb3 f3f1 	udiv	r3, r3, r1
 800481c:	4413      	add	r3, r2
 800481e:	4619      	mov	r1, r3
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fdbf 	bl	80043a4 <move_window>
 8004826:	4603      	mov	r3, r0
 8004828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d15b      	bne.n	80048e8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	8992      	ldrh	r2, [r2, #12]
 800483e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004842:	fb00 f202 	mul.w	r2, r0, r2
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	440b      	add	r3, r1
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	b292      	uxth	r2, r2
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fb32 	bl	8003eba <st_word>
			fs->wflag = 1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	70da      	strb	r2, [r3, #3]
			break;
 800485c:	e047      	b.n	80048ee <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	899b      	ldrh	r3, [r3, #12]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	b29b      	uxth	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004872:	4413      	add	r3, r2
 8004874:	4619      	mov	r1, r3
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fd94 	bl	80043a4 <move_window>
 800487c:	4603      	mov	r3, r0
 800487e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d132      	bne.n	80048ec <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	8992      	ldrh	r2, [r2, #12]
 800489a:	fbb3 f0f2 	udiv	r0, r3, r2
 800489e:	fb00 f202 	mul.w	r2, r0, r2
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fae4 	bl	8003e74 <ld_dword>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048b2:	4323      	orrs	r3, r4
 80048b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	8992      	ldrh	r2, [r2, #12]
 80048c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80048c8:	fb00 f202 	mul.w	r2, r0, r2
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fb0c 	bl	8003ef0 <st_dword>
			fs->wflag = 1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	70da      	strb	r2, [r3, #3]
			break;
 80048de:	e006      	b.n	80048ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80048e0:	bf00      	nop
 80048e2:	e004      	b.n	80048ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80048e4:	bf00      	nop
 80048e6:	e002      	b.n	80048ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80048ec:	bf00      	nop
		}
	}
	return res;
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3724      	adds	r7, #36	@ 0x24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd90      	pop	{r4, r7, pc}

080048f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d904      	bls.n	800491e <remove_chain+0x26>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d301      	bcc.n	8004922 <remove_chain+0x2a>
 800491e:	2302      	movs	r3, #2
 8004920:	e04b      	b.n	80049ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f7ff fec8 	bl	80046c4 <put_fat>
 8004934:	4603      	mov	r3, r0
 8004936:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <remove_chain+0x4a>
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	e03b      	b.n	80049ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff fdea 	bl	800451e <get_fat>
 800494a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d031      	beq.n	80049b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <remove_chain+0x64>
 8004958:	2302      	movs	r3, #2
 800495a:	e02e      	b.n	80049ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004962:	d101      	bne.n	8004968 <remove_chain+0x70>
 8004964:	2301      	movs	r3, #1
 8004966:	e028      	b.n	80049ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004968:	2200      	movs	r2, #0
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	69b8      	ldr	r0, [r7, #24]
 800496e:	f7ff fea9 	bl	80046c4 <put_fat>
 8004972:	4603      	mov	r3, r0
 8004974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <remove_chain+0x88>
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	e01c      	b.n	80049ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	3b02      	subs	r3, #2
 800498a:	429a      	cmp	r2, r3
 800498c:	d20b      	bcs.n	80049a6 <remove_chain+0xae>
			fs->free_clst++;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	791b      	ldrb	r3, [r3, #4]
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d3c6      	bcc.n	8004942 <remove_chain+0x4a>
 80049b4:	e000      	b.n	80049b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80049b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b088      	sub	sp, #32
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10d      	bne.n	80049f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <create_chain+0x2c>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d31b      	bcc.n	8004a26 <create_chain+0x64>
 80049ee:	2301      	movs	r3, #1
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e018      	b.n	8004a26 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fd91 	bl	800451e <get_fat>
 80049fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d801      	bhi.n	8004a08 <create_chain+0x46>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e070      	b.n	8004aea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a0e:	d101      	bne.n	8004a14 <create_chain+0x52>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	e06a      	b.n	8004aea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d201      	bcs.n	8004a22 <create_chain+0x60>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	e063      	b.n	8004aea <create_chain+0x128>
		scl = clst;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d307      	bcc.n	8004a4a <create_chain+0x88>
				ncl = 2;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d901      	bls.n	8004a4a <create_chain+0x88>
 8004a46:	2300      	movs	r3, #0
 8004a48:	e04f      	b.n	8004aea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fd66 	bl	800451e <get_fat>
 8004a52:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00e      	beq.n	8004a78 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d003      	beq.n	8004a68 <create_chain+0xa6>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a66:	d101      	bne.n	8004a6c <create_chain+0xaa>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	e03e      	b.n	8004aea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1da      	bne.n	8004a2a <create_chain+0x68>
 8004a74:	2300      	movs	r3, #0
 8004a76:	e038      	b.n	8004aea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004a78:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	6938      	ldr	r0, [r7, #16]
 8004a82:	f7ff fe1f 	bl	80046c4 <put_fat>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <create_chain+0xe2>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	6938      	ldr	r0, [r7, #16]
 8004a9c:	f7ff fe12 	bl	80046c4 <put_fat>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <create_chain+0x116>
		fs->last_clst = ncl;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	3b02      	subs	r3, #2
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d804      	bhi.n	8004ac8 <create_chain+0x106>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	791b      	ldrb	r3, [r3, #4]
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	711a      	strb	r2, [r3, #4]
 8004ad6:	e007      	b.n	8004ae8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d102      	bne.n	8004ae4 <create_chain+0x122>
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ae2:	e000      	b.n	8004ae6 <create_chain+0x124>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004ae8:	69fb      	ldr	r3, [r7, #28]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	3304      	adds	r3, #4
 8004b08:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	899b      	ldrh	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	8952      	ldrh	r2, [r2, #10]
 8004b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	613a      	str	r2, [r7, #16]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <clmt_clust+0x42>
 8004b30:	2300      	movs	r3, #0
 8004b32:	e010      	b.n	8004b56 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d307      	bcc.n	8004b4c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3304      	adds	r3, #4
 8004b48:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b4a:	e7e9      	b.n	8004b20 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004b4c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	4413      	add	r3, r2
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b78:	d204      	bcs.n	8004b84 <dir_sdi+0x22>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004b84:	2302      	movs	r3, #2
 8004b86:	e071      	b.n	8004c6c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <dir_sdi+0x46>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d902      	bls.n	8004ba8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	8912      	ldrh	r2, [r2, #8]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d301      	bcc.n	8004bbe <dir_sdi+0x5c>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e056      	b.n	8004c6c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	61da      	str	r2, [r3, #28]
 8004bc6:	e02d      	b.n	8004c24 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	895b      	ldrh	r3, [r3, #10]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	899b      	ldrh	r3, [r3, #12]
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004bd8:	e019      	b.n	8004c0e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6979      	ldr	r1, [r7, #20]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fc9d 	bl	800451e <get_fat>
 8004be4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bec:	d101      	bne.n	8004bf2 <dir_sdi+0x90>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e03c      	b.n	8004c6c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d904      	bls.n	8004c02 <dir_sdi+0xa0>
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d301      	bcc.n	8004c06 <dir_sdi+0xa4>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e032      	b.n	8004c6c <dir_sdi+0x10a>
			ofs -= csz;
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d2e1      	bcs.n	8004bda <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	6938      	ldr	r0, [r7, #16]
 8004c1a:	f7ff fc61 	bl	80044e0 <clust2sect>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <dir_sdi+0xd4>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e01a      	b.n	8004c6c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	899b      	ldrh	r3, [r3, #12]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c46:	441a      	add	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	899b      	ldrh	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c5e:	fb00 f202 	mul.w	r2, r0, r2
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	18ca      	adds	r2, r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	3320      	adds	r3, #32
 8004c8a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <dir_next+0x28>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c9a:	d301      	bcc.n	8004ca0 <dir_next+0x2c>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e0bb      	b.n	8004e18 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	899b      	ldrh	r3, [r3, #12]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cac:	fb01 f202 	mul.w	r2, r1, r2
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 809d 	bne.w	8004df2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	8912      	ldrh	r2, [r2, #8]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f0c0 808d 	bcc.w	8004df2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	61da      	str	r2, [r3, #28]
 8004cde:	2304      	movs	r3, #4
 8004ce0:	e09a      	b.n	8004e18 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	899b      	ldrh	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	8952      	ldrh	r2, [r2, #10]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d17b      	bne.n	8004df2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7ff fc0b 	bl	800451e <get_fat>
 8004d08:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d801      	bhi.n	8004d14 <dir_next+0xa0>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e081      	b.n	8004e18 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d1a:	d101      	bne.n	8004d20 <dir_next+0xac>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e07b      	b.n	8004e18 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d359      	bcc.n	8004dde <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	61da      	str	r2, [r3, #28]
 8004d36:	2304      	movs	r3, #4
 8004d38:	e06e      	b.n	8004e18 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7ff fe3d 	bl	80049c2 <create_chain>
 8004d48:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <dir_next+0xe0>
 8004d50:	2307      	movs	r3, #7
 8004d52:	e061      	b.n	8004e18 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <dir_next+0xea>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e05c      	b.n	8004e18 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d64:	d101      	bne.n	8004d6a <dir_next+0xf6>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e056      	b.n	8004e18 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fad6 	bl	800431c <sync_window>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <dir_next+0x106>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e04e      	b.n	8004e18 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	899b      	ldrh	r3, [r3, #12]
 8004d84:	461a      	mov	r2, r3
 8004d86:	2100      	movs	r1, #0
 8004d88:	f7ff f8ff 	bl	8003f8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fba4 	bl	80044e0 <clust2sect>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d9e:	e012      	b.n	8004dc6 <dir_next+0x152>
						fs->wflag = 1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fab8 	bl	800431c <sync_window>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <dir_next+0x142>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e030      	b.n	8004e18 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	3301      	adds	r3, #1
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	895b      	ldrh	r3, [r3, #10]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d3e6      	bcc.n	8004da0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad2      	subs	r2, r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff fb7a 	bl	80044e0 <clust2sect>
 8004dec:	4602      	mov	r2, r0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	899b      	ldrh	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e0a:	fb00 f202 	mul.w	r2, r0, r2
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	18ca      	adds	r2, r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004e30:	2100      	movs	r1, #0
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fe95 	bl	8004b62 <dir_sdi>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d12b      	bne.n	8004e9a <dir_alloc+0x7a>
		n = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff faa9 	bl	80043a4 <move_window>
 8004e52:	4603      	mov	r3, r0
 8004e54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11d      	bne.n	8004e98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2be5      	cmp	r3, #229	@ 0xe5
 8004e64:	d004      	beq.n	8004e70 <dir_alloc+0x50>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	3301      	adds	r3, #1
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d102      	bne.n	8004e84 <dir_alloc+0x64>
 8004e7e:	e00c      	b.n	8004e9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004e84:	2101      	movs	r1, #1
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fef4 	bl	8004c74 <dir_next>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0d7      	beq.n	8004e46 <dir_alloc+0x26>
 8004e96:	e000      	b.n	8004e9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004e98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d101      	bne.n	8004ea4 <dir_alloc+0x84>
 8004ea0:	2307      	movs	r3, #7
 8004ea2:	75fb      	strb	r3, [r7, #23]
	return res;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	331a      	adds	r3, #26
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe ffc1 	bl	8003e44 <ld_word>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d109      	bne.n	8004ee2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe ffb6 	bl	8003e44 <ld_word>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	331a      	adds	r3, #26
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	b292      	uxth	r2, r2
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe ffd9 	bl	8003eba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d109      	bne.n	8004f24 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f103 0214 	add.w	r2, r3, #20
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fe ffcb 	bl	8003eba <st_word>
	}
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	331a      	adds	r3, #26
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe ff82 	bl	8003e44 <ld_word>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <cmp_lfn+0x1e>
 8004f46:	2300      	movs	r3, #0
 8004f48:	e059      	b.n	8004ffe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004f60:	2301      	movs	r3, #1
 8004f62:	81fb      	strh	r3, [r7, #14]
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e033      	b.n	8004fd2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004f6a:	4a27      	ldr	r2, [pc, #156]	@ (8005008 <cmp_lfn+0xdc>)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4413      	add	r3, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe ff63 	bl	8003e44 <ld_word>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004f82:	89fb      	ldrh	r3, [r7, #14]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01a      	beq.n	8004fbe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f8c:	d812      	bhi.n	8004fb4 <cmp_lfn+0x88>
 8004f8e:	89bb      	ldrh	r3, [r7, #12]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 f8f5 	bl	8007180 <ff_wtoupper>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461c      	mov	r4, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	617a      	str	r2, [r7, #20]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 f8e9 	bl	8007180 <ff_wtoupper>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	d001      	beq.n	8004fb8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e022      	b.n	8004ffe <cmp_lfn+0xd2>
			}
			wc = uc;
 8004fb8:	89bb      	ldrh	r3, [r7, #12]
 8004fba:	81fb      	strh	r3, [r7, #14]
 8004fbc:	e006      	b.n	8004fcc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004fbe:	89bb      	ldrh	r3, [r7, #12]
 8004fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d001      	beq.n	8004fcc <cmp_lfn+0xa0>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e018      	b.n	8004ffe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d9c8      	bls.n	8004f6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <cmp_lfn+0xd0>
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <cmp_lfn+0xd0>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <cmp_lfn+0xd0>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004ffc:	2301      	movs	r3, #1
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	bf00      	nop
 8005008:	080089c0 	.word	0x080089c0

0800500c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	460b      	mov	r3, r1
 800501c:	71fb      	strb	r3, [r7, #7]
 800501e:	4613      	mov	r3, r2
 8005020:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	330d      	adds	r3, #13
 8005026:	79ba      	ldrb	r2, [r7, #6]
 8005028:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	330b      	adds	r3, #11
 800502e:	220f      	movs	r2, #15
 8005030:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	330c      	adds	r3, #12
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	331a      	adds	r3, #26
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe ff3a 	bl	8003eba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	82fb      	strh	r3, [r7, #22]
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800505e:	8afb      	ldrh	r3, [r7, #22]
 8005060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <put_lfn+0x6c>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005078:	4a17      	ldr	r2, [pc, #92]	@ (80050d8 <put_lfn+0xcc>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4413      	add	r3, r2
 8005086:	8afa      	ldrh	r2, [r7, #22]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff15 	bl	8003eba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005090:	8afb      	ldrh	r3, [r7, #22]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <put_lfn+0x90>
 8005096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800509a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	3301      	adds	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d9da      	bls.n	800505e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80050a8:	8afb      	ldrh	r3, [r7, #22]
 80050aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d006      	beq.n	80050c0 <put_lfn+0xb4>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <put_lfn+0xbc>
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	79fa      	ldrb	r2, [r7, #7]
 80050cc:	701a      	strb	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	080089c0 	.word	0x080089c0

080050dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	@ 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80050ea:	220b      	movs	r2, #11
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7fe ff2a 	bl	8003f48 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d92b      	bls.n	8005152 <gen_numname+0x76>
		sr = seq;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80050fe:	e022      	b.n	8005146 <gen_numname+0x6a>
			wc = *lfn++;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800510a:	2300      	movs	r3, #0
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510e:	e017      	b.n	8005140 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005a      	lsls	r2, r3, #1
 8005114:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800511e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <gen_numname+0x5e>
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005134:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005138:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	3301      	adds	r3, #1
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d9e4      	bls.n	8005110 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1d8      	bne.n	8005100 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005152:	2307      	movs	r3, #7
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	b2db      	uxtb	r3, r3
 8005160:	3330      	adds	r3, #48	@ 0x30
 8005162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800516a:	2b39      	cmp	r3, #57	@ 0x39
 800516c:	d904      	bls.n	8005178 <gen_numname+0x9c>
 800516e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005172:	3307      	adds	r3, #7
 8005174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	1e5a      	subs	r2, r3, #1
 800517c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800517e:	3330      	adds	r3, #48	@ 0x30
 8005180:	443b      	add	r3, r7
 8005182:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005186:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1df      	bne.n	8005156 <gen_numname+0x7a>
	ns[i] = '~';
 8005196:	f107 0214 	add.w	r2, r7, #20
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	4413      	add	r3, r2
 800519e:	227e      	movs	r2, #126	@ 0x7e
 80051a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	e002      	b.n	80051ae <gen_numname+0xd2>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d205      	bcs.n	80051c2 <gen_numname+0xe6>
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	4413      	add	r3, r2
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d1f2      	bne.n	80051a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	d807      	bhi.n	80051d8 <gen_numname+0xfc>
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80051ce:	3330      	adds	r3, #48	@ 0x30
 80051d0:	443b      	add	r3, r7
 80051d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80051d6:	e000      	b.n	80051da <gen_numname+0xfe>
 80051d8:	2120      	movs	r1, #32
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	627a      	str	r2, [r7, #36]	@ 0x24
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	460a      	mov	r2, r1
 80051e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	2b07      	cmp	r3, #7
 80051ec:	d9e9      	bls.n	80051c2 <gen_numname+0xe6>
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	3730      	adds	r7, #48	@ 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005204:	230b      	movs	r3, #11
 8005206:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	0852      	lsrs	r2, r2, #1
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	4313      	orrs	r3, r2
 8005212:	b2da      	uxtb	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6079      	str	r1, [r7, #4]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4413      	add	r3, r2
 800521e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ed      	bne.n	8005208 <sum_sfn+0x10>
	return sum;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005248:	2100      	movs	r1, #0
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fc89 	bl	8004b62 <dir_sdi>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <dir_find+0x24>
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	e0a9      	b.n	80053b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800525e:	23ff      	movs	r3, #255	@ 0xff
 8005260:	753b      	strb	r3, [r7, #20]
 8005262:	7d3b      	ldrb	r3, [r7, #20]
 8005264:	757b      	strb	r3, [r7, #21]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4619      	mov	r1, r3
 8005274:	6938      	ldr	r0, [r7, #16]
 8005276:	f7ff f895 	bl	80043a4 <move_window>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 8090 	bne.w	80053a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800528e:	7dbb      	ldrb	r3, [r7, #22]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <dir_find+0x60>
 8005294:	2304      	movs	r3, #4
 8005296:	75fb      	strb	r3, [r7, #23]
 8005298:	e08a      	b.n	80053b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	330b      	adds	r3, #11
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80052ae:	7dbb      	ldrb	r3, [r7, #22]
 80052b0:	2be5      	cmp	r3, #229	@ 0xe5
 80052b2:	d007      	beq.n	80052c4 <dir_find+0x8a>
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <dir_find+0x98>
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d006      	beq.n	80052d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80052c4:	23ff      	movs	r3, #255	@ 0xff
 80052c6:	757b      	strb	r3, [r7, #21]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d0:	e05e      	b.n	8005390 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d136      	bne.n	8005346 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d154      	bne.n	8005390 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80052e6:	7dbb      	ldrb	r3, [r7, #22]
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	7b5b      	ldrb	r3, [r3, #13]
 80052f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80052f8:	7dbb      	ldrb	r3, [r7, #22]
 80052fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fe:	75bb      	strb	r3, [r7, #22]
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800530c:	7dba      	ldrb	r2, [r7, #22]
 800530e:	7d7b      	ldrb	r3, [r7, #21]
 8005310:	429a      	cmp	r2, r3
 8005312:	d115      	bne.n	8005340 <dir_find+0x106>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	330d      	adds	r3, #13
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	7d3a      	ldrb	r2, [r7, #20]
 800531e:	429a      	cmp	r2, r3
 8005320:	d10e      	bne.n	8005340 <dir_find+0x106>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f7ff fdfd 	bl	8004f2c <cmp_lfn>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <dir_find+0x106>
 8005338:	7d7b      	ldrb	r3, [r7, #21]
 800533a:	3b01      	subs	r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e000      	b.n	8005342 <dir_find+0x108>
 8005340:	23ff      	movs	r3, #255	@ 0xff
 8005342:	757b      	strb	r3, [r7, #21]
 8005344:	e024      	b.n	8005390 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005346:	7d7b      	ldrb	r3, [r7, #21]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <dir_find+0x126>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ff51 	bl	80051f8 <sum_sfn>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	7d3b      	ldrb	r3, [r7, #20]
 800535c:	4293      	cmp	r3, r2
 800535e:	d024      	beq.n	80053aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <dir_find+0x14a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a18      	ldr	r0, [r3, #32]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3324      	adds	r3, #36	@ 0x24
 8005376:	220b      	movs	r2, #11
 8005378:	4619      	mov	r1, r3
 800537a:	f7fe fe21 	bl	8003fc0 <mem_cmp>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d014      	beq.n	80053ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005384:	23ff      	movs	r3, #255	@ 0xff
 8005386:	757b      	strb	r3, [r7, #21]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005390:	2100      	movs	r1, #0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fc6e 	bl	8004c74 <dir_next>
 8005398:	4603      	mov	r3, r0
 800539a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f43f af65 	beq.w	800526e <dir_find+0x34>
 80053a4:	e004      	b.n	80053b0 <dir_find+0x176>
		if (res != FR_OK) break;
 80053a6:	bf00      	nop
 80053a8:	e002      	b.n	80053b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80053ae:	bf00      	nop

	return res;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	@ 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80053d0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <dir_register+0x20>
 80053d8:	2306      	movs	r3, #6
 80053da:	e0e0      	b.n	800559e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e0:	e002      	b.n	80053e8 <dir_register+0x2c>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	3301      	adds	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f4      	bne.n	80053e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	220c      	movs	r2, #12
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fd9f 	bl	8003f48 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d032      	beq.n	800547a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2240      	movs	r2, #64	@ 0x40
 8005418:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800541c:	2301      	movs	r3, #1
 800541e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005420:	e016      	b.n	8005450 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	f107 010c 	add.w	r1, r7, #12
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	f7ff fe53 	bl	80050dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff feff 	bl	800523a <dir_find>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	3301      	adds	r3, #1
 800544e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	2b63      	cmp	r3, #99	@ 0x63
 8005454:	d9e5      	bls.n	8005422 <dir_register+0x66>
 8005456:	e000      	b.n	800545a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005458:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	2b64      	cmp	r3, #100	@ 0x64
 800545e:	d101      	bne.n	8005464 <dir_register+0xa8>
 8005460:	2307      	movs	r3, #7
 8005462:	e09c      	b.n	800559e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005468:	2b04      	cmp	r3, #4
 800546a:	d002      	beq.n	8005472 <dir_register+0xb6>
 800546c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005470:	e095      	b.n	800559e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005472:	7dfa      	ldrb	r2, [r7, #23]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <dir_register+0xd8>
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	330c      	adds	r3, #12
 8005488:	4a47      	ldr	r2, [pc, #284]	@ (80055a8 <dir_register+0x1ec>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	3301      	adds	r3, #1
 8005492:	e000      	b.n	8005496 <dir_register+0xda>
 8005494:	2301      	movs	r3, #1
 8005496:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fcc0 	bl	8004e20 <dir_alloc>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80054a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d148      	bne.n	8005540 <dir_register+0x184>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d042      	beq.n	8005540 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	015b      	lsls	r3, r3, #5
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fb4b 	bl	8004b62 <dir_sdi>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80054d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d132      	bne.n	8005540 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	@ 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fe8a 	bl	80051f8 <sum_sfn>
 80054e4:	4603      	mov	r3, r0
 80054e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4619      	mov	r1, r3
 80054ee:	69f8      	ldr	r0, [r7, #28]
 80054f0:	f7fe ff58 	bl	80043a4 <move_window>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80054fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11d      	bne.n	800553e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a19      	ldr	r1, [r3, #32]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	7efb      	ldrb	r3, [r7, #27]
 8005510:	f7ff fd7c 	bl	800500c <put_lfn>
				fs->wflag = 1;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2201      	movs	r2, #1
 8005518:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800551a:	2100      	movs	r1, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fba9 	bl	8004c74 <dir_next>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <dir_register+0x184>
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	3b01      	subs	r3, #1
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1d5      	bne.n	80054e8 <dir_register+0x12c>
 800553c:	e000      	b.n	8005540 <dir_register+0x184>
				if (res != FR_OK) break;
 800553e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005544:	2b00      	cmp	r3, #0
 8005546:	d128      	bne.n	800559a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	4619      	mov	r1, r3
 800554e:	69f8      	ldr	r0, [r7, #28]
 8005550:	f7fe ff28 	bl	80043a4 <move_window>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800555a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11b      	bne.n	800559a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	2220      	movs	r2, #32
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fd0d 	bl	8003f8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a18      	ldr	r0, [r3, #32]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3324      	adds	r3, #36	@ 0x24
 8005578:	220b      	movs	r2, #11
 800557a:	4619      	mov	r1, r3
 800557c:	f7fe fce4 	bl	8003f48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	330c      	adds	r3, #12
 800558c:	f002 0218 	and.w	r2, r2, #24
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2201      	movs	r2, #1
 8005598:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800559a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3730      	adds	r7, #48	@ 0x30
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	4ec4ec4f 	.word	0x4ec4ec4f

080055ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	61ba      	str	r2, [r7, #24]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80055da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055dc:	2b1f      	cmp	r3, #31
 80055de:	d940      	bls.n	8005662 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80055e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80055e4:	d006      	beq.n	80055f4 <create_name+0x48>
 80055e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80055ea:	d110      	bne.n	800560e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80055ec:	e002      	b.n	80055f4 <create_name+0x48>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80055fe:	d0f6      	beq.n	80055ee <create_name+0x42>
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b5c      	cmp	r3, #92	@ 0x5c
 800560a:	d0f0      	beq.n	80055ee <create_name+0x42>
			break;
 800560c:	e02a      	b.n	8005664 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2bfe      	cmp	r3, #254	@ 0xfe
 8005612:	d901      	bls.n	8005618 <create_name+0x6c>
 8005614:	2306      	movs	r3, #6
 8005616:	e17d      	b.n	8005914 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800561a:	b2db      	uxtb	r3, r3
 800561c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800561e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005620:	2101      	movs	r1, #1
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fd70 	bl	8007108 <ff_convert>
 8005628:	4603      	mov	r3, r0
 800562a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800562c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <create_name+0x8a>
 8005632:	2306      	movs	r3, #6
 8005634:	e16e      	b.n	8005914 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005636:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005638:	2b7f      	cmp	r3, #127	@ 0x7f
 800563a:	d809      	bhi.n	8005650 <create_name+0xa4>
 800563c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800563e:	4619      	mov	r1, r3
 8005640:	488d      	ldr	r0, [pc, #564]	@ (8005878 <create_name+0x2cc>)
 8005642:	f7fe fce4 	bl	800400e <chk_chr>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <create_name+0xa4>
 800564c:	2306      	movs	r3, #6
 800564e:	e161      	b.n	8005914 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	617a      	str	r2, [r7, #20]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800565e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005660:	e7b4      	b.n	80055cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005662:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	441a      	add	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800566e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005670:	2b1f      	cmp	r3, #31
 8005672:	d801      	bhi.n	8005678 <create_name+0xcc>
 8005674:	2304      	movs	r3, #4
 8005676:	e000      	b.n	800567a <create_name+0xce>
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800567e:	e011      	b.n	80056a4 <create_name+0xf8>
		w = lfn[di - 1];
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005686:	3b01      	subs	r3, #1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005694:	2b20      	cmp	r3, #32
 8005696:	d002      	beq.n	800569e <create_name+0xf2>
 8005698:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800569a:	2b2e      	cmp	r3, #46	@ 0x2e
 800569c:	d106      	bne.n	80056ac <create_name+0x100>
		di--;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ea      	bne.n	8005680 <create_name+0xd4>
 80056aa:	e000      	b.n	80056ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80056ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <create_name+0x118>
 80056c0:	2306      	movs	r3, #6
 80056c2:	e127      	b.n	8005914 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3324      	adds	r3, #36	@ 0x24
 80056c8:	220b      	movs	r2, #11
 80056ca:	2120      	movs	r1, #32
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe fc5c 	bl	8003f8a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e002      	b.n	80056de <create_name+0x132>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3301      	adds	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d0f5      	beq.n	80056d8 <create_name+0x12c>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80056f8:	d0ee      	beq.n	80056d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <create_name+0x168>
 8005700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005704:	f043 0303 	orr.w	r3, r3, #3
 8005708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800570c:	e002      	b.n	8005714 <create_name+0x168>
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	3b01      	subs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <create_name+0x182>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005720:	3b01      	subs	r3, #1
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	2b2e      	cmp	r3, #46	@ 0x2e
 800572c:	d1ef      	bne.n	800570e <create_name+0x162>

	i = b = 0; ni = 8;
 800572e:	2300      	movs	r3, #0
 8005730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005734:	2300      	movs	r3, #0
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	2308      	movs	r3, #8
 800573a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	61ba      	str	r2, [r7, #24]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800574c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8090 	beq.w	8005874 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005756:	2b20      	cmp	r3, #32
 8005758:	d006      	beq.n	8005768 <create_name+0x1bc>
 800575a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800575c:	2b2e      	cmp	r3, #46	@ 0x2e
 800575e:	d10a      	bne.n	8005776 <create_name+0x1ca>
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d006      	beq.n	8005776 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800576c:	f043 0303 	orr.w	r3, r3, #3
 8005770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005774:	e07d      	b.n	8005872 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	429a      	cmp	r2, r3
 800577c:	d203      	bcs.n	8005786 <create_name+0x1da>
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	d123      	bne.n	80057ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b0b      	cmp	r3, #11
 800578a:	d106      	bne.n	800579a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800578c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005790:	f043 0303 	orr.w	r3, r3, #3
 8005794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005798:	e075      	b.n	8005886 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d005      	beq.n	80057ae <create_name+0x202>
 80057a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057a6:	f043 0303 	orr.w	r3, r3, #3
 80057aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d866      	bhi.n	8005884 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	2308      	movs	r3, #8
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	230b      	movs	r3, #11
 80057c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80057c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057cc:	e051      	b.n	8005872 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80057ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d2:	d914      	bls.n	80057fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80057d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 fc95 	bl	8007108 <ff_convert>
 80057de:	4603      	mov	r3, r0
 80057e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80057e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <create_name+0x246>
 80057e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057ea:	3b80      	subs	r3, #128	@ 0x80
 80057ec:	4a23      	ldr	r2, [pc, #140]	@ (800587c <create_name+0x2d0>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80057f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80057fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <create_name+0x268>
 8005804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005806:	4619      	mov	r1, r3
 8005808:	481d      	ldr	r0, [pc, #116]	@ (8005880 <create_name+0x2d4>)
 800580a:	f7fe fc00 	bl	800400e <chk_chr>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005814:	235f      	movs	r3, #95	@ 0x5f
 8005816:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800581c:	f043 0303 	orr.w	r3, r3, #3
 8005820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005824:	e01b      	b.n	800585e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005828:	2b40      	cmp	r3, #64	@ 0x40
 800582a:	d909      	bls.n	8005840 <create_name+0x294>
 800582c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800582e:	2b5a      	cmp	r3, #90	@ 0x5a
 8005830:	d806      	bhi.n	8005840 <create_name+0x294>
					b |= 2;
 8005832:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005836:	f043 0302 	orr.w	r3, r3, #2
 800583a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800583e:	e00e      	b.n	800585e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005840:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005842:	2b60      	cmp	r3, #96	@ 0x60
 8005844:	d90b      	bls.n	800585e <create_name+0x2b2>
 8005846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005848:	2b7a      	cmp	r3, #122	@ 0x7a
 800584a:	d808      	bhi.n	800585e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800584c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005858:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800585a:	3b20      	subs	r3, #32
 800585c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	623a      	str	r2, [r7, #32]
 8005864:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005866:	b2d1      	uxtb	r1, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	460a      	mov	r2, r1
 800586e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005872:	e763      	b.n	800573c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005874:	bf00      	nop
 8005876:	e006      	b.n	8005886 <create_name+0x2da>
 8005878:	080088e0 	.word	0x080088e0
 800587c:	08008940 	.word	0x08008940
 8005880:	080088ec 	.word	0x080088ec
			if (si > di) break;			/* No extension */
 8005884:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800588c:	2be5      	cmp	r3, #229	@ 0xe5
 800588e:	d103      	bne.n	8005898 <create_name+0x2ec>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2205      	movs	r2, #5
 8005894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d104      	bne.n	80058a8 <create_name+0x2fc>
 800589e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80058a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d005      	beq.n	80058c0 <create_name+0x314>
 80058b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d105      	bne.n	80058cc <create_name+0x320>
 80058c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c4:	f043 0302 	orr.w	r3, r3, #2
 80058c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80058cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d117      	bne.n	8005908 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80058d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d105      	bne.n	80058f0 <create_name+0x344>
 80058e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058e8:	f043 0310 	orr.w	r3, r3, #16
 80058ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80058f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058f4:	f003 030c 	and.w	r3, r3, #12
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d105      	bne.n	8005908 <create_name+0x35c>
 80058fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005900:	f043 0308 	orr.w	r3, r3, #8
 8005904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800590e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005912:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	@ 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005930:	e002      	b.n	8005938 <follow_path+0x1c>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b2f      	cmp	r3, #47	@ 0x2f
 800593e:	d0f8      	beq.n	8005932 <follow_path+0x16>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b5c      	cmp	r3, #92	@ 0x5c
 8005946:	d0f4      	beq.n	8005932 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b1f      	cmp	r3, #31
 8005954:	d80a      	bhi.n	800596c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2280      	movs	r2, #128	@ 0x80
 800595a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800595e:	2100      	movs	r1, #0
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff f8fe 	bl	8004b62 <dir_sdi>
 8005966:	4603      	mov	r3, r0
 8005968:	75fb      	strb	r3, [r7, #23]
 800596a:	e048      	b.n	80059fe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800596c:	463b      	mov	r3, r7
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fe1b 	bl	80055ac <create_name>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d139      	bne.n	80059f4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fc5a 	bl	800523a <dir_find>
 8005986:	4603      	mov	r3, r0
 8005988:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005990:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d12c      	bne.n	80059f8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800599e:	7afb      	ldrb	r3, [r7, #11]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d127      	bne.n	80059f8 <follow_path+0xdc>
 80059a8:	2305      	movs	r3, #5
 80059aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80059ac:	e024      	b.n	80059f8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d121      	bne.n	80059fc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	799b      	ldrb	r3, [r3, #6]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80059c4:	2305      	movs	r3, #5
 80059c6:	75fb      	strb	r3, [r7, #23]
 80059c8:	e019      	b.n	80059fe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	8992      	ldrh	r2, [r2, #12]
 80059d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80059dc:	fb00 f202 	mul.w	r2, r0, r2
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	440b      	add	r3, r1
 80059e4:	4619      	mov	r1, r3
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fa61 	bl	8004eae <ld_clust>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059f2:	e7bb      	b.n	800596c <follow_path+0x50>
			if (res != FR_OK) break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <follow_path+0xe2>
				break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059fc:	bf00      	nop
			}
		}
	}

	return res;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d031      	beq.n	8005a82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e002      	b.n	8005a2c <get_ldnumber+0x24>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b1f      	cmp	r3, #31
 8005a32:	d903      	bls.n	8005a3c <get_ldnumber+0x34>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b3a      	cmp	r3, #58	@ 0x3a
 8005a3a:	d1f4      	bne.n	8005a26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b3a      	cmp	r3, #58	@ 0x3a
 8005a42:	d11c      	bne.n	8005a7e <get_ldnumber+0x76>
			tp = *path;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	3b30      	subs	r3, #48	@ 0x30
 8005a54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d80e      	bhi.n	8005a7a <get_ldnumber+0x72>
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d10a      	bne.n	8005a7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <get_ldnumber+0x72>
					vol = (int)i;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3301      	adds	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	e002      	b.n	8005a84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a82:	693b      	ldr	r3, [r7, #16]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	70da      	strb	r2, [r3, #3]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aa6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe fc7a 	bl	80043a4 <move_window>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <check_fs+0x2a>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e038      	b.n	8005b2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3338      	adds	r3, #56	@ 0x38
 8005abe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f9be 	bl	8003e44 <ld_word>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <check_fs+0x48>
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e029      	b.n	8005b2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ade:	2be9      	cmp	r3, #233	@ 0xe9
 8005ae0:	d009      	beq.n	8005af6 <check_fs+0x66>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ae8:	2beb      	cmp	r3, #235	@ 0xeb
 8005aea:	d11e      	bne.n	8005b2a <check_fs+0x9a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005af2:	2b90      	cmp	r3, #144	@ 0x90
 8005af4:	d119      	bne.n	8005b2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3338      	adds	r3, #56	@ 0x38
 8005afa:	3336      	adds	r3, #54	@ 0x36
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe f9b9 	bl	8003e74 <ld_dword>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b08:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <check_fs+0xa4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <check_fs+0x82>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e00c      	b.n	8005b2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3338      	adds	r3, #56	@ 0x38
 8005b16:	3352      	adds	r3, #82	@ 0x52
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f9ab 	bl	8003e74 <ld_dword>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4a05      	ldr	r2, [pc, #20]	@ (8005b38 <check_fs+0xa8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <check_fs+0x9a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005b2a:	2302      	movs	r3, #2
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00544146 	.word	0x00544146
 8005b38:	33544146 	.word	0x33544146

08005b3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b096      	sub	sp, #88	@ 0x58
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff59 	bl	8005a08 <get_ldnumber>
 8005b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da01      	bge.n	8005b62 <find_volume+0x26>
 8005b5e:	230b      	movs	r3, #11
 8005b60:	e265      	b.n	800602e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b62:	4a9f      	ldr	r2, [pc, #636]	@ (8005de0 <find_volume+0x2a4>)
 8005b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <find_volume+0x3a>
 8005b72:	230c      	movs	r3, #12
 8005b74:	e25b      	b.n	800602e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe f8b7 	bl	8003d04 <disk_status>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <find_volume+0x82>
 8005bae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005bba:	230a      	movs	r3, #10
 8005bbc:	e237      	b.n	800602e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e235      	b.n	800602e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe f8af 	bl	8003d38 <disk_initialize>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005be0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005bec:	2303      	movs	r3, #3
 8005bee:	e21e      	b.n	800602e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <find_volume+0xca>
 8005bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005c02:	230a      	movs	r3, #10
 8005c04:	e213      	b.n	800602e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	7858      	ldrb	r0, [r3, #1]
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2102      	movs	r1, #2
 8005c12:	f7fe f8f9 	bl	8003e08 <disk_ioctl>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <find_volume+0xe4>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e206      	b.n	800602e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	899b      	ldrh	r3, [r3, #12]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c28:	d80d      	bhi.n	8005c46 <find_volume+0x10a>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	899b      	ldrh	r3, [r3, #12]
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c32:	d308      	bcc.n	8005c46 <find_volume+0x10a>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c36:	899b      	ldrh	r3, [r3, #12]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	899b      	ldrh	r3, [r3, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <find_volume+0x10e>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e1f1      	b.n	800602e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005c4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c52:	f7ff ff1d 	bl	8005a90 <check_fs>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d149      	bne.n	8005cf8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c64:	2300      	movs	r3, #0
 8005c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c68:	e01e      	b.n	8005ca8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005c78:	4413      	add	r3, r2
 8005c7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7e:	3304      	adds	r3, #4
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d006      	beq.n	8005c94 <find_volume+0x158>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	3308      	adds	r3, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe f8f2 	bl	8003e74 <ld_dword>
 8005c90:	4602      	mov	r2, r0
 8005c92:	e000      	b.n	8005c96 <find_volume+0x15a>
 8005c94:	2200      	movs	r2, #0
 8005c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	3358      	adds	r3, #88	@ 0x58
 8005c9c:	443b      	add	r3, r7
 8005c9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d9dd      	bls.n	8005c6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005cae:	2300      	movs	r3, #0
 8005cb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <find_volume+0x182>
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	3358      	adds	r3, #88	@ 0x58
 8005cc4:	443b      	add	r3, r7
 8005cc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <find_volume+0x1a2>
 8005cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cd6:	f7ff fedb 	bl	8005a90 <check_fs>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e000      	b.n	8005ce0 <find_volume+0x1a4>
 8005cde:	2303      	movs	r3, #3
 8005ce0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d905      	bls.n	8005cf8 <find_volume+0x1bc>
 8005cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cee:	3301      	adds	r3, #1
 8005cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d9e2      	bls.n	8005cbe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d101      	bne.n	8005d04 <find_volume+0x1c8>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e194      	b.n	800602e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005d04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d901      	bls.n	8005d10 <find_volume+0x1d4>
 8005d0c:	230d      	movs	r3, #13
 8005d0e:	e18e      	b.n	800602e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	3338      	adds	r3, #56	@ 0x38
 8005d14:	330b      	adds	r3, #11
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe f894 	bl	8003e44 <ld_word>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	899b      	ldrh	r3, [r3, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <find_volume+0x1f0>
 8005d28:	230d      	movs	r3, #13
 8005d2a:	e180      	b.n	800602e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2e:	3338      	adds	r3, #56	@ 0x38
 8005d30:	3316      	adds	r3, #22
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe f886 	bl	8003e44 <ld_word>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <find_volume+0x214>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d44:	3338      	adds	r3, #56	@ 0x38
 8005d46:	3324      	adds	r3, #36	@ 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe f893 	bl	8003e74 <ld_dword>
 8005d4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d54:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d005      	beq.n	8005d74 <find_volume+0x238>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	789b      	ldrb	r3, [r3, #2]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d001      	beq.n	8005d74 <find_volume+0x238>
 8005d70:	230d      	movs	r3, #13
 8005d72:	e15c      	b.n	800602e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d76:	789b      	ldrb	r3, [r3, #2]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	895b      	ldrh	r3, [r3, #10]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <find_volume+0x26c>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	895b      	ldrh	r3, [r3, #10]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	895b      	ldrh	r3, [r3, #10]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <find_volume+0x270>
 8005da8:	230d      	movs	r3, #13
 8005daa:	e140      	b.n	800602e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	3338      	adds	r3, #56	@ 0x38
 8005db0:	3311      	adds	r3, #17
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe f846 	bl	8003e44 <ld_word>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc2:	891b      	ldrh	r3, [r3, #8]
 8005dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dc6:	8992      	ldrh	r2, [r2, #12]
 8005dc8:	0952      	lsrs	r2, r2, #5
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd0:	fb01 f202 	mul.w	r2, r1, r2
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <find_volume+0x2a8>
 8005ddc:	230d      	movs	r3, #13
 8005dde:	e126      	b.n	800602e <find_volume+0x4f2>
 8005de0:	200002a8 	.word	0x200002a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	3338      	adds	r3, #56	@ 0x38
 8005de8:	3313      	adds	r3, #19
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe f82a 	bl	8003e44 <ld_word>
 8005df0:	4603      	mov	r3, r0
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <find_volume+0x2cc>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfc:	3338      	adds	r3, #56	@ 0x38
 8005dfe:	3320      	adds	r3, #32
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe f837 	bl	8003e74 <ld_dword>
 8005e06:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	3338      	adds	r3, #56	@ 0x38
 8005e0c:	330e      	adds	r3, #14
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe f818 	bl	8003e44 <ld_word>
 8005e14:	4603      	mov	r3, r0
 8005e16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005e18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <find_volume+0x2e6>
 8005e1e:	230d      	movs	r3, #13
 8005e20:	e105      	b.n	800602e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005e22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e26:	4413      	add	r3, r2
 8005e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e2a:	8911      	ldrh	r1, [r2, #8]
 8005e2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e2e:	8992      	ldrh	r2, [r2, #12]
 8005e30:	0952      	lsrs	r2, r2, #5
 8005e32:	b292      	uxth	r2, r2
 8005e34:	fbb1 f2f2 	udiv	r2, r1, r2
 8005e38:	b292      	uxth	r2, r2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d201      	bcs.n	8005e4a <find_volume+0x30e>
 8005e46:	230d      	movs	r3, #13
 8005e48:	e0f1      	b.n	800602e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e52:	8952      	ldrh	r2, [r2, #10]
 8005e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <find_volume+0x328>
 8005e60:	230d      	movs	r3, #13
 8005e62:	e0e4      	b.n	800602e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005e64:	2303      	movs	r3, #3
 8005e66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d802      	bhi.n	8005e7a <find_volume+0x33e>
 8005e74:	2302      	movs	r3, #2
 8005e76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d802      	bhi.n	8005e8a <find_volume+0x34e>
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005e98:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e9c:	441a      	add	r2, r3
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005ea2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	441a      	add	r2, r3
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005eac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d11e      	bne.n	8005ef2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	3338      	adds	r3, #56	@ 0x38
 8005eb8:	332a      	adds	r3, #42	@ 0x2a
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd ffc2 	bl	8003e44 <ld_word>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <find_volume+0x38e>
 8005ec6:	230d      	movs	r3, #13
 8005ec8:	e0b1      	b.n	800602e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	891b      	ldrh	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <find_volume+0x39a>
 8005ed2:	230d      	movs	r3, #13
 8005ed4:	e0ab      	b.n	800602e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	3338      	adds	r3, #56	@ 0x38
 8005eda:	332c      	adds	r3, #44	@ 0x2c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fd ffc9 	bl	8003e74 <ld_dword>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef0:	e01f      	b.n	8005f32 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	891b      	ldrh	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <find_volume+0x3c2>
 8005efa:	230d      	movs	r3, #13
 8005efc:	e097      	b.n	800602e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f04:	441a      	add	r2, r3
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d103      	bne.n	8005f1a <find_volume+0x3de>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	e00a      	b.n	8005f30 <find_volume+0x3f4>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	085a      	lsrs	r2, r3, #1
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005f30:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	899b      	ldrh	r3, [r3, #12]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3e:	440b      	add	r3, r1
 8005f40:	3b01      	subs	r3, #1
 8005f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f44:	8989      	ldrh	r1, [r1, #12]
 8005f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d201      	bcs.n	8005f52 <find_volume+0x416>
 8005f4e:	230d      	movs	r3, #13
 8005f50:	e06d      	b.n	800602e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f58:	619a      	str	r2, [r3, #24]
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f64:	2280      	movs	r2, #128	@ 0x80
 8005f66:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005f68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d149      	bne.n	8006004 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	3338      	adds	r3, #56	@ 0x38
 8005f74:	3330      	adds	r3, #48	@ 0x30
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fd ff64 	bl	8003e44 <ld_word>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d140      	bne.n	8006004 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f84:	3301      	adds	r3, #1
 8005f86:	4619      	mov	r1, r3
 8005f88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f8a:	f7fe fa0b 	bl	80043a4 <move_window>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d137      	bne.n	8006004 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f96:	2200      	movs	r2, #0
 8005f98:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	3338      	adds	r3, #56	@ 0x38
 8005f9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fd ff4e 	bl	8003e44 <ld_word>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	461a      	mov	r2, r3
 8005fac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d127      	bne.n	8006004 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	3338      	adds	r3, #56	@ 0x38
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fd ff5b 	bl	8003e74 <ld_dword>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <find_volume+0x4fc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d11e      	bne.n	8006004 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	3338      	adds	r3, #56	@ 0x38
 8005fca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd ff50 	bl	8003e74 <ld_dword>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4a19      	ldr	r2, [pc, #100]	@ (800603c <find_volume+0x500>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d113      	bne.n	8006004 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	3338      	adds	r3, #56	@ 0x38
 8005fe0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fd ff45 	bl	8003e74 <ld_dword>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	3338      	adds	r3, #56	@ 0x38
 8005ff4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fd ff3b 	bl	8003e74 <ld_dword>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800600a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <find_volume+0x504>)
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <find_volume+0x504>)
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <find_volume+0x504>)
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	4a08      	ldr	r2, [pc, #32]	@ (8006044 <find_volume+0x508>)
 8006024:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006026:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006028:	f7fe f954 	bl	80042d4 <clear_lock>
#endif
	return FR_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3758      	adds	r7, #88	@ 0x58
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	41615252 	.word	0x41615252
 800603c:	61417272 	.word	0x61417272
 8006040:	200002ac 	.word	0x200002ac
 8006044:	200002d0 	.word	0x200002d0

08006048 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006052:	2309      	movs	r3, #9
 8006054:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01c      	beq.n	8006096 <validate+0x4e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d018      	beq.n	8006096 <validate+0x4e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d013      	beq.n	8006096 <validate+0x4e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	889a      	ldrh	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	429a      	cmp	r2, r3
 800607a:	d10c      	bne.n	8006096 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd fe3e 	bl	8003d04 <disk_status>
 8006088:	4603      	mov	r3, r0
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <validate+0x4e>
			res = FR_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <validate+0x5a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	e000      	b.n	80060a4 <validate+0x5c>
 80060a2:	2300      	movs	r3, #0
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	6013      	str	r3, [r2, #0]
	return res;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80060c6:	f107 0310 	add.w	r3, r7, #16
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fc9c 	bl	8005a08 <get_ldnumber>
 80060d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da01      	bge.n	80060dc <f_mount+0x28>
 80060d8:	230b      	movs	r3, #11
 80060da:	e02b      	b.n	8006134 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80060dc:	4a17      	ldr	r2, [pc, #92]	@ (800613c <f_mount+0x88>)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80060ec:	69b8      	ldr	r0, [r7, #24]
 80060ee:	f7fe f8f1 	bl	80042d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	490d      	ldr	r1, [pc, #52]	@ (800613c <f_mount+0x88>)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <f_mount+0x66>
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <f_mount+0x6a>
 800611a:	2300      	movs	r3, #0
 800611c:	e00a      	b.n	8006134 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800611e:	f107 010c 	add.w	r1, r7, #12
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	2200      	movs	r2, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fd07 	bl	8005b3c <find_volume>
 800612e:	4603      	mov	r3, r0
 8006130:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200002a8 	.word	0x200002a8

08006140 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b09a      	sub	sp, #104	@ 0x68
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <f_open+0x18>
 8006154:	2309      	movs	r3, #9
 8006156:	e1b7      	b.n	80064c8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800615e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006160:	79fa      	ldrb	r2, [r7, #7]
 8006162:	f107 0114 	add.w	r1, r7, #20
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fce6 	bl	8005b3c <find_volume>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006176:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 819b 	bne.w	80064b6 <f_open+0x376>
		dj.obj.fs = fs;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	f107 0318 	add.w	r3, r7, #24
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fbc5 	bl	800591c <follow_path>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006198:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800619c:	2b00      	cmp	r3, #0
 800619e:	d118      	bne.n	80061d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80061a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da03      	bge.n	80061b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80061aa:	2306      	movs	r3, #6
 80061ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80061b0:	e00f      	b.n	80061d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf8c      	ite	hi
 80061b8:	2301      	movhi	r3, #1
 80061ba:	2300      	movls	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	f107 0318 	add.w	r3, r7, #24
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd ff3c 	bl	8004044 <chk_lock>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	f003 031c 	and.w	r3, r3, #28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d07f      	beq.n	80062dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80061dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80061e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d10e      	bne.n	800620a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061ec:	f7fd ff86 	bl	80040fc <enq_lock>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <f_open+0xc4>
 80061f6:	f107 0318 	add.w	r3, r7, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f8de 	bl	80053bc <dir_register>
 8006200:	4603      	mov	r3, r0
 8006202:	e000      	b.n	8006206 <f_open+0xc6>
 8006204:	2312      	movs	r3, #18
 8006206:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	f043 0308 	orr.w	r3, r3, #8
 8006210:	71fb      	strb	r3, [r7, #7]
 8006212:	e010      	b.n	8006236 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006214:	7fbb      	ldrb	r3, [r7, #30]
 8006216:	f003 0311 	and.w	r3, r3, #17
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <f_open+0xe6>
					res = FR_DENIED;
 800621e:	2307      	movs	r3, #7
 8006220:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006224:	e007      	b.n	8006236 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <f_open+0xf6>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006236:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800623a:	2b00      	cmp	r3, #0
 800623c:	d168      	bne.n	8006310 <f_open+0x1d0>
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d063      	beq.n	8006310 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006248:	f7fd f83a 	bl	80032c0 <get_fattime>
 800624c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	330e      	adds	r3, #14
 8006252:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fe4b 	bl	8003ef0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	3316      	adds	r3, #22
 800625e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd fe45 	bl	8003ef0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	330b      	adds	r3, #11
 800626a:	2220      	movs	r2, #32
 800626c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe fe1a 	bl	8004eae <ld_clust>
 800627a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006280:	2200      	movs	r2, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fe32 	bl	8004eec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	331c      	adds	r3, #28
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd fe2e 	bl	8003ef0 <st_dword>
					fs->wflag = 1;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2201      	movs	r2, #1
 8006298:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800629a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629c:	2b00      	cmp	r3, #0
 800629e:	d037      	beq.n	8006310 <f_open+0x1d0>
						dw = fs->winsect;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80062a6:	f107 0318 	add.w	r3, r7, #24
 80062aa:	2200      	movs	r2, #0
 80062ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fb22 	bl	80048f8 <remove_chain>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80062ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d126      	bne.n	8006310 <f_open+0x1d0>
							res = move_window(fs, dw);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f86c 	bl	80043a4 <move_window>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062d6:	3a01      	subs	r2, #1
 80062d8:	615a      	str	r2, [r3, #20]
 80062da:	e019      	b.n	8006310 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80062dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80062e4:	7fbb      	ldrb	r3, [r7, #30]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80062ee:	2304      	movs	r3, #4
 80062f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80062f4:	e00c      	b.n	8006310 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <f_open+0x1d0>
 8006300:	7fbb      	ldrb	r3, [r7, #30]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <f_open+0x1d0>
						res = FR_DENIED;
 800630a:	2307      	movs	r3, #7
 800630c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006310:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006314:	2b00      	cmp	r3, #0
 8006316:	d126      	bne.n	8006366 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006328:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b01      	cmp	r3, #1
 800633c:	bf8c      	ite	hi
 800633e:	2301      	movhi	r3, #1
 8006340:	2300      	movls	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	f107 0318 	add.w	r3, r7, #24
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd fef7 	bl	8004140 <inc_lock>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <f_open+0x226>
 8006360:	2302      	movs	r3, #2
 8006362:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006366:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 80a3 	bne.w	80064b6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fd99 	bl	8004eae <ld_clust>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	331c      	adds	r3, #28
 8006386:	4618      	mov	r0, r3
 8006388:	f7fd fd74 	bl	8003e74 <ld_dword>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	88da      	ldrh	r2, [r3, #6]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	79fa      	ldrb	r2, [r7, #7]
 80063aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3330      	adds	r3, #48	@ 0x30
 80063c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd fdde 	bl	8003f8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d06e      	beq.n	80064b6 <f_open+0x376>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d06a      	beq.n	80064b6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	895b      	ldrh	r3, [r3, #10]
 80063ec:	461a      	mov	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	899b      	ldrh	r3, [r3, #12]
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006404:	e016      	b.n	8006434 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe f887 	bl	800451e <get_fat>
 8006410:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006414:	2b01      	cmp	r3, #1
 8006416:	d802      	bhi.n	800641e <f_open+0x2de>
 8006418:	2302      	movs	r3, #2
 800641a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800641e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006424:	d102      	bne.n	800642c <f_open+0x2ec>
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800642c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006434:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <f_open+0x304>
 800643c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800643e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006440:	429a      	cmp	r2, r3
 8006442:	d8e0      	bhi.n	8006406 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006448:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800644a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800644e:	2b00      	cmp	r3, #0
 8006450:	d131      	bne.n	80064b6 <f_open+0x376>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	899b      	ldrh	r3, [r3, #12]
 8006456:	461a      	mov	r2, r3
 8006458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800645a:	fbb3 f1f2 	udiv	r1, r3, r2
 800645e:	fb01 f202 	mul.w	r2, r1, r2
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d026      	beq.n	80064b6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe f837 	bl	80044e0 <clust2sect>
 8006472:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <f_open+0x342>
						res = FR_INT_ERR;
 800647a:	2302      	movs	r3, #2
 800647c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006480:	e019      	b.n	80064b6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	899b      	ldrh	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800648a:	fbb3 f2f2 	udiv	r2, r3, r2
 800648e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	7858      	ldrb	r0, [r3, #1]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	2301      	movs	r3, #1
 80064a6:	f7fd fc6f 	bl	8003d88 <disk_read>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <f_open+0x376>
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80064b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <f_open+0x384>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80064c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3768      	adds	r7, #104	@ 0x68
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	@ 0x38
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f107 0214 	add.w	r2, r7, #20
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fda9 	bl	8006048 <validate>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80064fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <f_read+0x44>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	7d5b      	ldrb	r3, [r3, #21]
 8006508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800650c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <f_read+0x4a>
 8006514:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006518:	e135      	b.n	8006786 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	7d1b      	ldrb	r3, [r3, #20]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <f_read+0x5a>
 8006526:	2307      	movs	r3, #7
 8006528:	e12d      	b.n	8006786 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	429a      	cmp	r2, r3
 800653c:	f240 811e 	bls.w	800677c <f_read+0x2ac>
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006544:	e11a      	b.n	800677c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	8992      	ldrh	r2, [r2, #12]
 800654e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006552:	fb01 f202 	mul.w	r2, r1, r2
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 80d5 	bne.w	8006708 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	8992      	ldrh	r2, [r2, #12]
 8006566:	fbb3 f3f2 	udiv	r3, r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	8952      	ldrh	r2, [r2, #10]
 800656e:	3a01      	subs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12f      	bne.n	80065da <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30
 8006588:	e013      	b.n	80065b2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7fe faaa 	bl	8004af2 <clmt_clust>
 800659e:	6338      	str	r0, [r7, #48]	@ 0x30
 80065a0:	e007      	b.n	80065b2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f7fd ffb7 	bl	800451e <get_fat>
 80065b0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d804      	bhi.n	80065c2 <f_read+0xf2>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2202      	movs	r2, #2
 80065bc:	755a      	strb	r2, [r3, #21]
 80065be:	2302      	movs	r3, #2
 80065c0:	e0e1      	b.n	8006786 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c8:	d104      	bne.n	80065d4 <f_read+0x104>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	755a      	strb	r2, [r3, #21]
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0d8      	b.n	8006786 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fd ff7c 	bl	80044e0 <clust2sect>
 80065e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <f_read+0x12a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2202      	movs	r2, #2
 80065f4:	755a      	strb	r2, [r3, #21]
 80065f6:	2302      	movs	r3, #2
 80065f8:	e0c5      	b.n	8006786 <f_read+0x2b6>
			sect += csect;
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	899b      	ldrh	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	fbb3 f3f2 	udiv	r3, r3, r2
 800660e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d041      	beq.n	800669a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	4413      	add	r3, r2
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	8952      	ldrh	r2, [r2, #10]
 8006620:	4293      	cmp	r3, r2
 8006622:	d905      	bls.n	8006630 <f_read+0x160>
					cc = fs->csize - csect;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	895b      	ldrh	r3, [r3, #10]
 8006628:	461a      	mov	r2, r3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	7858      	ldrb	r0, [r3, #1]
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800663a:	f7fd fba5 	bl	8003d88 <disk_read>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <f_read+0x17e>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	755a      	strb	r2, [r3, #21]
 800664a:	2301      	movs	r3, #1
 800664c:	e09b      	b.n	8006786 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	7d1b      	ldrb	r3, [r3, #20]
 8006652:	b25b      	sxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	da18      	bge.n	800668a <f_read+0x1ba>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006662:	429a      	cmp	r2, r3
 8006664:	d911      	bls.n	800668a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006678:	18d0      	adds	r0, r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	899b      	ldrh	r3, [r3, #12]
 8006684:	461a      	mov	r2, r3
 8006686:	f7fd fc5f 	bl	8003f48 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	899b      	ldrh	r3, [r3, #12]
 800668e:	461a      	mov	r2, r3
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006698:	e05c      	b.n	8006754 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d02e      	beq.n	8006702 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	7d1b      	ldrb	r3, [r3, #20]
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da18      	bge.n	80066e0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	7858      	ldrb	r0, [r3, #1]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a1a      	ldr	r2, [r3, #32]
 80066bc:	2301      	movs	r3, #1
 80066be:	f7fd fb83 	bl	8003dc8 <disk_write>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <f_read+0x202>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2201      	movs	r2, #1
 80066cc:	755a      	strb	r2, [r3, #21]
 80066ce:	2301      	movs	r3, #1
 80066d0:	e059      	b.n	8006786 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	7d1b      	ldrb	r3, [r3, #20]
 80066d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	7858      	ldrb	r0, [r3, #1]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066ea:	2301      	movs	r3, #1
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	f7fd fb4b 	bl	8003d88 <disk_read>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <f_read+0x232>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	755a      	strb	r2, [r3, #21]
 80066fe:	2301      	movs	r3, #1
 8006700:	e041      	b.n	8006786 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	899b      	ldrh	r3, [r3, #12]
 800670c:	4618      	mov	r0, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	8992      	ldrh	r2, [r2, #12]
 8006716:	fbb3 f1f2 	udiv	r1, r3, r2
 800671a:	fb01 f202 	mul.w	r2, r1, r2
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	1ac3      	subs	r3, r0, r3
 8006722:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d901      	bls.n	8006730 <f_read+0x260>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	8992      	ldrh	r2, [r2, #12]
 800673e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006742:	fb00 f202 	mul.w	r2, r0, r2
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	440b      	add	r3, r1
 800674a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800674c:	4619      	mov	r1, r3
 800674e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006750:	f7fd fbfa 	bl	8003f48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	4413      	add	r3, r2
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	619a      	str	r2, [r3, #24]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	441a      	add	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f47f aee1 	bne.w	8006546 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3738      	adds	r7, #56	@ 0x38
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08c      	sub	sp, #48	@ 0x30
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f107 0210 	add.w	r2, r7, #16
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fc4a 	bl	8006048 <validate>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80067ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <f_write+0x44>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	7d5b      	ldrb	r3, [r3, #21]
 80067c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80067ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <f_write+0x4a>
 80067d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067d6:	e16a      	b.n	8006aae <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	7d1b      	ldrb	r3, [r3, #20]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <f_write+0x5a>
 80067e4:	2307      	movs	r3, #7
 80067e6:	e162      	b.n	8006aae <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	f080 814c 	bcs.w	8006a92 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	43db      	mvns	r3, r3
 8006800:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006802:	e146      	b.n	8006a92 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	8992      	ldrh	r2, [r2, #12]
 800680c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006810:	fb01 f202 	mul.w	r2, r1, r2
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	2b00      	cmp	r3, #0
 8006818:	f040 80f1 	bne.w	80069fe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	8992      	ldrh	r2, [r2, #12]
 8006824:	fbb3 f3f2 	udiv	r3, r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	8952      	ldrh	r2, [r2, #10]
 800682c:	3a01      	subs	r2, #1
 800682e:	4013      	ands	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d143      	bne.n	80068c0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11a      	bne.n	8006882 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8b6 	bl	80049c2 <create_chain>
 8006856:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006858:	e013      	b.n	8006882 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4619      	mov	r1, r3
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7fe f942 	bl	8004af2 <clmt_clust>
 800686e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006870:	e007      	b.n	8006882 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fe f8a1 	bl	80049c2 <create_chain>
 8006880:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8109 	beq.w	8006a9c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	2b01      	cmp	r3, #1
 800688e:	d104      	bne.n	800689a <f_write+0x10c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	755a      	strb	r2, [r3, #21]
 8006896:	2302      	movs	r3, #2
 8006898:	e109      	b.n	8006aae <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a0:	d104      	bne.n	80068ac <f_write+0x11e>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	755a      	strb	r2, [r3, #21]
 80068a8:	2301      	movs	r3, #1
 80068aa:	e100      	b.n	8006aae <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <f_write+0x132>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	7d1b      	ldrb	r3, [r3, #20]
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da18      	bge.n	80068fc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	7858      	ldrb	r0, [r3, #1]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	2301      	movs	r3, #1
 80068da:	f7fd fa75 	bl	8003dc8 <disk_write>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <f_write+0x160>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	755a      	strb	r2, [r3, #21]
 80068ea:	2301      	movs	r3, #1
 80068ec:	e0df      	b.n	8006aae <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7d1b      	ldrb	r3, [r3, #20]
 80068f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f7fd fdeb 	bl	80044e0 <clust2sect>
 800690a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <f_write+0x18e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	755a      	strb	r2, [r3, #21]
 8006918:	2302      	movs	r3, #2
 800691a:	e0c8      	b.n	8006aae <f_write+0x320>
			sect += csect;
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	899b      	ldrh	r3, [r3, #12]
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006930:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d043      	beq.n	80069c0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	8952      	ldrh	r2, [r2, #10]
 8006942:	4293      	cmp	r3, r2
 8006944:	d905      	bls.n	8006952 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	895b      	ldrh	r3, [r3, #10]
 800694a:	461a      	mov	r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	7858      	ldrb	r0, [r3, #1]
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	69f9      	ldr	r1, [r7, #28]
 800695c:	f7fd fa34 	bl	8003dc8 <disk_write>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <f_write+0x1e2>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	755a      	strb	r2, [r3, #21]
 800696c:	2301      	movs	r3, #1
 800696e:	e09e      	b.n	8006aae <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1a      	ldr	r2, [r3, #32]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	429a      	cmp	r2, r3
 800697c:	d918      	bls.n	80069b0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	8992      	ldrh	r2, [r2, #12]
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	18d1      	adds	r1, r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	899b      	ldrh	r3, [r3, #12]
 800699c:	461a      	mov	r2, r3
 800699e:	f7fd fad3 	bl	8003f48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	7d1b      	ldrb	r3, [r3, #20]
 80069a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	899b      	ldrh	r3, [r3, #12]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80069be:	e04b      	b.n	8006a58 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d016      	beq.n	80069f8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d210      	bcs.n	80069f8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	7858      	ldrb	r0, [r3, #1]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069e0:	2301      	movs	r3, #1
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	f7fd f9d0 	bl	8003d88 <disk_read>
 80069e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	755a      	strb	r2, [r3, #21]
 80069f4:	2301      	movs	r3, #1
 80069f6:	e05a      	b.n	8006aae <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	899b      	ldrh	r3, [r3, #12]
 8006a02:	4618      	mov	r0, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	8992      	ldrh	r2, [r2, #12]
 8006a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a10:	fb01 f202 	mul.w	r2, r1, r2
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	1ac3      	subs	r3, r0, r3
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d901      	bls.n	8006a26 <f_write+0x298>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	8992      	ldrh	r2, [r2, #12]
 8006a34:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a38:	fb00 f202 	mul.w	r2, r0, r2
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	440b      	add	r3, r1
 8006a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a42:	69f9      	ldr	r1, [r7, #28]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fa7f 	bl	8003f48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	7d1b      	ldrb	r3, [r3, #20]
 8006a4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	441a      	add	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	619a      	str	r2, [r3, #24]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bf38      	it	cc
 8006a78:	461a      	movcc	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	441a      	add	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f47f aeb5 	bne.w	8006804 <f_write+0x76>
 8006a9a:	e000      	b.n	8006a9e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a9c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7d1b      	ldrb	r3, [r3, #20]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3730      	adds	r7, #48	@ 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f107 0208 	add.w	r2, r7, #8
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fabe 	bl	8006048 <validate>
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d168      	bne.n	8006ba8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7d1b      	ldrb	r3, [r3, #20]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d062      	beq.n	8006ba8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7d1b      	ldrb	r3, [r3, #20]
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da15      	bge.n	8006b18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	7858      	ldrb	r0, [r3, #1]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	2301      	movs	r3, #1
 8006afc:	f7fd f964 	bl	8003dc8 <disk_write>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <f_sync+0x54>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e04f      	b.n	8006baa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7d1b      	ldrb	r3, [r3, #20]
 8006b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006b18:	f7fc fbd2 	bl	80032c0 <get_fattime>
 8006b1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fd fc3c 	bl	80043a4 <move_window>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d138      	bne.n	8006ba8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	330b      	adds	r3, #11
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	330b      	adds	r3, #11
 8006b46:	f042 0220 	orr.w	r2, r2, #32
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	f7fe f9c7 	bl	8004eec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f103 021c 	add.w	r2, r3, #28
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fd f9c0 	bl	8003ef0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3316      	adds	r3, #22
 8006b74:	6939      	ldr	r1, [r7, #16]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fd f9ba 	bl	8003ef0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3312      	adds	r3, #18
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fd f999 	bl	8003eba <st_word>
					fs->wflag = 1;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd fc35 	bl	8004400 <sync_fs>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7d1b      	ldrb	r3, [r3, #20]
 8006b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff ff7b 	bl	8006ab6 <f_sync>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d118      	bne.n	8006bfc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f107 0208 	add.w	r2, r7, #8
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fa38 	bl	8006048 <validate>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10c      	bne.n	8006bfc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fb38 	bl	800425c <dec_lock>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d102      	bne.n	8006bfc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b090      	sub	sp, #64	@ 0x40
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f107 0208 	add.w	r2, r7, #8
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fa15 	bl	8006048 <validate>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006c24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <f_lseek+0x2e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7d5b      	ldrb	r3, [r3, #21]
 8006c30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006c34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <f_lseek+0x3c>
 8006c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c40:	e201      	b.n	8007046 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80d9 	beq.w	8006dfe <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c52:	d15a      	bne.n	8006d0a <f_lseek+0x104>
			tbl = fp->cltbl;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	2302      	movs	r3, #2
 8006c66:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d03a      	beq.n	8006cea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	3302      	adds	r3, #2
 8006c80:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	3301      	adds	r3, #1
 8006c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd fc44 	bl	800451e <get_fat>
 8006c96:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d804      	bhi.n	8006ca8 <f_lseek+0xa2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	755a      	strb	r2, [r3, #21]
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e1ce      	b.n	8007046 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cae:	d104      	bne.n	8006cba <f_lseek+0xb4>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	755a      	strb	r2, [r3, #21]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e1c5      	b.n	8007046 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d0de      	beq.n	8006c82 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d809      	bhi.n	8006ce0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	1d1a      	adds	r2, r3, #4
 8006cda:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d3c4      	bcc.n	8006c74 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d803      	bhi.n	8006d02 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e19f      	b.n	8007042 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006d02:	2311      	movs	r3, #17
 8006d04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006d08:	e19b      	b.n	8007042 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d902      	bls.n	8006d1a <f_lseek+0x114>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 818d 	beq.w	8007042 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fd fedf 	bl	8004af2 <clmt_clust>
 8006d34:	4602      	mov	r2, r0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4619      	mov	r1, r3
 8006d42:	4610      	mov	r0, r2
 8006d44:	f7fd fbcc 	bl	80044e0 <clust2sect>
 8006d48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <f_lseek+0x154>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	755a      	strb	r2, [r3, #21]
 8006d56:	2302      	movs	r3, #2
 8006d58:	e175      	b.n	8007046 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	8992      	ldrh	r2, [r2, #12]
 8006d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	8952      	ldrh	r2, [r2, #10]
 8006d6a:	3a01      	subs	r2, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4413      	add	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	8992      	ldrh	r2, [r2, #12]
 8006d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d80:	fb01 f202 	mul.w	r2, r1, r2
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 815b 	beq.w	8007042 <f_lseek+0x43c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	f000 8155 	beq.w	8007042 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7d1b      	ldrb	r3, [r3, #20]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da18      	bge.n	8006dd4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	7858      	ldrb	r0, [r3, #1]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	2301      	movs	r3, #1
 8006db2:	f7fd f809 	bl	8003dc8 <disk_write>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d004      	beq.n	8006dc6 <f_lseek+0x1c0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	755a      	strb	r2, [r3, #21]
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e13f      	b.n	8007046 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7d1b      	ldrb	r3, [r3, #20]
 8006dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	7858      	ldrb	r0, [r3, #1]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dde:	2301      	movs	r3, #1
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	f7fc ffd1 	bl	8003d88 <disk_read>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <f_lseek+0x1f0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	755a      	strb	r2, [r3, #21]
 8006df2:	2301      	movs	r3, #1
 8006df4:	e127      	b.n	8007046 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	621a      	str	r2, [r3, #32]
 8006dfc:	e121      	b.n	8007042 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d908      	bls.n	8006e1a <f_lseek+0x214>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7d1b      	ldrb	r3, [r3, #20]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e28:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 80b5 	beq.w	8006f9c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	895b      	ldrh	r3, [r3, #10]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	899b      	ldrh	r3, [r3, #12]
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	1e5a      	subs	r2, r3, #1
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	1e59      	subs	r1, r3, #1
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d30f      	bcc.n	8006e80 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	1e5a      	subs	r2, r3, #1
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	425b      	negs	r3, r3
 8006e68:	401a      	ands	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e7e:	e022      	b.n	8006ec6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d119      	bne.n	8006ec0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd fd96 	bl	80049c2 <create_chain>
 8006e96:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d104      	bne.n	8006ea8 <f_lseek+0x2a2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	755a      	strb	r2, [r3, #21]
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e0ce      	b.n	8007046 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eae:	d104      	bne.n	8006eba <f_lseek+0x2b4>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	755a      	strb	r2, [r3, #21]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e0c5      	b.n	8007046 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ebe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ec4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d067      	beq.n	8006f9c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006ecc:	e03a      	b.n	8006f44 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7d1b      	ldrb	r3, [r3, #20]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fd65 	bl	80049c2 <create_chain>
 8006ef8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <f_lseek+0x30c>
							ofs = 0; break;
 8006f00:	2300      	movs	r3, #0
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	e022      	b.n	8006f4c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fd fb07 	bl	800451e <get_fat>
 8006f10:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f18:	d104      	bne.n	8006f24 <f_lseek+0x31e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	755a      	strb	r2, [r3, #21]
 8006f20:	2301      	movs	r3, #1
 8006f22:	e090      	b.n	8007046 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d904      	bls.n	8006f34 <f_lseek+0x32e>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d304      	bcc.n	8006f3e <f_lseek+0x338>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	755a      	strb	r2, [r3, #21]
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e083      	b.n	8007046 <f_lseek+0x440>
					fp->clust = clst;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f42:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d8c0      	bhi.n	8006ece <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	441a      	add	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	899b      	ldrh	r3, [r3, #12]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f64:	fb01 f202 	mul.w	r2, r1, r2
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fab4 	bl	80044e0 <clust2sect>
 8006f78:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <f_lseek+0x384>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	755a      	strb	r2, [r3, #21]
 8006f86:	2302      	movs	r3, #2
 8006f88:	e05d      	b.n	8007046 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	899b      	ldrh	r3, [r3, #12]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f98:	4413      	add	r3, r2
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d90a      	bls.n	8006fbe <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7d1b      	ldrb	r3, [r3, #20]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	8992      	ldrh	r2, [r2, #12]
 8006fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fca:	fb01 f202 	mul.w	r2, r1, r2
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d036      	beq.n	8007042 <f_lseek+0x43c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d031      	beq.n	8007042 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7d1b      	ldrb	r3, [r3, #20]
 8006fe2:	b25b      	sxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da18      	bge.n	800701a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	7858      	ldrb	r0, [r3, #1]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f7fc fee6 	bl	8003dc8 <disk_write>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <f_lseek+0x406>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	755a      	strb	r2, [r3, #21]
 8007008:	2301      	movs	r3, #1
 800700a:	e01c      	b.n	8007046 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7d1b      	ldrb	r3, [r3, #20]
 8007010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007014:	b2da      	uxtb	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	7858      	ldrb	r0, [r3, #1]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007024:	2301      	movs	r3, #1
 8007026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007028:	f7fc feae 	bl	8003d88 <disk_read>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <f_lseek+0x436>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	755a      	strb	r2, [r3, #21]
 8007038:	2301      	movs	r3, #1
 800703a:	e004      	b.n	8007046 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007040:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007042:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007046:	4618      	mov	r0, r3
 8007048:	3740      	adds	r7, #64	@ 0x40
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4613      	mov	r3, r2
 800705c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007066:	4b1f      	ldr	r3, [pc, #124]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007068:	7a5b      	ldrb	r3, [r3, #9]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d131      	bne.n	80070d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007070:	4b1c      	ldr	r3, [pc, #112]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007072:	7a5b      	ldrb	r3, [r3, #9]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 800707a:	2100      	movs	r1, #0
 800707c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800707e:	4b19      	ldr	r3, [pc, #100]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007080:	7a5b      	ldrb	r3, [r3, #9]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4a17      	ldr	r2, [pc, #92]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800708e:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007090:	7a5b      	ldrb	r3, [r3, #9]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 8007098:	4413      	add	r3, r2
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800709e:	4b11      	ldr	r3, [pc, #68]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 80070a0:	7a5b      	ldrb	r3, [r3, #9]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	b2d1      	uxtb	r1, r2
 80070a8:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <FATFS_LinkDriverEx+0x94>)
 80070aa:	7251      	strb	r1, [r2, #9]
 80070ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	3330      	adds	r3, #48	@ 0x30
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3301      	adds	r3, #1
 80070bc:	223a      	movs	r2, #58	@ 0x3a
 80070be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3302      	adds	r3, #2
 80070c4:	222f      	movs	r2, #47	@ 0x2f
 80070c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3303      	adds	r3, #3
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	200004d0 	.word	0x200004d0

080070e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070f2:	2200      	movs	r2, #0
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ffaa 	bl	8007050 <FATFS_LinkDriverEx>
 80070fc:	4603      	mov	r3, r0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	2b7f      	cmp	r3, #127	@ 0x7f
 8007118:	d802      	bhi.n	8007120 <ff_convert+0x18>
		c = chr;
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	81fb      	strh	r3, [r7, #14]
 800711e:	e025      	b.n	800716c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	2bff      	cmp	r3, #255	@ 0xff
 800712a:	d805      	bhi.n	8007138 <ff_convert+0x30>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	3b80      	subs	r3, #128	@ 0x80
 8007130:	4a12      	ldr	r2, [pc, #72]	@ (800717c <ff_convert+0x74>)
 8007132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007136:	e000      	b.n	800713a <ff_convert+0x32>
 8007138:	2300      	movs	r3, #0
 800713a:	81fb      	strh	r3, [r7, #14]
 800713c:	e016      	b.n	800716c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800713e:	2300      	movs	r3, #0
 8007140:	81fb      	strh	r3, [r7, #14]
 8007142:	e009      	b.n	8007158 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007144:	89fb      	ldrh	r3, [r7, #14]
 8007146:	4a0d      	ldr	r2, [pc, #52]	@ (800717c <ff_convert+0x74>)
 8007148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	429a      	cmp	r2, r3
 8007150:	d006      	beq.n	8007160 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007152:	89fb      	ldrh	r3, [r7, #14]
 8007154:	3301      	adds	r3, #1
 8007156:	81fb      	strh	r3, [r7, #14]
 8007158:	89fb      	ldrh	r3, [r7, #14]
 800715a:	2b7f      	cmp	r3, #127	@ 0x7f
 800715c:	d9f2      	bls.n	8007144 <ff_convert+0x3c>
 800715e:	e000      	b.n	8007162 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007160:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007162:	89fb      	ldrh	r3, [r7, #14]
 8007164:	3380      	adds	r3, #128	@ 0x80
 8007166:	b29b      	uxth	r3, r3
 8007168:	b2db      	uxtb	r3, r3
 800716a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800716c:	89fb      	ldrh	r3, [r7, #14]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	080089d0 	.word	0x080089d0

08007180 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007190:	d201      	bcs.n	8007196 <ff_wtoupper+0x16>
 8007192:	4b3e      	ldr	r3, [pc, #248]	@ (800728c <ff_wtoupper+0x10c>)
 8007194:	e000      	b.n	8007198 <ff_wtoupper+0x18>
 8007196:	4b3e      	ldr	r3, [pc, #248]	@ (8007290 <ff_wtoupper+0x110>)
 8007198:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	1c9a      	adds	r2, r3, #2
 800719e:	617a      	str	r2, [r7, #20]
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80071a4:	8a7b      	ldrh	r3, [r7, #18]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d068      	beq.n	800727c <ff_wtoupper+0xfc>
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	8a7b      	ldrh	r3, [r7, #18]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d364      	bcc.n	800727c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	617a      	str	r2, [r7, #20]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	823b      	strh	r3, [r7, #16]
 80071bc:	8a3b      	ldrh	r3, [r7, #16]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	81fb      	strh	r3, [r7, #14]
 80071c2:	8a3b      	ldrh	r3, [r7, #16]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	8a79      	ldrh	r1, [r7, #18]
 80071cc:	8a3b      	ldrh	r3, [r7, #16]
 80071ce:	440b      	add	r3, r1
 80071d0:	429a      	cmp	r2, r3
 80071d2:	da49      	bge.n	8007268 <ff_wtoupper+0xe8>
			switch (cmd) {
 80071d4:	89fb      	ldrh	r3, [r7, #14]
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d84f      	bhi.n	800727a <ff_wtoupper+0xfa>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <ff_wtoupper+0x60>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007205 	.word	0x08007205
 80071e4:	08007217 	.word	0x08007217
 80071e8:	0800722d 	.word	0x0800722d
 80071ec:	08007235 	.word	0x08007235
 80071f0:	0800723d 	.word	0x0800723d
 80071f4:	08007245 	.word	0x08007245
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	08007255 	.word	0x08007255
 8007200:	0800725d 	.word	0x0800725d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007204:	88fa      	ldrh	r2, [r7, #6]
 8007206:	8a7b      	ldrh	r3, [r7, #18]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	80fb      	strh	r3, [r7, #6]
 8007214:	e027      	b.n	8007266 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	8a7b      	ldrh	r3, [r7, #18]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	b29b      	uxth	r3, r3
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	b29b      	uxth	r3, r3
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	80fb      	strh	r3, [r7, #6]
 800722a:	e01c      	b.n	8007266 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	3b10      	subs	r3, #16
 8007230:	80fb      	strh	r3, [r7, #6]
 8007232:	e018      	b.n	8007266 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	3b20      	subs	r3, #32
 8007238:	80fb      	strh	r3, [r7, #6]
 800723a:	e014      	b.n	8007266 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	3b30      	subs	r3, #48	@ 0x30
 8007240:	80fb      	strh	r3, [r7, #6]
 8007242:	e010      	b.n	8007266 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	3b1a      	subs	r3, #26
 8007248:	80fb      	strh	r3, [r7, #6]
 800724a:	e00c      	b.n	8007266 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	3308      	adds	r3, #8
 8007250:	80fb      	strh	r3, [r7, #6]
 8007252:	e008      	b.n	8007266 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	3b50      	subs	r3, #80	@ 0x50
 8007258:	80fb      	strh	r3, [r7, #6]
 800725a:	e004      	b.n	8007266 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	bf00      	nop
			}
			break;
 8007266:	e008      	b.n	800727a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d195      	bne.n	800719a <ff_wtoupper+0x1a>
 800726e:	8a3b      	ldrh	r3, [r7, #16]
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007278:	e78f      	b.n	800719a <ff_wtoupper+0x1a>
			break;
 800727a:	bf00      	nop
	}

	return chr;
 800727c:	88fb      	ldrh	r3, [r7, #6]
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	08008ad0 	.word	0x08008ad0
 8007290:	08008cc4 	.word	0x08008cc4

08007294 <siprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b500      	push	{lr}
 8007298:	b09c      	sub	sp, #112	@ 0x70
 800729a:	ab1d      	add	r3, sp, #116	@ 0x74
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072a4:	4809      	ldr	r0, [pc, #36]	@ (80072cc <siprintf+0x38>)
 80072a6:	9107      	str	r1, [sp, #28]
 80072a8:	9104      	str	r1, [sp, #16]
 80072aa:	4909      	ldr	r1, [pc, #36]	@ (80072d0 <siprintf+0x3c>)
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	f000 f970 	bl	800759c <_svfiprintf_r>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	b01c      	add	sp, #112	@ 0x70
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	20000030 	.word	0x20000030
 80072d0:	ffff0208 	.word	0xffff0208

080072d4 <std>:
 80072d4:	2300      	movs	r3, #0
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	e9c0 3300 	strd	r3, r3, [r0]
 80072de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e2:	6083      	str	r3, [r0, #8]
 80072e4:	8181      	strh	r1, [r0, #12]
 80072e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80072e8:	81c2      	strh	r2, [r0, #14]
 80072ea:	6183      	str	r3, [r0, #24]
 80072ec:	4619      	mov	r1, r3
 80072ee:	2208      	movs	r2, #8
 80072f0:	305c      	adds	r0, #92	@ 0x5c
 80072f2:	f000 f8c3 	bl	800747c <memset>
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <std+0x58>)
 80072f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <std+0x5c>)
 80072fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <std+0x60>)
 8007300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <std+0x64>)
 8007304:	6323      	str	r3, [r4, #48]	@ 0x30
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <std+0x68>)
 8007308:	6224      	str	r4, [r4, #32]
 800730a:	429c      	cmp	r4, r3
 800730c:	d006      	beq.n	800731c <std+0x48>
 800730e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007312:	4294      	cmp	r4, r2
 8007314:	d002      	beq.n	800731c <std+0x48>
 8007316:	33d0      	adds	r3, #208	@ 0xd0
 8007318:	429c      	cmp	r4, r3
 800731a:	d105      	bne.n	8007328 <std+0x54>
 800731c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f000 b8dc 	b.w	80074e0 <__retarget_lock_init_recursive>
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08007fe9 	.word	0x08007fe9
 8007330:	0800800b 	.word	0x0800800b
 8007334:	08008043 	.word	0x08008043
 8007338:	08008067 	.word	0x08008067
 800733c:	200004dc 	.word	0x200004dc

08007340 <stdio_exit_handler>:
 8007340:	4a02      	ldr	r2, [pc, #8]	@ (800734c <stdio_exit_handler+0xc>)
 8007342:	4903      	ldr	r1, [pc, #12]	@ (8007350 <stdio_exit_handler+0x10>)
 8007344:	4803      	ldr	r0, [pc, #12]	@ (8007354 <stdio_exit_handler+0x14>)
 8007346:	f000 b869 	b.w	800741c <_fwalk_sglue>
 800734a:	bf00      	nop
 800734c:	20000024 	.word	0x20000024
 8007350:	08007f81 	.word	0x08007f81
 8007354:	20000034 	.word	0x20000034

08007358 <cleanup_stdio>:
 8007358:	6841      	ldr	r1, [r0, #4]
 800735a:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <cleanup_stdio+0x34>)
 800735c:	4299      	cmp	r1, r3
 800735e:	b510      	push	{r4, lr}
 8007360:	4604      	mov	r4, r0
 8007362:	d001      	beq.n	8007368 <cleanup_stdio+0x10>
 8007364:	f000 fe0c 	bl	8007f80 <_fflush_r>
 8007368:	68a1      	ldr	r1, [r4, #8]
 800736a:	4b09      	ldr	r3, [pc, #36]	@ (8007390 <cleanup_stdio+0x38>)
 800736c:	4299      	cmp	r1, r3
 800736e:	d002      	beq.n	8007376 <cleanup_stdio+0x1e>
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fe05 	bl	8007f80 <_fflush_r>
 8007376:	68e1      	ldr	r1, [r4, #12]
 8007378:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <cleanup_stdio+0x3c>)
 800737a:	4299      	cmp	r1, r3
 800737c:	d004      	beq.n	8007388 <cleanup_stdio+0x30>
 800737e:	4620      	mov	r0, r4
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	f000 bdfc 	b.w	8007f80 <_fflush_r>
 8007388:	bd10      	pop	{r4, pc}
 800738a:	bf00      	nop
 800738c:	200004dc 	.word	0x200004dc
 8007390:	20000544 	.word	0x20000544
 8007394:	200005ac 	.word	0x200005ac

08007398 <global_stdio_init.part.0>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <global_stdio_init.part.0+0x30>)
 800739c:	4c0b      	ldr	r4, [pc, #44]	@ (80073cc <global_stdio_init.part.0+0x34>)
 800739e:	4a0c      	ldr	r2, [pc, #48]	@ (80073d0 <global_stdio_init.part.0+0x38>)
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	4620      	mov	r0, r4
 80073a4:	2200      	movs	r2, #0
 80073a6:	2104      	movs	r1, #4
 80073a8:	f7ff ff94 	bl	80072d4 <std>
 80073ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073b0:	2201      	movs	r2, #1
 80073b2:	2109      	movs	r1, #9
 80073b4:	f7ff ff8e 	bl	80072d4 <std>
 80073b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073bc:	2202      	movs	r2, #2
 80073be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c2:	2112      	movs	r1, #18
 80073c4:	f7ff bf86 	b.w	80072d4 <std>
 80073c8:	20000614 	.word	0x20000614
 80073cc:	200004dc 	.word	0x200004dc
 80073d0:	08007341 	.word	0x08007341

080073d4 <__sfp_lock_acquire>:
 80073d4:	4801      	ldr	r0, [pc, #4]	@ (80073dc <__sfp_lock_acquire+0x8>)
 80073d6:	f000 b884 	b.w	80074e2 <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	20000619 	.word	0x20000619

080073e0 <__sfp_lock_release>:
 80073e0:	4801      	ldr	r0, [pc, #4]	@ (80073e8 <__sfp_lock_release+0x8>)
 80073e2:	f000 b87f 	b.w	80074e4 <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000619 	.word	0x20000619

080073ec <__sinit>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7ff fff0 	bl	80073d4 <__sfp_lock_acquire>
 80073f4:	6a23      	ldr	r3, [r4, #32]
 80073f6:	b11b      	cbz	r3, 8007400 <__sinit+0x14>
 80073f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fc:	f7ff bff0 	b.w	80073e0 <__sfp_lock_release>
 8007400:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <__sinit+0x28>)
 8007402:	6223      	str	r3, [r4, #32]
 8007404:	4b04      	ldr	r3, [pc, #16]	@ (8007418 <__sinit+0x2c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f5      	bne.n	80073f8 <__sinit+0xc>
 800740c:	f7ff ffc4 	bl	8007398 <global_stdio_init.part.0>
 8007410:	e7f2      	b.n	80073f8 <__sinit+0xc>
 8007412:	bf00      	nop
 8007414:	08007359 	.word	0x08007359
 8007418:	20000614 	.word	0x20000614

0800741c <_fwalk_sglue>:
 800741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007420:	4607      	mov	r7, r0
 8007422:	4688      	mov	r8, r1
 8007424:	4614      	mov	r4, r2
 8007426:	2600      	movs	r6, #0
 8007428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800742c:	f1b9 0901 	subs.w	r9, r9, #1
 8007430:	d505      	bpl.n	800743e <_fwalk_sglue+0x22>
 8007432:	6824      	ldr	r4, [r4, #0]
 8007434:	2c00      	cmp	r4, #0
 8007436:	d1f7      	bne.n	8007428 <_fwalk_sglue+0xc>
 8007438:	4630      	mov	r0, r6
 800743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d907      	bls.n	8007454 <_fwalk_sglue+0x38>
 8007444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007448:	3301      	adds	r3, #1
 800744a:	d003      	beq.n	8007454 <_fwalk_sglue+0x38>
 800744c:	4629      	mov	r1, r5
 800744e:	4638      	mov	r0, r7
 8007450:	47c0      	blx	r8
 8007452:	4306      	orrs	r6, r0
 8007454:	3568      	adds	r5, #104	@ 0x68
 8007456:	e7e9      	b.n	800742c <_fwalk_sglue+0x10>

08007458 <iprintf>:
 8007458:	b40f      	push	{r0, r1, r2, r3}
 800745a:	b507      	push	{r0, r1, r2, lr}
 800745c:	4906      	ldr	r1, [pc, #24]	@ (8007478 <iprintf+0x20>)
 800745e:	ab04      	add	r3, sp, #16
 8007460:	6808      	ldr	r0, [r1, #0]
 8007462:	f853 2b04 	ldr.w	r2, [r3], #4
 8007466:	6881      	ldr	r1, [r0, #8]
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	f000 f9bd 	bl	80077e8 <_vfiprintf_r>
 800746e:	b003      	add	sp, #12
 8007470:	f85d eb04 	ldr.w	lr, [sp], #4
 8007474:	b004      	add	sp, #16
 8007476:	4770      	bx	lr
 8007478:	20000030 	.word	0x20000030

0800747c <memset>:
 800747c:	4402      	add	r2, r0
 800747e:	4603      	mov	r3, r0
 8007480:	4293      	cmp	r3, r2
 8007482:	d100      	bne.n	8007486 <memset+0xa>
 8007484:	4770      	bx	lr
 8007486:	f803 1b01 	strb.w	r1, [r3], #1
 800748a:	e7f9      	b.n	8007480 <memset+0x4>

0800748c <__errno>:
 800748c:	4b01      	ldr	r3, [pc, #4]	@ (8007494 <__errno+0x8>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000030 	.word	0x20000030

08007498 <__libc_init_array>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4d0d      	ldr	r5, [pc, #52]	@ (80074d0 <__libc_init_array+0x38>)
 800749c:	4c0d      	ldr	r4, [pc, #52]	@ (80074d4 <__libc_init_array+0x3c>)
 800749e:	1b64      	subs	r4, r4, r5
 80074a0:	10a4      	asrs	r4, r4, #2
 80074a2:	2600      	movs	r6, #0
 80074a4:	42a6      	cmp	r6, r4
 80074a6:	d109      	bne.n	80074bc <__libc_init_array+0x24>
 80074a8:	4d0b      	ldr	r5, [pc, #44]	@ (80074d8 <__libc_init_array+0x40>)
 80074aa:	4c0c      	ldr	r4, [pc, #48]	@ (80074dc <__libc_init_array+0x44>)
 80074ac:	f000 fff6 	bl	800849c <_init>
 80074b0:	1b64      	subs	r4, r4, r5
 80074b2:	10a4      	asrs	r4, r4, #2
 80074b4:	2600      	movs	r6, #0
 80074b6:	42a6      	cmp	r6, r4
 80074b8:	d105      	bne.n	80074c6 <__libc_init_array+0x2e>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c0:	4798      	blx	r3
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7ee      	b.n	80074a4 <__libc_init_array+0xc>
 80074c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ca:	4798      	blx	r3
 80074cc:	3601      	adds	r6, #1
 80074ce:	e7f2      	b.n	80074b6 <__libc_init_array+0x1e>
 80074d0:	08008dbc 	.word	0x08008dbc
 80074d4:	08008dbc 	.word	0x08008dbc
 80074d8:	08008dbc 	.word	0x08008dbc
 80074dc:	08008dc0 	.word	0x08008dc0

080074e0 <__retarget_lock_init_recursive>:
 80074e0:	4770      	bx	lr

080074e2 <__retarget_lock_acquire_recursive>:
 80074e2:	4770      	bx	lr

080074e4 <__retarget_lock_release_recursive>:
 80074e4:	4770      	bx	lr

080074e6 <__ssputs_r>:
 80074e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ea:	688e      	ldr	r6, [r1, #8]
 80074ec:	461f      	mov	r7, r3
 80074ee:	42be      	cmp	r6, r7
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	4682      	mov	sl, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	4690      	mov	r8, r2
 80074f8:	d82d      	bhi.n	8007556 <__ssputs_r+0x70>
 80074fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007502:	d026      	beq.n	8007552 <__ssputs_r+0x6c>
 8007504:	6965      	ldr	r5, [r4, #20]
 8007506:	6909      	ldr	r1, [r1, #16]
 8007508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800750c:	eba3 0901 	sub.w	r9, r3, r1
 8007510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007514:	1c7b      	adds	r3, r7, #1
 8007516:	444b      	add	r3, r9
 8007518:	106d      	asrs	r5, r5, #1
 800751a:	429d      	cmp	r5, r3
 800751c:	bf38      	it	cc
 800751e:	461d      	movcc	r5, r3
 8007520:	0553      	lsls	r3, r2, #21
 8007522:	d527      	bpl.n	8007574 <__ssputs_r+0x8e>
 8007524:	4629      	mov	r1, r5
 8007526:	f000 fa99 	bl	8007a5c <_malloc_r>
 800752a:	4606      	mov	r6, r0
 800752c:	b360      	cbz	r0, 8007588 <__ssputs_r+0xa2>
 800752e:	6921      	ldr	r1, [r4, #16]
 8007530:	464a      	mov	r2, r9
 8007532:	f000 ff53 	bl	80083dc <memcpy>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800753c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	6126      	str	r6, [r4, #16]
 8007544:	6165      	str	r5, [r4, #20]
 8007546:	444e      	add	r6, r9
 8007548:	eba5 0509 	sub.w	r5, r5, r9
 800754c:	6026      	str	r6, [r4, #0]
 800754e:	60a5      	str	r5, [r4, #8]
 8007550:	463e      	mov	r6, r7
 8007552:	42be      	cmp	r6, r7
 8007554:	d900      	bls.n	8007558 <__ssputs_r+0x72>
 8007556:	463e      	mov	r6, r7
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	4632      	mov	r2, r6
 800755c:	4641      	mov	r1, r8
 800755e:	f000 feab 	bl	80082b8 <memmove>
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	1b9b      	subs	r3, r3, r6
 8007566:	60a3      	str	r3, [r4, #8]
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	4433      	add	r3, r6
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	2000      	movs	r0, #0
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	462a      	mov	r2, r5
 8007576:	f000 fd7a 	bl	800806e <_realloc_r>
 800757a:	4606      	mov	r6, r0
 800757c:	2800      	cmp	r0, #0
 800757e:	d1e0      	bne.n	8007542 <__ssputs_r+0x5c>
 8007580:	6921      	ldr	r1, [r4, #16]
 8007582:	4650      	mov	r0, sl
 8007584:	f000 ff38 	bl	80083f8 <_free_r>
 8007588:	230c      	movs	r3, #12
 800758a:	f8ca 3000 	str.w	r3, [sl]
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800759a:	e7e9      	b.n	8007570 <__ssputs_r+0x8a>

0800759c <_svfiprintf_r>:
 800759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	4698      	mov	r8, r3
 80075a2:	898b      	ldrh	r3, [r1, #12]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	b09d      	sub	sp, #116	@ 0x74
 80075a8:	4607      	mov	r7, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	d510      	bpl.n	80075d2 <_svfiprintf_r+0x36>
 80075b0:	690b      	ldr	r3, [r1, #16]
 80075b2:	b973      	cbnz	r3, 80075d2 <_svfiprintf_r+0x36>
 80075b4:	2140      	movs	r1, #64	@ 0x40
 80075b6:	f000 fa51 	bl	8007a5c <_malloc_r>
 80075ba:	6028      	str	r0, [r5, #0]
 80075bc:	6128      	str	r0, [r5, #16]
 80075be:	b930      	cbnz	r0, 80075ce <_svfiprintf_r+0x32>
 80075c0:	230c      	movs	r3, #12
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c8:	b01d      	add	sp, #116	@ 0x74
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	2340      	movs	r3, #64	@ 0x40
 80075d0:	616b      	str	r3, [r5, #20]
 80075d2:	2300      	movs	r3, #0
 80075d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d6:	2320      	movs	r3, #32
 80075d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e0:	2330      	movs	r3, #48	@ 0x30
 80075e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007780 <_svfiprintf_r+0x1e4>
 80075e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075ea:	f04f 0901 	mov.w	r9, #1
 80075ee:	4623      	mov	r3, r4
 80075f0:	469a      	mov	sl, r3
 80075f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f6:	b10a      	cbz	r2, 80075fc <_svfiprintf_r+0x60>
 80075f8:	2a25      	cmp	r2, #37	@ 0x25
 80075fa:	d1f9      	bne.n	80075f0 <_svfiprintf_r+0x54>
 80075fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007600:	d00b      	beq.n	800761a <_svfiprintf_r+0x7e>
 8007602:	465b      	mov	r3, fp
 8007604:	4622      	mov	r2, r4
 8007606:	4629      	mov	r1, r5
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff ff6c 	bl	80074e6 <__ssputs_r>
 800760e:	3001      	adds	r0, #1
 8007610:	f000 80a7 	beq.w	8007762 <_svfiprintf_r+0x1c6>
 8007614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007616:	445a      	add	r2, fp
 8007618:	9209      	str	r2, [sp, #36]	@ 0x24
 800761a:	f89a 3000 	ldrb.w	r3, [sl]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 809f 	beq.w	8007762 <_svfiprintf_r+0x1c6>
 8007624:	2300      	movs	r3, #0
 8007626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800762a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800762e:	f10a 0a01 	add.w	sl, sl, #1
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	9307      	str	r3, [sp, #28]
 8007636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800763a:	931a      	str	r3, [sp, #104]	@ 0x68
 800763c:	4654      	mov	r4, sl
 800763e:	2205      	movs	r2, #5
 8007640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007644:	484e      	ldr	r0, [pc, #312]	@ (8007780 <_svfiprintf_r+0x1e4>)
 8007646:	f7f8 fdeb 	bl	8000220 <memchr>
 800764a:	9a04      	ldr	r2, [sp, #16]
 800764c:	b9d8      	cbnz	r0, 8007686 <_svfiprintf_r+0xea>
 800764e:	06d0      	lsls	r0, r2, #27
 8007650:	bf44      	itt	mi
 8007652:	2320      	movmi	r3, #32
 8007654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007658:	0711      	lsls	r1, r2, #28
 800765a:	bf44      	itt	mi
 800765c:	232b      	movmi	r3, #43	@ 0x2b
 800765e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007662:	f89a 3000 	ldrb.w	r3, [sl]
 8007666:	2b2a      	cmp	r3, #42	@ 0x2a
 8007668:	d015      	beq.n	8007696 <_svfiprintf_r+0xfa>
 800766a:	9a07      	ldr	r2, [sp, #28]
 800766c:	4654      	mov	r4, sl
 800766e:	2000      	movs	r0, #0
 8007670:	f04f 0c0a 	mov.w	ip, #10
 8007674:	4621      	mov	r1, r4
 8007676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800767a:	3b30      	subs	r3, #48	@ 0x30
 800767c:	2b09      	cmp	r3, #9
 800767e:	d94b      	bls.n	8007718 <_svfiprintf_r+0x17c>
 8007680:	b1b0      	cbz	r0, 80076b0 <_svfiprintf_r+0x114>
 8007682:	9207      	str	r2, [sp, #28]
 8007684:	e014      	b.n	80076b0 <_svfiprintf_r+0x114>
 8007686:	eba0 0308 	sub.w	r3, r0, r8
 800768a:	fa09 f303 	lsl.w	r3, r9, r3
 800768e:	4313      	orrs	r3, r2
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	46a2      	mov	sl, r4
 8007694:	e7d2      	b.n	800763c <_svfiprintf_r+0xa0>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	1d19      	adds	r1, r3, #4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	9103      	str	r1, [sp, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfbb      	ittet	lt
 80076a2:	425b      	neglt	r3, r3
 80076a4:	f042 0202 	orrlt.w	r2, r2, #2
 80076a8:	9307      	strge	r3, [sp, #28]
 80076aa:	9307      	strlt	r3, [sp, #28]
 80076ac:	bfb8      	it	lt
 80076ae:	9204      	strlt	r2, [sp, #16]
 80076b0:	7823      	ldrb	r3, [r4, #0]
 80076b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80076b4:	d10a      	bne.n	80076cc <_svfiprintf_r+0x130>
 80076b6:	7863      	ldrb	r3, [r4, #1]
 80076b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ba:	d132      	bne.n	8007722 <_svfiprintf_r+0x186>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	9203      	str	r2, [sp, #12]
 80076c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076c8:	3402      	adds	r4, #2
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007790 <_svfiprintf_r+0x1f4>
 80076d0:	7821      	ldrb	r1, [r4, #0]
 80076d2:	2203      	movs	r2, #3
 80076d4:	4650      	mov	r0, sl
 80076d6:	f7f8 fda3 	bl	8000220 <memchr>
 80076da:	b138      	cbz	r0, 80076ec <_svfiprintf_r+0x150>
 80076dc:	9b04      	ldr	r3, [sp, #16]
 80076de:	eba0 000a 	sub.w	r0, r0, sl
 80076e2:	2240      	movs	r2, #64	@ 0x40
 80076e4:	4082      	lsls	r2, r0
 80076e6:	4313      	orrs	r3, r2
 80076e8:	3401      	adds	r4, #1
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f0:	4824      	ldr	r0, [pc, #144]	@ (8007784 <_svfiprintf_r+0x1e8>)
 80076f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076f6:	2206      	movs	r2, #6
 80076f8:	f7f8 fd92 	bl	8000220 <memchr>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d036      	beq.n	800776e <_svfiprintf_r+0x1d2>
 8007700:	4b21      	ldr	r3, [pc, #132]	@ (8007788 <_svfiprintf_r+0x1ec>)
 8007702:	bb1b      	cbnz	r3, 800774c <_svfiprintf_r+0x1b0>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	3307      	adds	r3, #7
 8007708:	f023 0307 	bic.w	r3, r3, #7
 800770c:	3308      	adds	r3, #8
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007712:	4433      	add	r3, r6
 8007714:	9309      	str	r3, [sp, #36]	@ 0x24
 8007716:	e76a      	b.n	80075ee <_svfiprintf_r+0x52>
 8007718:	fb0c 3202 	mla	r2, ip, r2, r3
 800771c:	460c      	mov	r4, r1
 800771e:	2001      	movs	r0, #1
 8007720:	e7a8      	b.n	8007674 <_svfiprintf_r+0xd8>
 8007722:	2300      	movs	r3, #0
 8007724:	3401      	adds	r4, #1
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	4619      	mov	r1, r3
 800772a:	f04f 0c0a 	mov.w	ip, #10
 800772e:	4620      	mov	r0, r4
 8007730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007734:	3a30      	subs	r2, #48	@ 0x30
 8007736:	2a09      	cmp	r2, #9
 8007738:	d903      	bls.n	8007742 <_svfiprintf_r+0x1a6>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0c6      	beq.n	80076cc <_svfiprintf_r+0x130>
 800773e:	9105      	str	r1, [sp, #20]
 8007740:	e7c4      	b.n	80076cc <_svfiprintf_r+0x130>
 8007742:	fb0c 2101 	mla	r1, ip, r1, r2
 8007746:	4604      	mov	r4, r0
 8007748:	2301      	movs	r3, #1
 800774a:	e7f0      	b.n	800772e <_svfiprintf_r+0x192>
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <_svfiprintf_r+0x1f0>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	4638      	mov	r0, r7
 8007758:	f3af 8000 	nop.w
 800775c:	1c42      	adds	r2, r0, #1
 800775e:	4606      	mov	r6, r0
 8007760:	d1d6      	bne.n	8007710 <_svfiprintf_r+0x174>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	065b      	lsls	r3, r3, #25
 8007766:	f53f af2d 	bmi.w	80075c4 <_svfiprintf_r+0x28>
 800776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800776c:	e72c      	b.n	80075c8 <_svfiprintf_r+0x2c>
 800776e:	ab03      	add	r3, sp, #12
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	462a      	mov	r2, r5
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <_svfiprintf_r+0x1f0>)
 8007776:	a904      	add	r1, sp, #16
 8007778:	4638      	mov	r0, r7
 800777a:	f000 fa5d 	bl	8007c38 <_printf_i>
 800777e:	e7ed      	b.n	800775c <_svfiprintf_r+0x1c0>
 8007780:	08008d80 	.word	0x08008d80
 8007784:	08008d8a 	.word	0x08008d8a
 8007788:	00000000 	.word	0x00000000
 800778c:	080074e7 	.word	0x080074e7
 8007790:	08008d86 	.word	0x08008d86

08007794 <__sfputc_r>:
 8007794:	6893      	ldr	r3, [r2, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	b410      	push	{r4}
 800779c:	6093      	str	r3, [r2, #8]
 800779e:	da08      	bge.n	80077b2 <__sfputc_r+0x1e>
 80077a0:	6994      	ldr	r4, [r2, #24]
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	db01      	blt.n	80077aa <__sfputc_r+0x16>
 80077a6:	290a      	cmp	r1, #10
 80077a8:	d103      	bne.n	80077b2 <__sfputc_r+0x1e>
 80077aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ae:	f000 bc8c 	b.w	80080ca <__swbuf_r>
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	1c58      	adds	r0, r3, #1
 80077b6:	6010      	str	r0, [r2, #0]
 80077b8:	7019      	strb	r1, [r3, #0]
 80077ba:	4608      	mov	r0, r1
 80077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <__sfputs_r>:
 80077c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	18d5      	adds	r5, r2, r3
 80077cc:	42ac      	cmp	r4, r5
 80077ce:	d101      	bne.n	80077d4 <__sfputs_r+0x12>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e007      	b.n	80077e4 <__sfputs_r+0x22>
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	463a      	mov	r2, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ffda 	bl	8007794 <__sfputc_r>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d1f3      	bne.n	80077cc <__sfputs_r+0xa>
 80077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077e8 <_vfiprintf_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	460d      	mov	r5, r1
 80077ee:	b09d      	sub	sp, #116	@ 0x74
 80077f0:	4614      	mov	r4, r2
 80077f2:	4698      	mov	r8, r3
 80077f4:	4606      	mov	r6, r0
 80077f6:	b118      	cbz	r0, 8007800 <_vfiprintf_r+0x18>
 80077f8:	6a03      	ldr	r3, [r0, #32]
 80077fa:	b90b      	cbnz	r3, 8007800 <_vfiprintf_r+0x18>
 80077fc:	f7ff fdf6 	bl	80073ec <__sinit>
 8007800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	d405      	bmi.n	8007812 <_vfiprintf_r+0x2a>
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	059a      	lsls	r2, r3, #22
 800780a:	d402      	bmi.n	8007812 <_vfiprintf_r+0x2a>
 800780c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800780e:	f7ff fe68 	bl	80074e2 <__retarget_lock_acquire_recursive>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	071b      	lsls	r3, r3, #28
 8007816:	d501      	bpl.n	800781c <_vfiprintf_r+0x34>
 8007818:	692b      	ldr	r3, [r5, #16]
 800781a:	b99b      	cbnz	r3, 8007844 <_vfiprintf_r+0x5c>
 800781c:	4629      	mov	r1, r5
 800781e:	4630      	mov	r0, r6
 8007820:	f000 fc92 	bl	8008148 <__swsetup_r>
 8007824:	b170      	cbz	r0, 8007844 <_vfiprintf_r+0x5c>
 8007826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007828:	07dc      	lsls	r4, r3, #31
 800782a:	d504      	bpl.n	8007836 <_vfiprintf_r+0x4e>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007830:	b01d      	add	sp, #116	@ 0x74
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	0598      	lsls	r0, r3, #22
 800783a:	d4f7      	bmi.n	800782c <_vfiprintf_r+0x44>
 800783c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800783e:	f7ff fe51 	bl	80074e4 <__retarget_lock_release_recursive>
 8007842:	e7f3      	b.n	800782c <_vfiprintf_r+0x44>
 8007844:	2300      	movs	r3, #0
 8007846:	9309      	str	r3, [sp, #36]	@ 0x24
 8007848:	2320      	movs	r3, #32
 800784a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800784e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007852:	2330      	movs	r3, #48	@ 0x30
 8007854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a04 <_vfiprintf_r+0x21c>
 8007858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800785c:	f04f 0901 	mov.w	r9, #1
 8007860:	4623      	mov	r3, r4
 8007862:	469a      	mov	sl, r3
 8007864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007868:	b10a      	cbz	r2, 800786e <_vfiprintf_r+0x86>
 800786a:	2a25      	cmp	r2, #37	@ 0x25
 800786c:	d1f9      	bne.n	8007862 <_vfiprintf_r+0x7a>
 800786e:	ebba 0b04 	subs.w	fp, sl, r4
 8007872:	d00b      	beq.n	800788c <_vfiprintf_r+0xa4>
 8007874:	465b      	mov	r3, fp
 8007876:	4622      	mov	r2, r4
 8007878:	4629      	mov	r1, r5
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ffa1 	bl	80077c2 <__sfputs_r>
 8007880:	3001      	adds	r0, #1
 8007882:	f000 80a7 	beq.w	80079d4 <_vfiprintf_r+0x1ec>
 8007886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007888:	445a      	add	r2, fp
 800788a:	9209      	str	r2, [sp, #36]	@ 0x24
 800788c:	f89a 3000 	ldrb.w	r3, [sl]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 809f 	beq.w	80079d4 <_vfiprintf_r+0x1ec>
 8007896:	2300      	movs	r3, #0
 8007898:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800789c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a0:	f10a 0a01 	add.w	sl, sl, #1
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	9307      	str	r3, [sp, #28]
 80078a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80078ae:	4654      	mov	r4, sl
 80078b0:	2205      	movs	r2, #5
 80078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b6:	4853      	ldr	r0, [pc, #332]	@ (8007a04 <_vfiprintf_r+0x21c>)
 80078b8:	f7f8 fcb2 	bl	8000220 <memchr>
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	b9d8      	cbnz	r0, 80078f8 <_vfiprintf_r+0x110>
 80078c0:	06d1      	lsls	r1, r2, #27
 80078c2:	bf44      	itt	mi
 80078c4:	2320      	movmi	r3, #32
 80078c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ca:	0713      	lsls	r3, r2, #28
 80078cc:	bf44      	itt	mi
 80078ce:	232b      	movmi	r3, #43	@ 0x2b
 80078d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d4:	f89a 3000 	ldrb.w	r3, [sl]
 80078d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078da:	d015      	beq.n	8007908 <_vfiprintf_r+0x120>
 80078dc:	9a07      	ldr	r2, [sp, #28]
 80078de:	4654      	mov	r4, sl
 80078e0:	2000      	movs	r0, #0
 80078e2:	f04f 0c0a 	mov.w	ip, #10
 80078e6:	4621      	mov	r1, r4
 80078e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ec:	3b30      	subs	r3, #48	@ 0x30
 80078ee:	2b09      	cmp	r3, #9
 80078f0:	d94b      	bls.n	800798a <_vfiprintf_r+0x1a2>
 80078f2:	b1b0      	cbz	r0, 8007922 <_vfiprintf_r+0x13a>
 80078f4:	9207      	str	r2, [sp, #28]
 80078f6:	e014      	b.n	8007922 <_vfiprintf_r+0x13a>
 80078f8:	eba0 0308 	sub.w	r3, r0, r8
 80078fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	46a2      	mov	sl, r4
 8007906:	e7d2      	b.n	80078ae <_vfiprintf_r+0xc6>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	1d19      	adds	r1, r3, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	9103      	str	r1, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfbb      	ittet	lt
 8007914:	425b      	neglt	r3, r3
 8007916:	f042 0202 	orrlt.w	r2, r2, #2
 800791a:	9307      	strge	r3, [sp, #28]
 800791c:	9307      	strlt	r3, [sp, #28]
 800791e:	bfb8      	it	lt
 8007920:	9204      	strlt	r2, [sp, #16]
 8007922:	7823      	ldrb	r3, [r4, #0]
 8007924:	2b2e      	cmp	r3, #46	@ 0x2e
 8007926:	d10a      	bne.n	800793e <_vfiprintf_r+0x156>
 8007928:	7863      	ldrb	r3, [r4, #1]
 800792a:	2b2a      	cmp	r3, #42	@ 0x2a
 800792c:	d132      	bne.n	8007994 <_vfiprintf_r+0x1ac>
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	9203      	str	r2, [sp, #12]
 8007936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800793a:	3402      	adds	r4, #2
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a14 <_vfiprintf_r+0x22c>
 8007942:	7821      	ldrb	r1, [r4, #0]
 8007944:	2203      	movs	r2, #3
 8007946:	4650      	mov	r0, sl
 8007948:	f7f8 fc6a 	bl	8000220 <memchr>
 800794c:	b138      	cbz	r0, 800795e <_vfiprintf_r+0x176>
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	eba0 000a 	sub.w	r0, r0, sl
 8007954:	2240      	movs	r2, #64	@ 0x40
 8007956:	4082      	lsls	r2, r0
 8007958:	4313      	orrs	r3, r2
 800795a:	3401      	adds	r4, #1
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007962:	4829      	ldr	r0, [pc, #164]	@ (8007a08 <_vfiprintf_r+0x220>)
 8007964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007968:	2206      	movs	r2, #6
 800796a:	f7f8 fc59 	bl	8000220 <memchr>
 800796e:	2800      	cmp	r0, #0
 8007970:	d03f      	beq.n	80079f2 <_vfiprintf_r+0x20a>
 8007972:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <_vfiprintf_r+0x224>)
 8007974:	bb1b      	cbnz	r3, 80079be <_vfiprintf_r+0x1d6>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	3307      	adds	r3, #7
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	3308      	adds	r3, #8
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	443b      	add	r3, r7
 8007986:	9309      	str	r3, [sp, #36]	@ 0x24
 8007988:	e76a      	b.n	8007860 <_vfiprintf_r+0x78>
 800798a:	fb0c 3202 	mla	r2, ip, r2, r3
 800798e:	460c      	mov	r4, r1
 8007990:	2001      	movs	r0, #1
 8007992:	e7a8      	b.n	80078e6 <_vfiprintf_r+0xfe>
 8007994:	2300      	movs	r3, #0
 8007996:	3401      	adds	r4, #1
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	4619      	mov	r1, r3
 800799c:	f04f 0c0a 	mov.w	ip, #10
 80079a0:	4620      	mov	r0, r4
 80079a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a6:	3a30      	subs	r2, #48	@ 0x30
 80079a8:	2a09      	cmp	r2, #9
 80079aa:	d903      	bls.n	80079b4 <_vfiprintf_r+0x1cc>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0c6      	beq.n	800793e <_vfiprintf_r+0x156>
 80079b0:	9105      	str	r1, [sp, #20]
 80079b2:	e7c4      	b.n	800793e <_vfiprintf_r+0x156>
 80079b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b8:	4604      	mov	r4, r0
 80079ba:	2301      	movs	r3, #1
 80079bc:	e7f0      	b.n	80079a0 <_vfiprintf_r+0x1b8>
 80079be:	ab03      	add	r3, sp, #12
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	462a      	mov	r2, r5
 80079c4:	4b12      	ldr	r3, [pc, #72]	@ (8007a10 <_vfiprintf_r+0x228>)
 80079c6:	a904      	add	r1, sp, #16
 80079c8:	4630      	mov	r0, r6
 80079ca:	f3af 8000 	nop.w
 80079ce:	4607      	mov	r7, r0
 80079d0:	1c78      	adds	r0, r7, #1
 80079d2:	d1d6      	bne.n	8007982 <_vfiprintf_r+0x19a>
 80079d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079d6:	07d9      	lsls	r1, r3, #31
 80079d8:	d405      	bmi.n	80079e6 <_vfiprintf_r+0x1fe>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	059a      	lsls	r2, r3, #22
 80079de:	d402      	bmi.n	80079e6 <_vfiprintf_r+0x1fe>
 80079e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079e2:	f7ff fd7f 	bl	80074e4 <__retarget_lock_release_recursive>
 80079e6:	89ab      	ldrh	r3, [r5, #12]
 80079e8:	065b      	lsls	r3, r3, #25
 80079ea:	f53f af1f 	bmi.w	800782c <_vfiprintf_r+0x44>
 80079ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079f0:	e71e      	b.n	8007830 <_vfiprintf_r+0x48>
 80079f2:	ab03      	add	r3, sp, #12
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	462a      	mov	r2, r5
 80079f8:	4b05      	ldr	r3, [pc, #20]	@ (8007a10 <_vfiprintf_r+0x228>)
 80079fa:	a904      	add	r1, sp, #16
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f91b 	bl	8007c38 <_printf_i>
 8007a02:	e7e4      	b.n	80079ce <_vfiprintf_r+0x1e6>
 8007a04:	08008d80 	.word	0x08008d80
 8007a08:	08008d8a 	.word	0x08008d8a
 8007a0c:	00000000 	.word	0x00000000
 8007a10:	080077c3 	.word	0x080077c3
 8007a14:	08008d86 	.word	0x08008d86

08007a18 <sbrk_aligned>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007a58 <sbrk_aligned+0x40>)
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	6831      	ldr	r1, [r6, #0]
 8007a20:	4605      	mov	r5, r0
 8007a22:	b911      	cbnz	r1, 8007a2a <sbrk_aligned+0x12>
 8007a24:	f000 fcb8 	bl	8008398 <_sbrk_r>
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 fcb3 	bl	8008398 <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d103      	bne.n	8007a3e <sbrk_aligned+0x26>
 8007a36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	1cc4      	adds	r4, r0, #3
 8007a40:	f024 0403 	bic.w	r4, r4, #3
 8007a44:	42a0      	cmp	r0, r4
 8007a46:	d0f8      	beq.n	8007a3a <sbrk_aligned+0x22>
 8007a48:	1a21      	subs	r1, r4, r0
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 fca4 	bl	8008398 <_sbrk_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1f2      	bne.n	8007a3a <sbrk_aligned+0x22>
 8007a54:	e7ef      	b.n	8007a36 <sbrk_aligned+0x1e>
 8007a56:	bf00      	nop
 8007a58:	2000061c 	.word	0x2000061c

08007a5c <_malloc_r>:
 8007a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a60:	1ccd      	adds	r5, r1, #3
 8007a62:	f025 0503 	bic.w	r5, r5, #3
 8007a66:	3508      	adds	r5, #8
 8007a68:	2d0c      	cmp	r5, #12
 8007a6a:	bf38      	it	cc
 8007a6c:	250c      	movcc	r5, #12
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	4606      	mov	r6, r0
 8007a72:	db01      	blt.n	8007a78 <_malloc_r+0x1c>
 8007a74:	42a9      	cmp	r1, r5
 8007a76:	d904      	bls.n	8007a82 <_malloc_r+0x26>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	6033      	str	r3, [r6, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b58 <_malloc_r+0xfc>
 8007a86:	f000 faa3 	bl	8007fd0 <__malloc_lock>
 8007a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8e:	461c      	mov	r4, r3
 8007a90:	bb44      	cbnz	r4, 8007ae4 <_malloc_r+0x88>
 8007a92:	4629      	mov	r1, r5
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7ff ffbf 	bl	8007a18 <sbrk_aligned>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	d158      	bne.n	8007b52 <_malloc_r+0xf6>
 8007aa0:	f8d8 4000 	ldr.w	r4, [r8]
 8007aa4:	4627      	mov	r7, r4
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	d143      	bne.n	8007b32 <_malloc_r+0xd6>
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	d04b      	beq.n	8007b46 <_malloc_r+0xea>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	eb04 0903 	add.w	r9, r4, r3
 8007ab8:	f000 fc6e 	bl	8008398 <_sbrk_r>
 8007abc:	4581      	cmp	r9, r0
 8007abe:	d142      	bne.n	8007b46 <_malloc_r+0xea>
 8007ac0:	6821      	ldr	r1, [r4, #0]
 8007ac2:	1a6d      	subs	r5, r5, r1
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff ffa6 	bl	8007a18 <sbrk_aligned>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d03a      	beq.n	8007b46 <_malloc_r+0xea>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	442b      	add	r3, r5
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	bb62      	cbnz	r2, 8007b38 <_malloc_r+0xdc>
 8007ade:	f8c8 7000 	str.w	r7, [r8]
 8007ae2:	e00f      	b.n	8007b04 <_malloc_r+0xa8>
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	1b52      	subs	r2, r2, r5
 8007ae8:	d420      	bmi.n	8007b2c <_malloc_r+0xd0>
 8007aea:	2a0b      	cmp	r2, #11
 8007aec:	d917      	bls.n	8007b1e <_malloc_r+0xc2>
 8007aee:	1961      	adds	r1, r4, r5
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	6025      	str	r5, [r4, #0]
 8007af4:	bf18      	it	ne
 8007af6:	6059      	strne	r1, [r3, #4]
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	bf08      	it	eq
 8007afc:	f8c8 1000 	streq.w	r1, [r8]
 8007b00:	5162      	str	r2, [r4, r5]
 8007b02:	604b      	str	r3, [r1, #4]
 8007b04:	4630      	mov	r0, r6
 8007b06:	f000 fa69 	bl	8007fdc <__malloc_unlock>
 8007b0a:	f104 000b 	add.w	r0, r4, #11
 8007b0e:	1d23      	adds	r3, r4, #4
 8007b10:	f020 0007 	bic.w	r0, r0, #7
 8007b14:	1ac2      	subs	r2, r0, r3
 8007b16:	bf1c      	itt	ne
 8007b18:	1a1b      	subne	r3, r3, r0
 8007b1a:	50a3      	strne	r3, [r4, r2]
 8007b1c:	e7af      	b.n	8007a7e <_malloc_r+0x22>
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	bf0c      	ite	eq
 8007b24:	f8c8 2000 	streq.w	r2, [r8]
 8007b28:	605a      	strne	r2, [r3, #4]
 8007b2a:	e7eb      	b.n	8007b04 <_malloc_r+0xa8>
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	6864      	ldr	r4, [r4, #4]
 8007b30:	e7ae      	b.n	8007a90 <_malloc_r+0x34>
 8007b32:	463c      	mov	r4, r7
 8007b34:	687f      	ldr	r7, [r7, #4]
 8007b36:	e7b6      	b.n	8007aa6 <_malloc_r+0x4a>
 8007b38:	461a      	mov	r2, r3
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d1fb      	bne.n	8007b38 <_malloc_r+0xdc>
 8007b40:	2300      	movs	r3, #0
 8007b42:	6053      	str	r3, [r2, #4]
 8007b44:	e7de      	b.n	8007b04 <_malloc_r+0xa8>
 8007b46:	230c      	movs	r3, #12
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f000 fa46 	bl	8007fdc <__malloc_unlock>
 8007b50:	e794      	b.n	8007a7c <_malloc_r+0x20>
 8007b52:	6005      	str	r5, [r0, #0]
 8007b54:	e7d6      	b.n	8007b04 <_malloc_r+0xa8>
 8007b56:	bf00      	nop
 8007b58:	20000620 	.word	0x20000620

08007b5c <_printf_common>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	4616      	mov	r6, r2
 8007b62:	4698      	mov	r8, r3
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	bfb8      	it	lt
 8007b70:	4613      	movlt	r3, r2
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b78:	4607      	mov	r7, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	b10a      	cbz	r2, 8007b82 <_printf_common+0x26>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	6833      	ldrmi	r3, [r6, #0]
 8007b8a:	3302      	addmi	r3, #2
 8007b8c:	6033      	strmi	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	f015 0506 	ands.w	r5, r5, #6
 8007b94:	d106      	bne.n	8007ba4 <_printf_common+0x48>
 8007b96:	f104 0a19 	add.w	sl, r4, #25
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc26      	bgt.n	8007bf2 <_printf_common+0x96>
 8007ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	3b00      	subs	r3, #0
 8007bac:	bf18      	it	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	0692      	lsls	r2, r2, #26
 8007bb2:	d42b      	bmi.n	8007c0c <_printf_common+0xb0>
 8007bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bb8:	4641      	mov	r1, r8
 8007bba:	4638      	mov	r0, r7
 8007bbc:	47c8      	blx	r9
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d01e      	beq.n	8007c00 <_printf_common+0xa4>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	f003 0306 	and.w	r3, r3, #6
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	bf02      	ittt	eq
 8007bce:	68e5      	ldreq	r5, [r4, #12]
 8007bd0:	6833      	ldreq	r3, [r6, #0]
 8007bd2:	1aed      	subeq	r5, r5, r3
 8007bd4:	68a3      	ldr	r3, [r4, #8]
 8007bd6:	bf0c      	ite	eq
 8007bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bdc:	2500      	movne	r5, #0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	bfc4      	itt	gt
 8007be2:	1a9b      	subgt	r3, r3, r2
 8007be4:	18ed      	addgt	r5, r5, r3
 8007be6:	2600      	movs	r6, #0
 8007be8:	341a      	adds	r4, #26
 8007bea:	42b5      	cmp	r5, r6
 8007bec:	d11a      	bne.n	8007c24 <_printf_common+0xc8>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e008      	b.n	8007c04 <_printf_common+0xa8>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	47c8      	blx	r9
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d103      	bne.n	8007c08 <_printf_common+0xac>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	3501      	adds	r5, #1
 8007c0a:	e7c6      	b.n	8007b9a <_printf_common+0x3e>
 8007c0c:	18e1      	adds	r1, r4, r3
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	2030      	movs	r0, #48	@ 0x30
 8007c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c16:	4422      	add	r2, r4
 8007c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c20:	3302      	adds	r3, #2
 8007c22:	e7c7      	b.n	8007bb4 <_printf_common+0x58>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4622      	mov	r2, r4
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c8      	blx	r9
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0e6      	beq.n	8007c00 <_printf_common+0xa4>
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7d9      	b.n	8007bea <_printf_common+0x8e>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	7e0f      	ldrb	r7, [r1, #24]
 8007c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c40:	2f78      	cmp	r7, #120	@ 0x78
 8007c42:	4691      	mov	r9, r2
 8007c44:	4680      	mov	r8, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c4e:	d807      	bhi.n	8007c60 <_printf_i+0x28>
 8007c50:	2f62      	cmp	r7, #98	@ 0x62
 8007c52:	d80a      	bhi.n	8007c6a <_printf_i+0x32>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	f000 80d2 	beq.w	8007dfe <_printf_i+0x1c6>
 8007c5a:	2f58      	cmp	r7, #88	@ 0x58
 8007c5c:	f000 80b9 	beq.w	8007dd2 <_printf_i+0x19a>
 8007c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c68:	e03a      	b.n	8007ce0 <_printf_i+0xa8>
 8007c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c6e:	2b15      	cmp	r3, #21
 8007c70:	d8f6      	bhi.n	8007c60 <_printf_i+0x28>
 8007c72:	a101      	add	r1, pc, #4	@ (adr r1, 8007c78 <_printf_i+0x40>)
 8007c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007ce5 	.word	0x08007ce5
 8007c80:	08007c61 	.word	0x08007c61
 8007c84:	08007c61 	.word	0x08007c61
 8007c88:	08007c61 	.word	0x08007c61
 8007c8c:	08007c61 	.word	0x08007c61
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c61 	.word	0x08007c61
 8007c98:	08007c61 	.word	0x08007c61
 8007c9c:	08007c61 	.word	0x08007c61
 8007ca0:	08007c61 	.word	0x08007c61
 8007ca4:	08007de5 	.word	0x08007de5
 8007ca8:	08007d0f 	.word	0x08007d0f
 8007cac:	08007d9f 	.word	0x08007d9f
 8007cb0:	08007c61 	.word	0x08007c61
 8007cb4:	08007c61 	.word	0x08007c61
 8007cb8:	08007e07 	.word	0x08007e07
 8007cbc:	08007c61 	.word	0x08007c61
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007c61 	.word	0x08007c61
 8007cc8:	08007c61 	.word	0x08007c61
 8007ccc:	08007da7 	.word	0x08007da7
 8007cd0:	6833      	ldr	r3, [r6, #0]
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6032      	str	r2, [r6, #0]
 8007cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e09d      	b.n	8007e20 <_printf_i+0x1e8>
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	6031      	str	r1, [r6, #0]
 8007cec:	0606      	lsls	r6, r0, #24
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0xbc>
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	e003      	b.n	8007cfc <_printf_i+0xc4>
 8007cf4:	0645      	lsls	r5, r0, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0xb8>
 8007cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	da03      	bge.n	8007d08 <_printf_i+0xd0>
 8007d00:	232d      	movs	r3, #45	@ 0x2d
 8007d02:	426d      	negs	r5, r5
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d08:	4859      	ldr	r0, [pc, #356]	@ (8007e70 <_printf_i+0x238>)
 8007d0a:	230a      	movs	r3, #10
 8007d0c:	e011      	b.n	8007d32 <_printf_i+0xfa>
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	6833      	ldr	r3, [r6, #0]
 8007d12:	0608      	lsls	r0, r1, #24
 8007d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d18:	d402      	bmi.n	8007d20 <_printf_i+0xe8>
 8007d1a:	0649      	lsls	r1, r1, #25
 8007d1c:	bf48      	it	mi
 8007d1e:	b2ad      	uxthmi	r5, r5
 8007d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d22:	4853      	ldr	r0, [pc, #332]	@ (8007e70 <_printf_i+0x238>)
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	bf14      	ite	ne
 8007d28:	230a      	movne	r3, #10
 8007d2a:	2308      	moveq	r3, #8
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d32:	6866      	ldr	r6, [r4, #4]
 8007d34:	60a6      	str	r6, [r4, #8]
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	bfa2      	ittt	ge
 8007d3a:	6821      	ldrge	r1, [r4, #0]
 8007d3c:	f021 0104 	bicge.w	r1, r1, #4
 8007d40:	6021      	strge	r1, [r4, #0]
 8007d42:	b90d      	cbnz	r5, 8007d48 <_printf_i+0x110>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	d04b      	beq.n	8007de0 <_printf_i+0x1a8>
 8007d48:	4616      	mov	r6, r2
 8007d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d52:	5dc7      	ldrb	r7, [r0, r7]
 8007d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d58:	462f      	mov	r7, r5
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	d9f4      	bls.n	8007d4a <_printf_i+0x112>
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d10b      	bne.n	8007d7c <_printf_i+0x144>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	07df      	lsls	r7, r3, #31
 8007d68:	d508      	bpl.n	8007d7c <_printf_i+0x144>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	bfde      	ittt	le
 8007d72:	2330      	movle	r3, #48	@ 0x30
 8007d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007d7c:	1b92      	subs	r2, r2, r6
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	f8cd a000 	str.w	sl, [sp]
 8007d84:	464b      	mov	r3, r9
 8007d86:	aa03      	add	r2, sp, #12
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fee6 	bl	8007b5c <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d14a      	bne.n	8007e2a <_printf_i+0x1f2>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	4833      	ldr	r0, [pc, #204]	@ (8007e74 <_printf_i+0x23c>)
 8007da8:	2778      	movs	r7, #120	@ 0x78
 8007daa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6831      	ldr	r1, [r6, #0]
 8007db2:	061f      	lsls	r7, r3, #24
 8007db4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007db8:	d402      	bmi.n	8007dc0 <_printf_i+0x188>
 8007dba:	065f      	lsls	r7, r3, #25
 8007dbc:	bf48      	it	mi
 8007dbe:	b2ad      	uxthmi	r5, r5
 8007dc0:	6031      	str	r1, [r6, #0]
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	bf44      	itt	mi
 8007dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dca:	6023      	strmi	r3, [r4, #0]
 8007dcc:	b11d      	cbz	r5, 8007dd6 <_printf_i+0x19e>
 8007dce:	2310      	movs	r3, #16
 8007dd0:	e7ac      	b.n	8007d2c <_printf_i+0xf4>
 8007dd2:	4827      	ldr	r0, [pc, #156]	@ (8007e70 <_printf_i+0x238>)
 8007dd4:	e7e9      	b.n	8007daa <_printf_i+0x172>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f023 0320 	bic.w	r3, r3, #32
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	e7f6      	b.n	8007dce <_printf_i+0x196>
 8007de0:	4616      	mov	r6, r2
 8007de2:	e7bd      	b.n	8007d60 <_printf_i+0x128>
 8007de4:	6833      	ldr	r3, [r6, #0]
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	6961      	ldr	r1, [r4, #20]
 8007dea:	1d18      	adds	r0, r3, #4
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	062e      	lsls	r6, r5, #24
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	d501      	bpl.n	8007df8 <_printf_i+0x1c0>
 8007df4:	6019      	str	r1, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <_printf_i+0x1c6>
 8007df8:	0668      	lsls	r0, r5, #25
 8007dfa:	d5fb      	bpl.n	8007df4 <_printf_i+0x1bc>
 8007dfc:	8019      	strh	r1, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	4616      	mov	r6, r2
 8007e04:	e7bc      	b.n	8007d80 <_printf_i+0x148>
 8007e06:	6833      	ldr	r3, [r6, #0]
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	2100      	movs	r1, #0
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7f8 fa04 	bl	8000220 <memchr>
 8007e18:	b108      	cbz	r0, 8007e1e <_printf_i+0x1e6>
 8007e1a:	1b80      	subs	r0, r0, r6
 8007e1c:	6060      	str	r0, [r4, #4]
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e28:	e7aa      	b.n	8007d80 <_printf_i+0x148>
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	47d0      	blx	sl
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0ad      	beq.n	8007d94 <_printf_i+0x15c>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	079b      	lsls	r3, r3, #30
 8007e3c:	d413      	bmi.n	8007e66 <_printf_i+0x22e>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e7a6      	b.n	8007d98 <_printf_i+0x160>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	47d0      	blx	sl
 8007e54:	3001      	adds	r0, #1
 8007e56:	d09d      	beq.n	8007d94 <_printf_i+0x15c>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	9903      	ldr	r1, [sp, #12]
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dcf2      	bgt.n	8007e4a <_printf_i+0x212>
 8007e64:	e7eb      	b.n	8007e3e <_printf_i+0x206>
 8007e66:	2500      	movs	r5, #0
 8007e68:	f104 0619 	add.w	r6, r4, #25
 8007e6c:	e7f5      	b.n	8007e5a <_printf_i+0x222>
 8007e6e:	bf00      	nop
 8007e70:	08008d91 	.word	0x08008d91
 8007e74:	08008da2 	.word	0x08008da2

08007e78 <__sflush_r>:
 8007e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e80:	0716      	lsls	r6, r2, #28
 8007e82:	4605      	mov	r5, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	d454      	bmi.n	8007f32 <__sflush_r+0xba>
 8007e88:	684b      	ldr	r3, [r1, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dc02      	bgt.n	8007e94 <__sflush_r+0x1c>
 8007e8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dd48      	ble.n	8007f26 <__sflush_r+0xae>
 8007e94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	d045      	beq.n	8007f26 <__sflush_r+0xae>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ea0:	682f      	ldr	r7, [r5, #0]
 8007ea2:	6a21      	ldr	r1, [r4, #32]
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	d030      	beq.n	8007f0a <__sflush_r+0x92>
 8007ea8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	0759      	lsls	r1, r3, #29
 8007eae:	d505      	bpl.n	8007ebc <__sflush_r+0x44>
 8007eb0:	6863      	ldr	r3, [r4, #4]
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eb6:	b10b      	cbz	r3, 8007ebc <__sflush_r+0x44>
 8007eb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec0:	6a21      	ldr	r1, [r4, #32]
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b0      	blx	r6
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	d106      	bne.n	8007eda <__sflush_r+0x62>
 8007ecc:	6829      	ldr	r1, [r5, #0]
 8007ece:	291d      	cmp	r1, #29
 8007ed0:	d82b      	bhi.n	8007f2a <__sflush_r+0xb2>
 8007ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8007f7c <__sflush_r+0x104>)
 8007ed4:	410a      	asrs	r2, r1
 8007ed6:	07d6      	lsls	r6, r2, #31
 8007ed8:	d427      	bmi.n	8007f2a <__sflush_r+0xb2>
 8007eda:	2200      	movs	r2, #0
 8007edc:	6062      	str	r2, [r4, #4]
 8007ede:	04d9      	lsls	r1, r3, #19
 8007ee0:	6922      	ldr	r2, [r4, #16]
 8007ee2:	6022      	str	r2, [r4, #0]
 8007ee4:	d504      	bpl.n	8007ef0 <__sflush_r+0x78>
 8007ee6:	1c42      	adds	r2, r0, #1
 8007ee8:	d101      	bne.n	8007eee <__sflush_r+0x76>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	b903      	cbnz	r3, 8007ef0 <__sflush_r+0x78>
 8007eee:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ef2:	602f      	str	r7, [r5, #0]
 8007ef4:	b1b9      	cbz	r1, 8007f26 <__sflush_r+0xae>
 8007ef6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007efa:	4299      	cmp	r1, r3
 8007efc:	d002      	beq.n	8007f04 <__sflush_r+0x8c>
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 fa7a 	bl	80083f8 <_free_r>
 8007f04:	2300      	movs	r3, #0
 8007f06:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f08:	e00d      	b.n	8007f26 <__sflush_r+0xae>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b0      	blx	r6
 8007f10:	4602      	mov	r2, r0
 8007f12:	1c50      	adds	r0, r2, #1
 8007f14:	d1c9      	bne.n	8007eaa <__sflush_r+0x32>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c6      	beq.n	8007eaa <__sflush_r+0x32>
 8007f1c:	2b1d      	cmp	r3, #29
 8007f1e:	d001      	beq.n	8007f24 <__sflush_r+0xac>
 8007f20:	2b16      	cmp	r3, #22
 8007f22:	d11e      	bne.n	8007f62 <__sflush_r+0xea>
 8007f24:	602f      	str	r7, [r5, #0]
 8007f26:	2000      	movs	r0, #0
 8007f28:	e022      	b.n	8007f70 <__sflush_r+0xf8>
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f2e:	b21b      	sxth	r3, r3
 8007f30:	e01b      	b.n	8007f6a <__sflush_r+0xf2>
 8007f32:	690f      	ldr	r7, [r1, #16]
 8007f34:	2f00      	cmp	r7, #0
 8007f36:	d0f6      	beq.n	8007f26 <__sflush_r+0xae>
 8007f38:	0793      	lsls	r3, r2, #30
 8007f3a:	680e      	ldr	r6, [r1, #0]
 8007f3c:	bf08      	it	eq
 8007f3e:	694b      	ldreq	r3, [r1, #20]
 8007f40:	600f      	str	r7, [r1, #0]
 8007f42:	bf18      	it	ne
 8007f44:	2300      	movne	r3, #0
 8007f46:	eba6 0807 	sub.w	r8, r6, r7
 8007f4a:	608b      	str	r3, [r1, #8]
 8007f4c:	f1b8 0f00 	cmp.w	r8, #0
 8007f50:	dde9      	ble.n	8007f26 <__sflush_r+0xae>
 8007f52:	6a21      	ldr	r1, [r4, #32]
 8007f54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f56:	4643      	mov	r3, r8
 8007f58:	463a      	mov	r2, r7
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b0      	blx	r6
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	dc08      	bgt.n	8007f74 <__sflush_r+0xfc>
 8007f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f74:	4407      	add	r7, r0
 8007f76:	eba8 0800 	sub.w	r8, r8, r0
 8007f7a:	e7e7      	b.n	8007f4c <__sflush_r+0xd4>
 8007f7c:	dfbffffe 	.word	0xdfbffffe

08007f80 <_fflush_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	690b      	ldr	r3, [r1, #16]
 8007f84:	4605      	mov	r5, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	b913      	cbnz	r3, 8007f90 <_fflush_r+0x10>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	b118      	cbz	r0, 8007f9a <_fflush_r+0x1a>
 8007f92:	6a03      	ldr	r3, [r0, #32]
 8007f94:	b90b      	cbnz	r3, 8007f9a <_fflush_r+0x1a>
 8007f96:	f7ff fa29 	bl	80073ec <__sinit>
 8007f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f3      	beq.n	8007f8a <_fflush_r+0xa>
 8007fa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fa4:	07d0      	lsls	r0, r2, #31
 8007fa6:	d404      	bmi.n	8007fb2 <_fflush_r+0x32>
 8007fa8:	0599      	lsls	r1, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_fflush_r+0x32>
 8007fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fae:	f7ff fa98 	bl	80074e2 <__retarget_lock_acquire_recursive>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7ff ff5f 	bl	8007e78 <__sflush_r>
 8007fba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fbc:	07da      	lsls	r2, r3, #31
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	d4e4      	bmi.n	8007f8c <_fflush_r+0xc>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	d4e1      	bmi.n	8007f8c <_fflush_r+0xc>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fca:	f7ff fa8b 	bl	80074e4 <__retarget_lock_release_recursive>
 8007fce:	e7dd      	b.n	8007f8c <_fflush_r+0xc>

08007fd0 <__malloc_lock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	@ (8007fd8 <__malloc_lock+0x8>)
 8007fd2:	f7ff ba86 	b.w	80074e2 <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20000618 	.word	0x20000618

08007fdc <__malloc_unlock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_unlock+0x8>)
 8007fde:	f7ff ba81 	b.w	80074e4 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000618 	.word	0x20000618

08007fe8 <__sread>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f9c0 	bl	8008374 <_read_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	bfab      	itete	ge
 8007ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8007ffc:	181b      	addge	r3, r3, r0
 8007ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008002:	bfac      	ite	ge
 8008004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008006:	81a3      	strhlt	r3, [r4, #12]
 8008008:	bd10      	pop	{r4, pc}

0800800a <__swrite>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	461f      	mov	r7, r3
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4616      	mov	r6, r2
 800801a:	d505      	bpl.n	8008028 <__swrite+0x1e>
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2302      	movs	r3, #2
 8008022:	2200      	movs	r2, #0
 8008024:	f000 f994 	bl	8008350 <_lseek_r>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	f000 b9bb 	b.w	80083b8 <_write_r>

08008042 <__sseek>:
 8008042:	b510      	push	{r4, lr}
 8008044:	460c      	mov	r4, r1
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 f981 	bl	8008350 <_lseek_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	bf15      	itete	ne
 8008054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800805a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800805e:	81a3      	strheq	r3, [r4, #12]
 8008060:	bf18      	it	ne
 8008062:	81a3      	strhne	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__sclose>:
 8008066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806a:	f000 b93f 	b.w	80082ec <_close_r>

0800806e <_realloc_r>:
 800806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	4680      	mov	r8, r0
 8008074:	4615      	mov	r5, r2
 8008076:	460c      	mov	r4, r1
 8008078:	b921      	cbnz	r1, 8008084 <_realloc_r+0x16>
 800807a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	4611      	mov	r1, r2
 8008080:	f7ff bcec 	b.w	8007a5c <_malloc_r>
 8008084:	b92a      	cbnz	r2, 8008092 <_realloc_r+0x24>
 8008086:	f000 f9b7 	bl	80083f8 <_free_r>
 800808a:	2400      	movs	r4, #0
 800808c:	4620      	mov	r0, r4
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	f000 f9fb 	bl	800848c <_malloc_usable_size_r>
 8008096:	4285      	cmp	r5, r0
 8008098:	4606      	mov	r6, r0
 800809a:	d802      	bhi.n	80080a2 <_realloc_r+0x34>
 800809c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080a0:	d8f4      	bhi.n	800808c <_realloc_r+0x1e>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4640      	mov	r0, r8
 80080a6:	f7ff fcd9 	bl	8007a5c <_malloc_r>
 80080aa:	4607      	mov	r7, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0ec      	beq.n	800808a <_realloc_r+0x1c>
 80080b0:	42b5      	cmp	r5, r6
 80080b2:	462a      	mov	r2, r5
 80080b4:	4621      	mov	r1, r4
 80080b6:	bf28      	it	cs
 80080b8:	4632      	movcs	r2, r6
 80080ba:	f000 f98f 	bl	80083dc <memcpy>
 80080be:	4621      	mov	r1, r4
 80080c0:	4640      	mov	r0, r8
 80080c2:	f000 f999 	bl	80083f8 <_free_r>
 80080c6:	463c      	mov	r4, r7
 80080c8:	e7e0      	b.n	800808c <_realloc_r+0x1e>

080080ca <__swbuf_r>:
 80080ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080cc:	460e      	mov	r6, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	4605      	mov	r5, r0
 80080d2:	b118      	cbz	r0, 80080dc <__swbuf_r+0x12>
 80080d4:	6a03      	ldr	r3, [r0, #32]
 80080d6:	b90b      	cbnz	r3, 80080dc <__swbuf_r+0x12>
 80080d8:	f7ff f988 	bl	80073ec <__sinit>
 80080dc:	69a3      	ldr	r3, [r4, #24]
 80080de:	60a3      	str	r3, [r4, #8]
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	071a      	lsls	r2, r3, #28
 80080e4:	d501      	bpl.n	80080ea <__swbuf_r+0x20>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	b943      	cbnz	r3, 80080fc <__swbuf_r+0x32>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f82b 	bl	8008148 <__swsetup_r>
 80080f2:	b118      	cbz	r0, 80080fc <__swbuf_r+0x32>
 80080f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	6922      	ldr	r2, [r4, #16]
 8008100:	1a98      	subs	r0, r3, r2
 8008102:	6963      	ldr	r3, [r4, #20]
 8008104:	b2f6      	uxtb	r6, r6
 8008106:	4283      	cmp	r3, r0
 8008108:	4637      	mov	r7, r6
 800810a:	dc05      	bgt.n	8008118 <__swbuf_r+0x4e>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f7ff ff36 	bl	8007f80 <_fflush_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d1ed      	bne.n	80080f4 <__swbuf_r+0x2a>
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	3b01      	subs	r3, #1
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	6022      	str	r2, [r4, #0]
 8008124:	701e      	strb	r6, [r3, #0]
 8008126:	6962      	ldr	r2, [r4, #20]
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	429a      	cmp	r2, r3
 800812c:	d004      	beq.n	8008138 <__swbuf_r+0x6e>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d5e1      	bpl.n	80080f8 <__swbuf_r+0x2e>
 8008134:	2e0a      	cmp	r6, #10
 8008136:	d1df      	bne.n	80080f8 <__swbuf_r+0x2e>
 8008138:	4621      	mov	r1, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f7ff ff20 	bl	8007f80 <_fflush_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	d0d9      	beq.n	80080f8 <__swbuf_r+0x2e>
 8008144:	e7d6      	b.n	80080f4 <__swbuf_r+0x2a>
	...

08008148 <__swsetup_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4b29      	ldr	r3, [pc, #164]	@ (80081f0 <__swsetup_r+0xa8>)
 800814c:	4605      	mov	r5, r0
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	460c      	mov	r4, r1
 8008152:	b118      	cbz	r0, 800815c <__swsetup_r+0x14>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <__swsetup_r+0x14>
 8008158:	f7ff f948 	bl	80073ec <__sinit>
 800815c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	d422      	bmi.n	80081aa <__swsetup_r+0x62>
 8008164:	06da      	lsls	r2, r3, #27
 8008166:	d407      	bmi.n	8008178 <__swsetup_r+0x30>
 8008168:	2209      	movs	r2, #9
 800816a:	602a      	str	r2, [r5, #0]
 800816c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008176:	e033      	b.n	80081e0 <__swsetup_r+0x98>
 8008178:	0758      	lsls	r0, r3, #29
 800817a:	d512      	bpl.n	80081a2 <__swsetup_r+0x5a>
 800817c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800817e:	b141      	cbz	r1, 8008192 <__swsetup_r+0x4a>
 8008180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008184:	4299      	cmp	r1, r3
 8008186:	d002      	beq.n	800818e <__swsetup_r+0x46>
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f935 	bl	80083f8 <_free_r>
 800818e:	2300      	movs	r3, #0
 8008190:	6363      	str	r3, [r4, #52]	@ 0x34
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	2300      	movs	r3, #0
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f043 0308 	orr.w	r3, r3, #8
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	b94b      	cbnz	r3, 80081c2 <__swsetup_r+0x7a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b8:	d003      	beq.n	80081c2 <__swsetup_r+0x7a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f83f 	bl	8008240 <__smakebuf_r>
 80081c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c6:	f013 0201 	ands.w	r2, r3, #1
 80081ca:	d00a      	beq.n	80081e2 <__swsetup_r+0x9a>
 80081cc:	2200      	movs	r2, #0
 80081ce:	60a2      	str	r2, [r4, #8]
 80081d0:	6962      	ldr	r2, [r4, #20]
 80081d2:	4252      	negs	r2, r2
 80081d4:	61a2      	str	r2, [r4, #24]
 80081d6:	6922      	ldr	r2, [r4, #16]
 80081d8:	b942      	cbnz	r2, 80081ec <__swsetup_r+0xa4>
 80081da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081de:	d1c5      	bne.n	800816c <__swsetup_r+0x24>
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	0799      	lsls	r1, r3, #30
 80081e4:	bf58      	it	pl
 80081e6:	6962      	ldrpl	r2, [r4, #20]
 80081e8:	60a2      	str	r2, [r4, #8]
 80081ea:	e7f4      	b.n	80081d6 <__swsetup_r+0x8e>
 80081ec:	2000      	movs	r0, #0
 80081ee:	e7f7      	b.n	80081e0 <__swsetup_r+0x98>
 80081f0:	20000030 	.word	0x20000030

080081f4 <__swhatbuf_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	460c      	mov	r4, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	2900      	cmp	r1, #0
 80081fe:	b096      	sub	sp, #88	@ 0x58
 8008200:	4615      	mov	r5, r2
 8008202:	461e      	mov	r6, r3
 8008204:	da0d      	bge.n	8008222 <__swhatbuf_r+0x2e>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800820c:	f04f 0100 	mov.w	r1, #0
 8008210:	bf14      	ite	ne
 8008212:	2340      	movne	r3, #64	@ 0x40
 8008214:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008218:	2000      	movs	r0, #0
 800821a:	6031      	str	r1, [r6, #0]
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	b016      	add	sp, #88	@ 0x58
 8008220:	bd70      	pop	{r4, r5, r6, pc}
 8008222:	466a      	mov	r2, sp
 8008224:	f000 f872 	bl	800830c <_fstat_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	dbec      	blt.n	8008206 <__swhatbuf_r+0x12>
 800822c:	9901      	ldr	r1, [sp, #4]
 800822e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008232:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008236:	4259      	negs	r1, r3
 8008238:	4159      	adcs	r1, r3
 800823a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800823e:	e7eb      	b.n	8008218 <__swhatbuf_r+0x24>

08008240 <__smakebuf_r>:
 8008240:	898b      	ldrh	r3, [r1, #12]
 8008242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008244:	079d      	lsls	r5, r3, #30
 8008246:	4606      	mov	r6, r0
 8008248:	460c      	mov	r4, r1
 800824a:	d507      	bpl.n	800825c <__smakebuf_r+0x1c>
 800824c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	2301      	movs	r3, #1
 8008256:	6163      	str	r3, [r4, #20]
 8008258:	b003      	add	sp, #12
 800825a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825c:	ab01      	add	r3, sp, #4
 800825e:	466a      	mov	r2, sp
 8008260:	f7ff ffc8 	bl	80081f4 <__swhatbuf_r>
 8008264:	9f00      	ldr	r7, [sp, #0]
 8008266:	4605      	mov	r5, r0
 8008268:	4639      	mov	r1, r7
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff fbf6 	bl	8007a5c <_malloc_r>
 8008270:	b948      	cbnz	r0, 8008286 <__smakebuf_r+0x46>
 8008272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008276:	059a      	lsls	r2, r3, #22
 8008278:	d4ee      	bmi.n	8008258 <__smakebuf_r+0x18>
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	e7e2      	b.n	800824c <__smakebuf_r+0xc>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	6020      	str	r0, [r4, #0]
 800828a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	9b01      	ldr	r3, [sp, #4]
 8008292:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008296:	b15b      	cbz	r3, 80082b0 <__smakebuf_r+0x70>
 8008298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f847 	bl	8008330 <_isatty_r>
 80082a2:	b128      	cbz	r0, 80082b0 <__smakebuf_r+0x70>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	431d      	orrs	r5, r3
 80082b4:	81a5      	strh	r5, [r4, #12]
 80082b6:	e7cf      	b.n	8008258 <__smakebuf_r+0x18>

080082b8 <memmove>:
 80082b8:	4288      	cmp	r0, r1
 80082ba:	b510      	push	{r4, lr}
 80082bc:	eb01 0402 	add.w	r4, r1, r2
 80082c0:	d902      	bls.n	80082c8 <memmove+0x10>
 80082c2:	4284      	cmp	r4, r0
 80082c4:	4623      	mov	r3, r4
 80082c6:	d807      	bhi.n	80082d8 <memmove+0x20>
 80082c8:	1e43      	subs	r3, r0, #1
 80082ca:	42a1      	cmp	r1, r4
 80082cc:	d008      	beq.n	80082e0 <memmove+0x28>
 80082ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d6:	e7f8      	b.n	80082ca <memmove+0x12>
 80082d8:	4402      	add	r2, r0
 80082da:	4601      	mov	r1, r0
 80082dc:	428a      	cmp	r2, r1
 80082de:	d100      	bne.n	80082e2 <memmove+0x2a>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ea:	e7f7      	b.n	80082dc <memmove+0x24>

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d06      	ldr	r5, [pc, #24]	@ (8008308 <_close_r+0x1c>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7f8 fdb3 	bl	8000e62 <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20000624 	.word	0x20000624

0800830c <_fstat_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	@ (800832c <_fstat_r+0x20>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f7f8 fdae 	bl	8000e7a <_fstat>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d102      	bne.n	8008328 <_fstat_r+0x1c>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b103      	cbz	r3, 8008328 <_fstat_r+0x1c>
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	20000624 	.word	0x20000624

08008330 <_isatty_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d06      	ldr	r5, [pc, #24]	@ (800834c <_isatty_r+0x1c>)
 8008334:	2300      	movs	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7f8 fdad 	bl	8000e9a <_isatty>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_isatty_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_isatty_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000624 	.word	0x20000624

08008350 <_lseek_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d07      	ldr	r5, [pc, #28]	@ (8008370 <_lseek_r+0x20>)
 8008354:	4604      	mov	r4, r0
 8008356:	4608      	mov	r0, r1
 8008358:	4611      	mov	r1, r2
 800835a:	2200      	movs	r2, #0
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7f8 fda6 	bl	8000eb0 <_lseek>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_lseek_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_lseek_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20000624 	.word	0x20000624

08008374 <_read_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	@ (8008394 <_read_r+0x20>)
 8008378:	4604      	mov	r4, r0
 800837a:	4608      	mov	r0, r1
 800837c:	4611      	mov	r1, r2
 800837e:	2200      	movs	r2, #0
 8008380:	602a      	str	r2, [r5, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	f7f8 fd34 	bl	8000df0 <_read>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_read_r+0x1e>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_read_r+0x1e>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000624 	.word	0x20000624

08008398 <_sbrk_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	@ (80083b4 <_sbrk_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f8 fd92 	bl	8000ecc <_sbrk>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_sbrk_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_sbrk_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000624 	.word	0x20000624

080083b8 <_write_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	@ (80083d8 <_write_r+0x20>)
 80083bc:	4604      	mov	r4, r0
 80083be:	4608      	mov	r0, r1
 80083c0:	4611      	mov	r1, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f8 fd2f 	bl	8000e2a <_write>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_write_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_write_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20000624 	.word	0x20000624

080083dc <memcpy>:
 80083dc:	440a      	add	r2, r1
 80083de:	4291      	cmp	r1, r2
 80083e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083e4:	d100      	bne.n	80083e8 <memcpy+0xc>
 80083e6:	4770      	bx	lr
 80083e8:	b510      	push	{r4, lr}
 80083ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f2:	4291      	cmp	r1, r2
 80083f4:	d1f9      	bne.n	80083ea <memcpy+0xe>
 80083f6:	bd10      	pop	{r4, pc}

080083f8 <_free_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d041      	beq.n	8008484 <_free_r+0x8c>
 8008400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008404:	1f0c      	subs	r4, r1, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfb8      	it	lt
 800840a:	18e4      	addlt	r4, r4, r3
 800840c:	f7ff fde0 	bl	8007fd0 <__malloc_lock>
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <_free_r+0x90>)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	b933      	cbnz	r3, 8008424 <_free_r+0x2c>
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008420:	f7ff bddc 	b.w	8007fdc <__malloc_unlock>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x42>
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	1821      	adds	r1, r4, r0
 800842c:	428b      	cmp	r3, r1
 800842e:	bf01      	itttt	eq
 8008430:	6819      	ldreq	r1, [r3, #0]
 8008432:	685b      	ldreq	r3, [r3, #4]
 8008434:	1809      	addeq	r1, r1, r0
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	e7ed      	b.n	8008416 <_free_r+0x1e>
 800843a:	461a      	mov	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b10b      	cbz	r3, 8008444 <_free_r+0x4c>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x42>
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	1850      	adds	r0, r2, r1
 8008448:	42a0      	cmp	r0, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x6c>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	4401      	add	r1, r0
 8008450:	1850      	adds	r0, r2, r1
 8008452:	4283      	cmp	r3, r0
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	d1e0      	bne.n	800841a <_free_r+0x22>
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	4408      	add	r0, r1
 8008460:	6010      	str	r0, [r2, #0]
 8008462:	e7da      	b.n	800841a <_free_r+0x22>
 8008464:	d902      	bls.n	800846c <_free_r+0x74>
 8008466:	230c      	movs	r3, #12
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	e7d6      	b.n	800841a <_free_r+0x22>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	1821      	adds	r1, r4, r0
 8008470:	428b      	cmp	r3, r1
 8008472:	bf04      	itt	eq
 8008474:	6819      	ldreq	r1, [r3, #0]
 8008476:	685b      	ldreq	r3, [r3, #4]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	6054      	str	r4, [r2, #4]
 8008482:	e7ca      	b.n	800841a <_free_r+0x22>
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20000620 	.word	0x20000620

0800848c <_malloc_usable_size_r>:
 800848c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008490:	1f18      	subs	r0, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	bfbc      	itt	lt
 8008496:	580b      	ldrlt	r3, [r1, r0]
 8008498:	18c0      	addlt	r0, r0, r3
 800849a:	4770      	bx	lr

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
