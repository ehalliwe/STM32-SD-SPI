
kerplunk2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08007ff8  08007ff8  00008ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f8  080088f8  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  080088f8  080088f8  000098f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008900  08008900  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008900  08008900  00009900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008904  08008904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008908  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000080  08008988  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08008988  0000a628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eadb  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f9  00000000  00000000  00018b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a34  00000000  00000000  0001bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e12  00000000  00000000  0001ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013144  00000000  00000000  00040826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb89  00000000  00000000  0005396a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001214f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  00121538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00125428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fe0 	.word	0x08007fe0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007fe0 	.word	0x08007fe0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <UART_Print>:
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
static void UART_Print(char* str)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <UART_Print+0x24>)
 80005c8:	f002 fa72 	bl	8002ab0 <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000014c 	.word	0x2000014c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fcd1 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f819 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f915 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f8e9 	bl	80007c0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005ee:	f002 fe1b 	bl	8003228 <MX_FATFS_Init>
  MX_SPI3_Init();
 80005f2:	f000 f8af 	bl	8000754 <MX_SPI3_Init>
  MX_SPI2_Init();
 80005f6:	f000 f87b 	bl	80006f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //Test The SD Card
//  SD_Card_Test();
  int* counter = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  SD_Card_Foo(&counter);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f965 	bl	80008d0 <SD_Card_Foo>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
	//SD_Card_Test();
	SD_Card_Foo(&counter);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f961 	bl	80008d0 <SD_Card_Foo>
	//HAL_Delay(1000);		/* Insert delay 100 ms */
//	HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
	counter++;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3304      	adds	r3, #4
 8000612:	607b      	str	r3, [r7, #4]
	SD_Card_Foo(&counter);
 8000614:	bf00      	nop
 8000616:	e7f6      	b.n	8000606 <main+0x2e>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fcca 	bl	8006fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000690:	2350      	movs	r3, #80	@ 0x50
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fabd 	bl	8001c24 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b0:	f000 f9fe 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff5d 	bl	8001590 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006dc:	f000 f9e8 	bl	8000ab0 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	@ 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_SPI2_Init+0x5c>)
 80006f6:	4a16      	ldr	r2, [pc, #88]	@ (8000750 <MX_SPI2_Init+0x60>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI2_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000708:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800070c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI2_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_SPI2_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI2_Init+0x5c>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_SPI2_Init+0x5c>)
 800073a:	f001 fd11 	bl	8002160 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f9b4 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000009c 	.word	0x2000009c
 8000750:	40003800 	.word	0x40003800

08000754 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_SPI3_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_SPI3_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_SPI3_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_SPI3_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000788:	2210      	movs	r2, #16
 800078a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_SPI3_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_SPI3_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_SPI3_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_SPI3_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_SPI3_Init+0x64>)
 80007a6:	f001 fcdb 	bl	8002160 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f97e 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	40003c00 	.word	0x40003c00

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f002 f90a 	bl	8002a10 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f955 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000014c 	.word	0x2000014c
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a1e      	ldr	r2, [pc, #120]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI3_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2121      	movs	r1, #33	@ 0x21
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <MX_GPIO_Init+0xb8>)
 80008a0:	f000 fe5c 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI3_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin|LD2_Pin;
 80008a4:	2321      	movs	r3, #33	@ 0x21
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0xb8>)
 80008bc:	f000 fcba 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <SD_Card_Foo>:
    HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
    HAL_UART_Transmit_IT(&huart2, RX_Buffer, BUFFER_SIZE);
}

static void SD_Card_Foo(int* cnt)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008e2:	6018      	str	r0, [r3, #0]
	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	UINT RWC, WWC, temp = *cnt; // Read/Write Word Counter
 80008e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80008f4:	f102 0204 	add.w	r2, r2, #4
 80008f8:	6013      	str	r3, [r2, #0]
    char RW_Buffer[200];
    do
    {
    	printf(TxBuffer, "-----------Start-a-mundo--------- \r\n");
 80008fa:	4963      	ldr	r1, [pc, #396]	@ (8000a88 <SD_Card_Foo+0x1b8>)
 80008fc:	4863      	ldr	r0, [pc, #396]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 80008fe:	f006 fb4d 	bl	8006f9c <iprintf>
    	UART_Print(TxBuffer);
 8000902:	4862      	ldr	r0, [pc, #392]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000904:	f7ff fe54 	bl	80005b0 <UART_Print>
    	FR_Status = f_mount(&FatFs, "",1);
 8000908:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 800090c:	f103 0308 	add.w	r3, r3, #8
 8000910:	2201      	movs	r2, #1
 8000912:	495f      	ldr	r1, [pc, #380]	@ (8000a90 <SD_Card_Foo+0x1c0>)
 8000914:	4618      	mov	r0, r3
 8000916:	f005 fb93 	bl	8006040 <f_mount>
 800091a:	4603      	mov	r3, r0
 800091c:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000920:	f102 0203 	add.w	r2, r2, #3
 8000924:	7013      	strb	r3, [r2, #0]
    	if (FR_Status != FR_OK)
 8000926:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 800092a:	f103 0303 	add.w	r3, r3, #3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00d      	beq.n	8000950 <SD_Card_Foo+0x80>
    	{
    		sprintf(TxBuffer, "Whilst Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000934:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000938:	f103 0303 	add.w	r3, r3, #3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4954      	ldr	r1, [pc, #336]	@ (8000a94 <SD_Card_Foo+0x1c4>)
 8000942:	4852      	ldr	r0, [pc, #328]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000944:	f006 fa48 	bl	8006dd8 <siprintf>
    		UART_Print(TxBuffer);
 8000948:	4850      	ldr	r0, [pc, #320]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 800094a:	f7ff fe31 	bl	80005b0 <UART_Print>
    		break;
 800094e:	e06e      	b.n	8000a2e <SD_Card_Foo+0x15e>
    	}
    	sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n");
 8000950:	4951      	ldr	r1, [pc, #324]	@ (8000a98 <SD_Card_Foo+0x1c8>)
 8000952:	484e      	ldr	r0, [pc, #312]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000954:	f006 fa40 	bl	8006dd8 <siprintf>
    	UART_Print(TxBuffer);
 8000958:	484c      	ldr	r0, [pc, #304]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 800095a:	f7ff fe29 	bl	80005b0 <UART_Print>

    FR_Status = f_open(&Fil, "bar.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800095e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000962:	3b30      	subs	r3, #48	@ 0x30
 8000964:	220a      	movs	r2, #10
 8000966:	494d      	ldr	r1, [pc, #308]	@ (8000a9c <SD_Card_Foo+0x1cc>)
 8000968:	4618      	mov	r0, r3
 800096a:	f005 fbaf 	bl	80060cc <f_open>
 800096e:	4603      	mov	r3, r0
 8000970:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000974:	f102 0203 	add.w	r2, r2, #3
 8000978:	7013      	strb	r3, [r2, #0]
    //FR_Status = f_lseek(&Fil, f_size(&Fil));
    sprintf(RW_Buffer, "%d\n", temp);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000982:	f102 0204 	add.w	r2, r2, #4
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4945      	ldr	r1, [pc, #276]	@ (8000aa0 <SD_Card_Foo+0x1d0>)
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fa24 	bl	8006dd8 <siprintf>
    FR_Status = f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc3b 	bl	8000210 <strlen>
 800099a:	4602      	mov	r2, r0
 800099c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009a0:	3b38      	subs	r3, #56	@ 0x38
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80009aa:	3830      	subs	r0, #48	@ 0x30
 80009ac:	f005 feb5 	bl	800671a <f_write>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80009b6:	f102 0203 	add.w	r2, r2, #3
 80009ba:	7013      	strb	r3, [r2, #0]
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	22c8      	movs	r2, #200	@ 0xc8
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 fafb 	bl	8006fc0 <memset>
    f_close(&Fil);
 80009ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009ce:	3b30      	subs	r3, #48	@ 0x30
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 f8b4 	bl	8006b3e <f_close>


    FR_Status = f_open(&Fil, "bar.txt", FA_READ);
 80009d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009da:	3b30      	subs	r3, #48	@ 0x30
 80009dc:	2201      	movs	r2, #1
 80009de:	492f      	ldr	r1, [pc, #188]	@ (8000a9c <SD_Card_Foo+0x1cc>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 fb73 	bl	80060cc <f_open>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80009ec:	f102 0203 	add.w	r2, r2, #3
 80009f0:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 80009f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009f6:	f853 2c64 	ldr.w	r2, [r3, #-100]
 80009fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009fe:	3b34      	subs	r3, #52	@ 0x34
 8000a00:	f107 0108 	add.w	r1, r7, #8
 8000a04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000a08:	3830      	subs	r0, #48	@ 0x30
 8000a0a:	f005 fd27 	bl	800645c <f_read>
    sprintf(TxBuffer, "simon says %s \n", RW_Buffer);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	461a      	mov	r2, r3
 8000a14:	4923      	ldr	r1, [pc, #140]	@ (8000aa4 <SD_Card_Foo+0x1d4>)
 8000a16:	481d      	ldr	r0, [pc, #116]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a18:	f006 f9de 	bl	8006dd8 <siprintf>
    UART_Print(TxBuffer);
 8000a1c:	481b      	ldr	r0, [pc, #108]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a1e:	f7ff fdc7 	bl	80005b0 <UART_Print>
    f_close(&Fil);
 8000a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a26:	3b30      	subs	r3, #48	@ 0x30
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 f888 	bl	8006b3e <f_close>

    } while(0);
   	  //------------------[ Test Complete! Unmount The SD Card ]--------------------
   	  FR_Status = f_mount(NULL, "", 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4917      	ldr	r1, [pc, #92]	@ (8000a90 <SD_Card_Foo+0x1c0>)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f005 fb04 	bl	8006040 <f_mount>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000a3e:	f102 0203 	add.w	r2, r2, #3
 8000a42:	7013      	strb	r3, [r2, #0]
  	  if (FR_Status != FR_OK)
 8000a44:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000a48:	f103 0303 	add.w	r3, r3, #3
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00d      	beq.n	8000a6e <SD_Card_Foo+0x19e>
      {
          sprintf(TxBuffer, "Whilst Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000a52:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000a56:	f103 0303 	add.w	r3, r3, #3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4912      	ldr	r1, [pc, #72]	@ (8000aa8 <SD_Card_Foo+0x1d8>)
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a62:	f006 f9b9 	bl	8006dd8 <siprintf>
          UART_Print(TxBuffer);
 8000a66:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a68:	f7ff fda2 	bl	80005b0 <UART_Print>
      } else{
          sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
          UART_Print(TxBuffer);
    }

}
 8000a6c:	e006      	b.n	8000a7c <SD_Card_Foo+0x1ac>
          sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000a6e:	490f      	ldr	r1, [pc, #60]	@ (8000aac <SD_Card_Foo+0x1dc>)
 8000a70:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a72:	f006 f9b1 	bl	8006dd8 <siprintf>
          UART_Print(TxBuffer);
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <SD_Card_Foo+0x1bc>)
 8000a78:	f7ff fd9a 	bl	80005b0 <UART_Print>
}
 8000a7c:	bf00      	nop
 8000a7e:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08007ff8 	.word	0x08007ff8
 8000a8c:	20000194 	.word	0x20000194
 8000a90:	08008020 	.word	0x08008020
 8000a94:	08008024 	.word	0x08008024
 8000a98:	08008050 	.word	0x08008050
 8000a9c:	08008074 	.word	0x08008074
 8000aa0:	0800807c 	.word	0x0800807c
 8000aa4:	08008080 	.word	0x08008080
 8000aa8:	08008090 	.word	0x08008090
 8000aac:	080080c0 	.word	0x080080c0

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 fb66 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a59      	ldr	r2, [pc, #356]	@ (8000c90 <HAL_SPI_MspInit+0x184>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d15b      	bne.n	8000be6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	4b58      	ldr	r3, [pc, #352]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a57      	ldr	r2, [pc, #348]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b55      	ldr	r3, [pc, #340]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	4b51      	ldr	r3, [pc, #324]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a50      	ldr	r2, [pc, #320]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a49      	ldr	r2, [pc, #292]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b47      	ldr	r3, [pc, #284]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB4     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b92:	2305      	movs	r3, #5
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	483e      	ldr	r0, [pc, #248]	@ (8000c98 <HAL_SPI_MspInit+0x18c>)
 8000b9e:	f000 fb49 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4837      	ldr	r0, [pc, #220]	@ (8000c9c <HAL_SPI_MspInit+0x190>)
 8000bc0:	f000 fb38 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482f      	ldr	r0, [pc, #188]	@ (8000c9c <HAL_SPI_MspInit+0x190>)
 8000be0:	f000 fb28 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be4:	e04f      	b.n	8000c86 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca0 <HAL_SPI_MspInit+0x194>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d14a      	bne.n	8000c86 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a1f      	ldr	r2, [pc, #124]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_SPI_MspInit+0x188>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000c54:	2307      	movs	r3, #7
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <HAL_SPI_MspInit+0x190>)
 8000c60:	f000 fae8 	bl	8001234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c76:	2306      	movs	r3, #6
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_SPI_MspInit+0x18c>)
 8000c82:	f000 fad7 	bl	8001234 <HAL_GPIO_Init>
}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	@ 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40003800 	.word	0x40003800
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40003c00 	.word	0x40003c00

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1a:	f000 fa8b 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <SysTick_Handler+0x34>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <SysTick_Handler+0x18>
    Timer1--;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <SysTick_Handler+0x34>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <SysTick_Handler+0x34>)
 8000d9e:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <SysTick_Handler+0x38>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <SysTick_Handler+0x2c>
    Timer2--;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <SysTick_Handler+0x38>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <SysTick_Handler+0x38>)
 8000db2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f938 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200002a0 	.word	0x200002a0
 8000dc0:	200002a2 	.word	0x200002a2

08000dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e009      	b.n	8000e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf1      	blt.n	8000e10 <_write+0x12>
  }
  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f006 f87e 	bl	8006fd0 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000290 	.word	0x20000290
 8000f08:	20000628 	.word	0x20000628

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f006 f83d 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fb39 	bl	80005d8 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f74:	08008908 	.word	0x08008908
  ldr r2, =_sbss
 8000f78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f7c:	20000628 	.word	0x20000628

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f90d 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fd80 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f917 	bl	800121a <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001004:	f000 f8ed 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000294 	.word	0x20000294

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000294 	.word	0x20000294

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e165      	b.n	800151c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8154 	bne.w	8001516 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	2b02      	cmp	r3, #2
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80ae 	beq.w	8001516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <HAL_GPIO_Init+0x300>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001534 <HAL_GPIO_Init+0x300>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001534 <HAL_GPIO_Init+0x300>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a58      	ldr	r2, [pc, #352]	@ (8001538 <HAL_GPIO_Init+0x304>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	@ (800153c <HAL_GPIO_Init+0x308>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x21a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4e      	ldr	r2, [pc, #312]	@ (8001540 <HAL_GPIO_Init+0x30c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x216>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4d      	ldr	r2, [pc, #308]	@ (8001544 <HAL_GPIO_Init+0x310>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x212>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4c      	ldr	r2, [pc, #304]	@ (8001548 <HAL_GPIO_Init+0x314>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x20e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4b      	ldr	r2, [pc, #300]	@ (800154c <HAL_GPIO_Init+0x318>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x20a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4a      	ldr	r2, [pc, #296]	@ (8001550 <HAL_GPIO_Init+0x31c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x206>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a49      	ldr	r2, [pc, #292]	@ (8001554 <HAL_GPIO_Init+0x320>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x202>
 8001432:	2306      	movs	r3, #6
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 8001436:	2307      	movs	r3, #7
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x21c>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	@ (8001538 <HAL_GPIO_Init+0x304>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_GPIO_Init+0x324>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a31      	ldr	r2, [pc, #196]	@ (8001558 <HAL_GPIO_Init+0x324>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <HAL_GPIO_Init+0x324>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_GPIO_Init+0x324>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001510:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <HAL_GPIO_Init+0x324>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae96 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	@ 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0cc      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b68      	ldr	r3, [pc, #416]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d90c      	bls.n	80015cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b65      	ldr	r3, [pc, #404]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d044      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d119      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e067      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b37      	ldr	r3, [pc, #220]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4934      	ldr	r1, [pc, #208]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fce6 	bl	8001050 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fce2 	bl	8001050 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20c      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f855 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	@ (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc46 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	0800846c 	.word	0x0800846c
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_RCC_GetHCLKFreq+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001778:	f7ff fff0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	@ (8001798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	0800847c 	.word	0x0800847c

0800179c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017a0:	f7ff ffdc 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0b5b      	lsrs	r3, r3, #13
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4903      	ldr	r1, [pc, #12]	@ (80017c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	0800847c 	.word	0x0800847c

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c8:	b0ae      	sub	sp, #184	@ 0xb8
 80017ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ea:	4bcb      	ldr	r3, [pc, #812]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	f200 8206 	bhi.w	8001c04 <HAL_RCC_GetSysClockFreq+0x440>
 80017f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001835 	.word	0x08001835
 8001804:	08001c05 	.word	0x08001c05
 8001808:	08001c05 	.word	0x08001c05
 800180c:	08001c05 	.word	0x08001c05
 8001810:	0800183d 	.word	0x0800183d
 8001814:	08001c05 	.word	0x08001c05
 8001818:	08001c05 	.word	0x08001c05
 800181c:	08001c05 	.word	0x08001c05
 8001820:	08001845 	.word	0x08001845
 8001824:	08001c05 	.word	0x08001c05
 8001828:	08001c05 	.word	0x08001c05
 800182c:	08001c05 	.word	0x08001c05
 8001830:	08001a35 	.word	0x08001a35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4bb9      	ldr	r3, [pc, #740]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800183a:	e1e7      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183c:	4bb8      	ldr	r3, [pc, #736]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e1e3      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4bb4      	ldr	r3, [pc, #720]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001850:	4bb1      	ldr	r3, [pc, #708]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d071      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185c:	4bae      	ldr	r3, [pc, #696]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	2200      	movs	r2, #0
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001868:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800186c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001874:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800187e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4621      	mov	r1, r4
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	6439      	str	r1, [r7, #64]	@ 0x40
 80018a0:	4629      	mov	r1, r5
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80018b4:	4649      	mov	r1, r9
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4641      	mov	r1, r8
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4641      	mov	r1, r8
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4641      	mov	r1, r8
 80018c4:	1a51      	subs	r1, r2, r1
 80018c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80018c8:	4649      	mov	r1, r9
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80018dc:	4649      	mov	r1, r9
 80018de:	00cb      	lsls	r3, r1, #3
 80018e0:	4641      	mov	r1, r8
 80018e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018e6:	4641      	mov	r1, r8
 80018e8:	00ca      	lsls	r2, r1, #3
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	4622      	mov	r2, r4
 80018f2:	189b      	adds	r3, r3, r2
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	462b      	mov	r3, r5
 80018f8:	460a      	mov	r2, r1
 80018fa:	eb42 0303 	adc.w	r3, r2, r3
 80018fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800190c:	4629      	mov	r1, r5
 800190e:	024b      	lsls	r3, r1, #9
 8001910:	4621      	mov	r1, r4
 8001912:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001916:	4621      	mov	r1, r4
 8001918:	024a      	lsls	r2, r1, #9
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800192c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001930:	f7fe fcc6 	bl	80002c0 <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800193e:	e067      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001940:	4b75      	ldr	r3, [pc, #468]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	2200      	movs	r2, #0
 8001948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800194c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001950:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800195a:	2300      	movs	r3, #0
 800195c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800195e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001962:	4622      	mov	r2, r4
 8001964:	462b      	mov	r3, r5
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	0159      	lsls	r1, r3, #5
 8001970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001974:	0150      	lsls	r0, r2, #5
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4621      	mov	r1, r4
 800197c:	1a51      	subs	r1, r2, r1
 800197e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001980:	4629      	mov	r1, r5
 8001982:	eb63 0301 	sbc.w	r3, r3, r1
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001994:	4649      	mov	r1, r9
 8001996:	018b      	lsls	r3, r1, #6
 8001998:	4641      	mov	r1, r8
 800199a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199e:	4641      	mov	r1, r8
 80019a0:	018a      	lsls	r2, r1, #6
 80019a2:	4641      	mov	r1, r8
 80019a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a8:	4649      	mov	r1, r9
 80019aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019c2:	4692      	mov	sl, r2
 80019c4:	469b      	mov	fp, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	eb1a 0303 	adds.w	r3, sl, r3
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	462b      	mov	r3, r5
 80019d0:	eb4b 0303 	adc.w	r3, fp, r3
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019e2:	4629      	mov	r1, r5
 80019e4:	028b      	lsls	r3, r1, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019ec:	4621      	mov	r1, r4
 80019ee:	028a      	lsls	r2, r1, #10
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019f8:	2200      	movs	r2, #0
 80019fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80019fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80019fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a02:	f7fe fc5d 	bl	80002c0 <__aeabi_uldivmod>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a10:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a32:	e0eb      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a40:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d06b      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4b32      	ldr	r3, [pc, #200]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a60:	2300      	movs	r3, #0
 8001a62:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a68:	4622      	mov	r2, r4
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4621      	mov	r1, r4
 8001a82:	1a51      	subs	r1, r2, r1
 8001a84:	61b9      	str	r1, [r7, #24]
 8001a86:	4629      	mov	r1, r5
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a9a:	4659      	mov	r1, fp
 8001a9c:	018b      	lsls	r3, r1, #6
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	018a      	lsls	r2, r1, #6
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	ebb2 0801 	subs.w	r8, r2, r1
 8001aae:	4659      	mov	r1, fp
 8001ab0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac8:	4690      	mov	r8, r2
 8001aca:	4699      	mov	r9, r3
 8001acc:	4623      	mov	r3, r4
 8001ace:	eb18 0303 	adds.w	r3, r8, r3
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	eb49 0303 	adc.w	r3, r9, r3
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	024b      	lsls	r3, r1, #9
 8001aec:	4621      	mov	r1, r4
 8001aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af2:	4621      	mov	r1, r4
 8001af4:	024a      	lsls	r2, r1, #9
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001afe:	2200      	movs	r2, #0
 8001b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b08:	f7fe fbda 	bl	80002c0 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b16:	e065      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x420>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4611      	mov	r1, r2
 8001b30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b36:	2300      	movs	r3, #0
 8001b38:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001b3e:	4642      	mov	r2, r8
 8001b40:	464b      	mov	r3, r9
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f04f 0100 	mov.w	r1, #0
 8001b4a:	0159      	lsls	r1, r3, #5
 8001b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b50:	0150      	lsls	r0, r2, #5
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4641      	mov	r1, r8
 8001b58:	1a51      	subs	r1, r2, r1
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b70:	4659      	mov	r1, fp
 8001b72:	018b      	lsls	r3, r1, #6
 8001b74:	4651      	mov	r1, sl
 8001b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	018a      	lsls	r2, r1, #6
 8001b7e:	4651      	mov	r1, sl
 8001b80:	1a54      	subs	r4, r2, r1
 8001b82:	4659      	mov	r1, fp
 8001b84:	eb63 0501 	sbc.w	r5, r3, r1
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	00eb      	lsls	r3, r5, #3
 8001b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b96:	00e2      	lsls	r2, r4, #3
 8001b98:	4614      	mov	r4, r2
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	18e3      	adds	r3, r4, r3
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	eb45 0303 	adc.w	r3, r5, r3
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	028b      	lsls	r3, r1, #10
 8001bba:	4621      	mov	r1, r4
 8001bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	028a      	lsls	r2, r1, #10
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bcc:	2200      	movs	r2, #0
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001bd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bd6:	f7fe fb73 	bl	80002c0 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4613      	mov	r3, r2
 8001be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0f1b      	lsrs	r3, r3, #28
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c02:	e003      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	37b8      	adds	r7, #184	@ 0xb8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400

08001c24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e28d      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8083 	beq.w	8001d4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c44:	4b94      	ldr	r3, [pc, #592]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d019      	beq.n	8001c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c50:	4b91      	ldr	r3, [pc, #580]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c68:	d00c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b88      	ldr	r3, [pc, #544]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b84      	ldr	r3, [pc, #528]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <HAL_RCC_OscConfig+0x124>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e25a      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x90>
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7b      	ldr	r2, [pc, #492]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xcc>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xb4>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a72      	ldr	r2, [pc, #456]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xcc>
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f9aa 	bl	8001050 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f9a6 	bl	8001050 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e21f      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xdc>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f996 	bl	8001050 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff f992 	bl	8001050 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e20b      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b57      	ldr	r3, [pc, #348]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x104>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06f      	beq.n	8001e36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d56:	4b50      	ldr	r3, [pc, #320]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d017      	beq.n	8001d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d62:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b44      	ldr	r3, [pc, #272]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b41      	ldr	r3, [pc, #260]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x186>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1d3      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4937      	ldr	r1, [pc, #220]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e03a      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <HAL_RCC_OscConfig+0x278>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff f93f 	bl	8001050 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f93b 	bl	8001050 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1b4      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4925      	ldr	r1, [pc, #148]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_RCC_OscConfig+0x278>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f91e 	bl	8001050 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff f91a 	bl	8001050 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e193      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d036      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f8fe 	bl	8001050 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff f8fa 	bl	8001050 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e173      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x234>
 8001e76:	e01b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f8e7 	bl	8001050 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e00e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f8e3 	bl	8001050 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d907      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e15c      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	42470000 	.word	0x42470000
 8001ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ea      	bne.n	8001e86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8097 	beq.w	8001fec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b83      	ldr	r3, [pc, #524]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ede:	4b7c      	ldr	r3, [pc, #496]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b79      	ldr	r3, [pc, #484]	@ (80020d4 <HAL_RCC_OscConfig+0x4b0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b76      	ldr	r3, [pc, #472]	@ (80020d4 <HAL_RCC_OscConfig+0x4b0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a75      	ldr	r2, [pc, #468]	@ (80020d4 <HAL_RCC_OscConfig+0x4b0>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7ff f8a3 	bl	8001050 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff f89f 	bl	8001050 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e118      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b6c      	ldr	r3, [pc, #432]	@ (80020d4 <HAL_RCC_OscConfig+0x4b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x31e>
 8001f34:	4b66      	ldr	r3, [pc, #408]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a65      	ldr	r2, [pc, #404]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x358>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x340>
 8001f4a:	4b61      	ldr	r3, [pc, #388]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	4a60      	ldr	r2, [pc, #384]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f56:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x358>
 8001f64:	4b5a      	ldr	r3, [pc, #360]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f68:	4a59      	ldr	r2, [pc, #356]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f70:	4b57      	ldr	r3, [pc, #348]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	4a56      	ldr	r2, [pc, #344]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	f023 0304 	bic.w	r3, r3, #4
 8001f7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f864 	bl	8001050 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f860 	bl	8001050 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0d7      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ee      	beq.n	8001f8c <HAL_RCC_OscConfig+0x368>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f84e 	bl	8001050 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f84a 	bl	8001050 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0c1      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fce:	4b40      	ldr	r3, [pc, #256]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ee      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ad 	beq.w	8002150 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff6:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d060      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d145      	bne.n	8002096 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b33      	ldr	r3, [pc, #204]	@ (80020d8 <HAL_RCC_OscConfig+0x4b4>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f81e 	bl	8001050 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f81a 	bl	8001050 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e093      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	071b      	lsls	r3, r3, #28
 8002062:	491b      	ldr	r1, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x4b4>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7fe ffef 	bl	8001050 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe ffeb 	bl	8001050 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e064      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x452>
 8002094:	e05c      	b.n	8002150 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_RCC_OscConfig+0x4b4>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ffd8 	bl	8001050 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe ffd4 	bl	8001050 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04d      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x480>
 80020c2:	e045      	b.n	8002150 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e040      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_RCC_OscConfig+0x538>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d030      	beq.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d129      	bne.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d122      	bne.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	4293      	cmp	r3, r2
 8002116:	d119      	bne.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d10f      	bne.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07b      	b.n	800226a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002182:	d009      	beq.n	8002198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
 800218a:	e005      	b.n	8002198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fcaa 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0104 	and.w	r1, r3, #4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f003 0210 	and.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b088      	sub	sp, #32
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_SPI_Transmit+0x22>
 8002290:	2302      	movs	r3, #2
 8002292:	e12d      	b.n	80024f0 <HAL_SPI_Transmit+0x27e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800229c:	f7fe fed8 	bl	8001050 <HAL_GetTick>
 80022a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022b6:	e116      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_SPI_Transmit+0x52>
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022c8:	e10d      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002310:	d10f      	bne.n	8002332 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233c:	2b40      	cmp	r3, #64	@ 0x40
 800233e:	d007      	beq.n	8002350 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002358:	d14f      	bne.n	80023fa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_Transmit+0xf6>
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d142      	bne.n	80023ee <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	1c9a      	adds	r2, r3, #2
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800238c:	e02f      	b.n	80023ee <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	d112      	bne.n	80023c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023c0:	e015      	b.n	80023ee <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c2:	f7fe fe45 	bl	8001050 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d803      	bhi.n	80023da <HAL_SPI_Transmit+0x168>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d8:	d102      	bne.n	80023e0 <HAL_SPI_Transmit+0x16e>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023ec:	e07b      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ca      	bne.n	800238e <HAL_SPI_Transmit+0x11c>
 80023f8:	e050      	b.n	800249c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_SPI_Transmit+0x196>
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d144      	bne.n	8002492 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800242e:	e030      	b.n	8002492 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d113      	bne.n	8002466 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002464:	e015      	b.n	8002492 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002466:	f7fe fdf3 	bl	8001050 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_Transmit+0x20c>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800247c:	d102      	bne.n	8002484 <HAL_SPI_Transmit+0x212>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002490:	e029      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1c9      	bne.n	8002430 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fa61 	bl	8002968 <SPI_EndRxTxTransaction>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
 80024dc:	e003      	b.n	80024e6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002506:	2301      	movs	r3, #1
 8002508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_SPI_TransmitReceive+0x26>
 800251a:	2302      	movs	r3, #2
 800251c:	e198      	b.n	8002850 <HAL_SPI_TransmitReceive+0x358>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002526:	f7fe fd93 	bl	8001050 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002544:	2b01      	cmp	r3, #1
 8002546:	d00f      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x70>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800254e:	d107      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x68>
 8002558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800255c:	2b04      	cmp	r3, #4
 800255e:	d003      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002566:	e16d      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_SPI_TransmitReceive+0x82>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_SPI_TransmitReceive+0x82>
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002580:	e160      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d6:	2b40      	cmp	r3, #64	@ 0x40
 80025d8:	d007      	beq.n	80025ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f2:	d17c      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x10a>
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d16a      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	1c9a      	adds	r2, r3, #2
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002626:	e057      	b.n	80026d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d11b      	bne.n	800266e <HAL_SPI_TransmitReceive+0x176>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d016      	beq.n	800266e <HAL_SPI_TransmitReceive+0x176>
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d113      	bne.n	800266e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d119      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x1b8>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d014      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	b292      	uxth	r2, r2
 8002692:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	1c9a      	adds	r2, r3, #2
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ac:	2301      	movs	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026b0:	f7fe fcce 	bl	8001050 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026bc:	429a      	cmp	r2, r3
 80026be:	d80b      	bhi.n	80026d8 <HAL_SPI_TransmitReceive+0x1e0>
 80026c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026c6:	d007      	beq.n	80026d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80026d6:	e0b5      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1a2      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x130>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d19d      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x130>
 80026ec:	e080      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x204>
 80026f6:	8b7b      	ldrh	r3, [r7, #26]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d16f      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002722:	e05b      	b.n	80027dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d11c      	bne.n	800276c <HAL_SPI_TransmitReceive+0x274>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_SPI_TransmitReceive+0x274>
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d114      	bne.n	800276c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d119      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x2b6>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027aa:	2301      	movs	r3, #1
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027ae:	f7fe fc4f 	bl	8001050 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d803      	bhi.n	80027c6 <HAL_SPI_TransmitReceive+0x2ce>
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027c4:	d102      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x2d4>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80027da:	e033      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d19e      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x22c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d199      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f8b7 	bl	8002968 <SPI_EndRxTxTransaction>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800280c:	e01a      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800283a:	e003      	b.n	8002844 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800284c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002850:	4618      	mov	r0, r3
 8002852:	3730      	adds	r7, #48	@ 0x30
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002868:	f7fe fbf2 	bl	8001050 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002878:	f7fe fbea 	bl	8001050 <HAL_GetTick>
 800287c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800287e:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288e:	e054      	b.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002896:	d050      	beq.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002898:	f7fe fbda 	bl	8001050 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d902      	bls.n	80028ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13d      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c6:	d111      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d0:	d004      	beq.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d107      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f4:	d10f      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e017      	b.n	800295a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3b01      	subs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	429a      	cmp	r2, r3
 8002956:	d19b      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2201      	movs	r2, #1
 800297c:	2102      	movs	r1, #2
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff ff6a 	bl	8002858 <SPI_WaitFlagStateUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e032      	b.n	8002a00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <SPI_EndRxTxTransaction+0xa0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <SPI_EndRxTxTransaction+0xa4>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	0d5b      	lsrs	r3, r3, #21
 80029a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029b8:	d112      	bne.n	80029e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2180      	movs	r1, #128	@ 0x80
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff47 	bl	8002858 <SPI_WaitFlagStateUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d016      	beq.n	80029fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e00f      	b.n	8002a00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b80      	cmp	r3, #128	@ 0x80
 80029f8:	d0f2      	beq.n	80029e0 <SPI_EndRxTxTransaction+0x78>
 80029fa:	e000      	b.n	80029fe <SPI_EndRxTxTransaction+0x96>
        break;
 80029fc:	bf00      	nop
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	165e9f81 	.word	0x165e9f81

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e042      	b.n	8002aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f934 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	@ 0x24
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f973 	bl	8002d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d175      	bne.n	8002bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Transmit+0x2c>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e06e      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2221      	movs	r2, #33	@ 0x21
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aee:	f7fe faaf 	bl	8001050 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b08:	d108      	bne.n	8002b1c <HAL_UART_Transmit+0x6c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b24:	e02e      	b.n	8002b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f848 	bl	8002bc6 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e03a      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3302      	adds	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e007      	b.n	8002b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1cb      	bne.n	8002b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2140      	movs	r1, #64	@ 0x40
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f814 	bl	8002bc6 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e006      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd6:	e03b      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bde:	d037      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe fa36 	bl	8001050 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e03a      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d023      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b80      	cmp	r3, #128	@ 0x80
 8002c0c:	d020      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d01d      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d116      	bne.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f81d 	bl	8002c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2208      	movs	r2, #8
 8002c42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e00f      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d0b4      	beq.n	8002bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b095      	sub	sp, #84	@ 0x54
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ca0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d10:	61ba      	str	r2, [r7, #24]
 8002d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d32:	bf00      	nop
 8002d34:	3754      	adds	r7, #84	@ 0x54
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b0c0      	sub	sp, #256	@ 0x100
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	68d9      	ldr	r1, [r3, #12]
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	ea40 0301 	orr.w	r3, r0, r1
 8002d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d98:	f021 010c 	bic.w	r1, r1, #12
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002da6:	430b      	orrs	r3, r1
 8002da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dba:	6999      	ldr	r1, [r3, #24]
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	ea40 0301 	orr.w	r3, r0, r1
 8002dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b8f      	ldr	r3, [pc, #572]	@ (800300c <UART_SetConfig+0x2cc>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d005      	beq.n	8002de0 <UART_SetConfig+0xa0>
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <UART_SetConfig+0x2d0>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d104      	bne.n	8002dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de0:	f7fe fcdc 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002de8:	e003      	b.n	8002df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dea:	f7fe fcc3 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfc:	f040 810c 	bne.w	8003018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e12:	4622      	mov	r2, r4
 8002e14:	462b      	mov	r3, r5
 8002e16:	1891      	adds	r1, r2, r2
 8002e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e1a:	415b      	adcs	r3, r3
 8002e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e22:	4621      	mov	r1, r4
 8002e24:	eb12 0801 	adds.w	r8, r2, r1
 8002e28:	4629      	mov	r1, r5
 8002e2a:	eb43 0901 	adc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e50:	462b      	mov	r3, r5
 8002e52:	eb49 0303 	adc.w	r3, r9, r3
 8002e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e6e:	460b      	mov	r3, r1
 8002e70:	18db      	adds	r3, r3, r3
 8002e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e74:	4613      	mov	r3, r2
 8002e76:	eb42 0303 	adc.w	r3, r2, r3
 8002e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e84:	f7fd fa1c 	bl	80002c0 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4b61      	ldr	r3, [pc, #388]	@ (8003014 <UART_SetConfig+0x2d4>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011c      	lsls	r4, r3, #4
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002eb8:	4641      	mov	r1, r8
 8002eba:	eb12 0a01 	adds.w	sl, r2, r1
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed8:	4692      	mov	sl, r2
 8002eda:	469b      	mov	fp, r3
 8002edc:	4643      	mov	r3, r8
 8002ede:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8002eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f04:	460b      	mov	r3, r1
 8002f06:	18db      	adds	r3, r3, r3
 8002f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f1a:	f7fd f9d1 	bl	80002c0 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	4b3b      	ldr	r3, [pc, #236]	@ (8003014 <UART_SetConfig+0x2d4>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2264      	movs	r2, #100	@ 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	1acb      	subs	r3, r1, r3
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f3a:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <UART_SetConfig+0x2d4>)
 8002f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f48:	441c      	add	r4, r3
 8002f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1891      	adds	r1, r2, r2
 8002f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f64:	415b      	adcs	r3, r3
 8002f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	1851      	adds	r1, r2, r1
 8002f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f72:	4649      	mov	r1, r9
 8002f74:	414b      	adcs	r3, r1
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f84:	4659      	mov	r1, fp
 8002f86:	00cb      	lsls	r3, r1, #3
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8e:	4651      	mov	r1, sl
 8002f90:	00ca      	lsls	r2, r1, #3
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	4642      	mov	r2, r8
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	eb42 0303 	adc.w	r3, r2, r3
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	18db      	adds	r3, r3, r3
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fd6:	f7fd f973 	bl	80002c0 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <UART_SetConfig+0x2d4>)
 8002fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	2164      	movs	r1, #100	@ 0x64
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3332      	adds	r3, #50	@ 0x32
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <UART_SetConfig+0x2d4>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4422      	add	r2, r4
 8003006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003008:	e106      	b.n	8003218 <UART_SetConfig+0x4d8>
 800300a:	bf00      	nop
 800300c:	40011000 	.word	0x40011000
 8003010:	40011400 	.word	0x40011400
 8003014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	1891      	adds	r1, r2, r2
 8003030:	6239      	str	r1, [r7, #32]
 8003032:	415b      	adcs	r3, r3
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
 8003036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800303a:	4641      	mov	r1, r8
 800303c:	1854      	adds	r4, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb43 0501 	adc.w	r5, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	00eb      	lsls	r3, r5, #3
 800304e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003052:	00e2      	lsls	r2, r4, #3
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	4643      	mov	r3, r8
 800305a:	18e3      	adds	r3, r4, r3
 800305c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003060:	464b      	mov	r3, r9
 8003062:	eb45 0303 	adc.w	r3, r5, r3
 8003066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003086:	4629      	mov	r1, r5
 8003088:	008b      	lsls	r3, r1, #2
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003090:	4621      	mov	r1, r4
 8003092:	008a      	lsls	r2, r1, #2
 8003094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003098:	f7fd f912 	bl	80002c0 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4b60      	ldr	r3, [pc, #384]	@ (8003224 <UART_SetConfig+0x4e4>)
 80030a2:	fba3 2302 	umull	r2, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	011c      	lsls	r4, r3, #4
 80030aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	61b9      	str	r1, [r7, #24]
 80030c4:	415b      	adcs	r3, r3
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6139      	str	r1, [r7, #16]
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003100:	464b      	mov	r3, r9
 8003102:	460a      	mov	r2, r1
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003124:	4649      	mov	r1, r9
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	4641      	mov	r1, r8
 800312a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312e:	4641      	mov	r1, r8
 8003130:	008a      	lsls	r2, r1, #2
 8003132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003136:	f7fd f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4611      	mov	r1, r2
 8003140:	4b38      	ldr	r3, [pc, #224]	@ (8003224 <UART_SetConfig+0x4e4>)
 8003142:	fba3 2301 	umull	r2, r3, r3, r1
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2264      	movs	r2, #100	@ 0x64
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	1acb      	subs	r3, r1, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	@ 0x32
 8003154:	4a33      	ldr	r2, [pc, #204]	@ (8003224 <UART_SetConfig+0x4e4>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003160:	441c      	add	r4, r3
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	673b      	str	r3, [r7, #112]	@ 0x70
 800316a:	677a      	str	r2, [r7, #116]	@ 0x74
 800316c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	1891      	adds	r1, r2, r2
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	415b      	adcs	r3, r3
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003180:	4641      	mov	r1, r8
 8003182:	1851      	adds	r1, r2, r1
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	4649      	mov	r1, r9
 8003188:	414b      	adcs	r3, r1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003198:	4659      	mov	r1, fp
 800319a:	00cb      	lsls	r3, r1, #3
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a2:	4651      	mov	r1, sl
 80031a4:	00ca      	lsls	r2, r1, #3
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	4642      	mov	r2, r8
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031b2:	464b      	mov	r3, r9
 80031b4:	460a      	mov	r2, r1
 80031b6:	eb42 0303 	adc.w	r3, r2, r3
 80031ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031d4:	4649      	mov	r1, r9
 80031d6:	008b      	lsls	r3, r1, #2
 80031d8:	4641      	mov	r1, r8
 80031da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031de:	4641      	mov	r1, r8
 80031e0:	008a      	lsls	r2, r1, #2
 80031e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031e6:	f7fd f86b 	bl	80002c0 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <UART_SetConfig+0x4e4>)
 80031f0:	fba3 1302 	umull	r1, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2164      	movs	r1, #100	@ 0x64
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	3332      	adds	r3, #50	@ 0x32
 8003202:	4a08      	ldr	r2, [pc, #32]	@ (8003224 <UART_SetConfig+0x4e4>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4422      	add	r2, r4
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800322c:	4904      	ldr	r1, [pc, #16]	@ (8003240 <MX_FATFS_Init+0x18>)
 800322e:	4805      	ldr	r0, [pc, #20]	@ (8003244 <MX_FATFS_Init+0x1c>)
 8003230:	f003 fcfc 	bl	8006c2c <FATFS_LinkDriver>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <MX_FATFS_Init+0x20>)
 800323a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000029c 	.word	0x2000029c
 8003244:	2000000c 	.word	0x2000000c
 8003248:	20000298 	.word	0x20000298

0800324c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003250:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f9fd 	bl	8003668 <SD_disk_initialize>
 800326e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fad5 	bl	8003834 <SD_disk_status>
 800328a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80032a4:	7bf8      	ldrb	r0, [r7, #15]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	f000 fad8 	bl	8003860 <SD_disk_read>
 80032b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80032ca:	7bf8      	ldrb	r0, [r7, #15]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	f000 fb2f 	bl	8003934 <SD_disk_write>
 80032d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	603a      	str	r2, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
 80032ec:	460b      	mov	r3, r1
 80032ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80032f0:	79b9      	ldrb	r1, [r7, #6]
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fba0 	bl	8003a3c <SD_disk_ioctl>
 80032fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	4802      	ldr	r0, [pc, #8]	@ (800331c <SELECT+0x14>)
 8003312:	f7fe f923 	bl	800155c <HAL_GPIO_WritePin>
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40020000 	.word	0x40020000

08003320 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003324:	2201      	movs	r2, #1
 8003326:	2101      	movs	r1, #1
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <DESELECT+0x14>)
 800332a:	f7fe f917 	bl	800155c <HAL_GPIO_WritePin>
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40020000 	.word	0x40020000

08003338 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003342:	bf00      	nop
 8003344:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <SPI_TxByte+0x30>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d1f8      	bne.n	8003344 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003352:	1df9      	adds	r1, r7, #7
 8003354:	2364      	movs	r3, #100	@ 0x64
 8003356:	2201      	movs	r2, #1
 8003358:	4803      	ldr	r0, [pc, #12]	@ (8003368 <SPI_TxByte+0x30>)
 800335a:	f7fe ff8a 	bl	8002272 <HAL_SPI_Transmit>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200000f4 	.word	0x200000f4

0800336c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003378:	bf00      	nop
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <SPI_TxBuffer+0x30>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d1f8      	bne.n	800337a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	2364      	movs	r3, #100	@ 0x64
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4803      	ldr	r0, [pc, #12]	@ (800339c <SPI_TxBuffer+0x30>)
 8003390:	f7fe ff6f 	bl	8002272 <HAL_SPI_Transmit>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200000f4 	.word	0x200000f4

080033a0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80033a6:	23ff      	movs	r3, #255	@ 0xff
 80033a8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80033aa:	bf00      	nop
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <SPI_RxByte+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d1f8      	bne.n	80033ac <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80033ba:	1dba      	adds	r2, r7, #6
 80033bc:	1df9      	adds	r1, r7, #7
 80033be:	2364      	movs	r3, #100	@ 0x64
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4803      	ldr	r0, [pc, #12]	@ (80033d4 <SPI_RxByte+0x34>)
 80033c6:	f7ff f897 	bl	80024f8 <HAL_SPI_TransmitReceive>
  return data;
 80033ca:	79bb      	ldrb	r3, [r7, #6]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200000f4 	.word	0x200000f4

080033d8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80033e0:	f7ff ffde 	bl	80033a0 <SPI_RxByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	701a      	strb	r2, [r3, #0]
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <SD_ReadyWait+0x30>)
 80033fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003400:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003402:	f7ff ffcd 	bl	80033a0 <SPI_RxByte>
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2bff      	cmp	r3, #255	@ 0xff
 800340e:	d003      	beq.n	8003418 <SD_ReadyWait+0x24>
 8003410:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <SD_ReadyWait+0x30>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f4      	bne.n	8003402 <SD_ReadyWait+0xe>
  return res;
 8003418:	79fb      	ldrb	r3, [r7, #7]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200002a2 	.word	0x200002a2

08003428 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800342e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003432:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8003434:	f7ff ff74 	bl	8003320 <DESELECT>
  for(int i = 0; i < 10; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	e005      	b.n	800344a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800343e:	20ff      	movs	r0, #255	@ 0xff
 8003440:	f7ff ff7a 	bl	8003338 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3301      	adds	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b09      	cmp	r3, #9
 800344e:	ddf6      	ble.n	800343e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8003450:	f7ff ff5a 	bl	8003308 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8003454:	2340      	movs	r3, #64	@ 0x40
 8003456:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8003468:	2395      	movs	r3, #149	@ 0x95
 800346a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800346c:	463b      	mov	r3, r7
 800346e:	2106      	movs	r1, #6
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff7b 	bl	800336c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8003476:	e002      	b.n	800347e <SD_PowerOn+0x56>
  {
    cnt--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800347e:	f7ff ff8f 	bl	80033a0 <SPI_RxByte>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d002      	beq.n	800348e <SD_PowerOn+0x66>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f4      	bne.n	8003478 <SD_PowerOn+0x50>
  }
  DESELECT();
 800348e:	f7ff ff47 	bl	8003320 <DESELECT>
  SPI_TxByte(0XFF);
 8003492:	20ff      	movs	r0, #255	@ 0xff
 8003494:	f7ff ff50 	bl	8003338 <SPI_TxByte>
  PowerFlag = 1;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <SD_PowerOn+0x80>)
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200002a5 	.word	0x200002a5

080034ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80034b0:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <SD_PowerOff+0x14>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	200002a5 	.word	0x200002a5

080034c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <SD_CheckPower+0x14>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200002a5 	.word	0x200002a5

080034dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80034e6:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <SD_RxDataBlock+0x58>)
 80034e8:	22c8      	movs	r2, #200	@ 0xc8
 80034ea:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80034ec:	f7ff ff58 	bl	80033a0 <SPI_RxByte>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2bff      	cmp	r3, #255	@ 0xff
 80034f8:	d103      	bne.n	8003502 <SD_RxDataBlock+0x26>
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <SD_RxDataBlock+0x58>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f4      	bne.n	80034ec <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2bfe      	cmp	r3, #254	@ 0xfe
 8003506:	d001      	beq.n	800350c <SD_RxDataBlock+0x30>
 8003508:	2300      	movs	r3, #0
 800350a:	e00f      	b.n	800352c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff60 	bl	80033d8 <SPI_RxBytePtr>
  } while(len--);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	603a      	str	r2, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f4      	bne.n	800350c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8003522:	f7ff ff3d 	bl	80033a0 <SPI_RxByte>
  SPI_RxByte();
 8003526:	f7ff ff3b 	bl	80033a0 <SPI_RxByte>
  return TRUE;
 800352a:	2301      	movs	r3, #1
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200002a0 	.word	0x200002a0

08003538 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8003548:	f7ff ff54 	bl	80033f4 <SD_ReadyWait>
 800354c:	4603      	mov	r3, r0
 800354e:	2bff      	cmp	r3, #255	@ 0xff
 8003550:	d001      	beq.n	8003556 <SD_TxDataBlock+0x1e>
 8003552:	2300      	movs	r3, #0
 8003554:	e02f      	b.n	80035b6 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff feed 	bl	8003338 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2bfd      	cmp	r3, #253	@ 0xfd
 8003562:	d020      	beq.n	80035a6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8003564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff feff 	bl	800336c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800356e:	f7ff ff17 	bl	80033a0 <SPI_RxByte>
    SPI_RxByte();
 8003572:	f7ff ff15 	bl	80033a0 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8003576:	e00b      	b.n	8003590 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8003578:	f7ff ff12 	bl	80033a0 <SPI_RxByte>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2b05      	cmp	r3, #5
 8003588:	d006      	beq.n	8003598 <SD_TxDataBlock+0x60>
      i++;
 800358a:	7bbb      	ldrb	r3, [r7, #14]
 800358c:	3301      	adds	r3, #1
 800358e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8003590:	7bbb      	ldrb	r3, [r7, #14]
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d9f0      	bls.n	8003578 <SD_TxDataBlock+0x40>
 8003596:	e000      	b.n	800359a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8003598:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800359a:	bf00      	nop
 800359c:	f7ff ff00 	bl	80033a0 <SPI_RxByte>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0fa      	beq.n	800359c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d101      	bne.n	80035b4 <SD_TxDataBlock+0x7c>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	6039      	str	r1, [r7, #0]
 80035c8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80035ca:	f7ff ff13 	bl	80033f4 <SD_ReadyWait>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2bff      	cmp	r3, #255	@ 0xff
 80035d2:	d001      	beq.n	80035d8 <SD_SendCmd+0x1a>
 80035d4:	23ff      	movs	r3, #255	@ 0xff
 80035d6:	e042      	b.n	800365e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff feac 	bl	8003338 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	0e1b      	lsrs	r3, r3, #24
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fea6 	bl	8003338 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fea0 	bl	8003338 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fe9a 	bl	8003338 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fe95 	bl	8003338 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d102      	bne.n	800361a <SD_SendCmd+0x5c>
 8003614:	2395      	movs	r3, #149	@ 0x95
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e007      	b.n	800362a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b48      	cmp	r3, #72	@ 0x48
 800361e:	d102      	bne.n	8003626 <SD_SendCmd+0x68>
 8003620:	2387      	movs	r3, #135	@ 0x87
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e001      	b.n	800362a <SD_SendCmd+0x6c>
  else crc = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe83 	bl	8003338 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b4c      	cmp	r3, #76	@ 0x4c
 8003636:	d101      	bne.n	800363c <SD_SendCmd+0x7e>
 8003638:	f7ff feb2 	bl	80033a0 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800363c:	230a      	movs	r3, #10
 800363e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8003640:	f7ff feae 	bl	80033a0 <SPI_RxByte>
 8003644:	4603      	mov	r3, r0
 8003646:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003648:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da05      	bge.n	800365c <SD_SendCmd+0x9e>
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	3b01      	subs	r3, #1
 8003654:	73bb      	strb	r3, [r7, #14]
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f1      	bne.n	8003640 <SD_SendCmd+0x82>

  return res;
 800365c:	7b7b      	ldrb	r3, [r7, #13]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <SD_disk_initialize+0x14>
 8003678:	2301      	movs	r3, #1
 800367a:	e0d1      	b.n	8003820 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800367c:	4b6a      	ldr	r3, [pc, #424]	@ (8003828 <SD_disk_initialize+0x1c0>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <SD_disk_initialize+0x2a>
 800368a:	4b67      	ldr	r3, [pc, #412]	@ (8003828 <SD_disk_initialize+0x1c0>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e0c6      	b.n	8003820 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8003692:	f7ff fec9 	bl	8003428 <SD_PowerOn>
  /* slave select */
  SELECT();
 8003696:	f7ff fe37 	bl	8003308 <SELECT>
  /* check disk type */
  type = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800369e:	2100      	movs	r1, #0
 80036a0:	2040      	movs	r0, #64	@ 0x40
 80036a2:	f7ff ff8c 	bl	80035be <SD_SendCmd>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 80a1 	bne.w	80037f0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80036ae:	4b5f      	ldr	r3, [pc, #380]	@ (800382c <SD_disk_initialize+0x1c4>)
 80036b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036b4:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80036b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80036ba:	2048      	movs	r0, #72	@ 0x48
 80036bc:	f7ff ff7f 	bl	80035be <SD_SendCmd>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d155      	bne.n	8003772 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e00c      	b.n	80036e6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80036cc:	7bfc      	ldrb	r4, [r7, #15]
 80036ce:	f7ff fe67 	bl	80033a0 <SPI_RxByte>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	f104 0310 	add.w	r3, r4, #16
 80036da:	443b      	add	r3, r7
 80036dc:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	3301      	adds	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d9ef      	bls.n	80036cc <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80036ec:	7abb      	ldrb	r3, [r7, #10]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d17e      	bne.n	80037f0 <SD_disk_initialize+0x188>
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	2baa      	cmp	r3, #170	@ 0xaa
 80036f6:	d17b      	bne.n	80037f0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80036f8:	2100      	movs	r1, #0
 80036fa:	2077      	movs	r0, #119	@ 0x77
 80036fc:	f7ff ff5f 	bl	80035be <SD_SendCmd>
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d807      	bhi.n	8003716 <SD_disk_initialize+0xae>
 8003706:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800370a:	2069      	movs	r0, #105	@ 0x69
 800370c:	f7ff ff57 	bl	80035be <SD_SendCmd>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8003716:	4b45      	ldr	r3, [pc, #276]	@ (800382c <SD_disk_initialize+0x1c4>)
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1ec      	bne.n	80036f8 <SD_disk_initialize+0x90>
 800371e:	e000      	b.n	8003722 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003720:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003722:	4b42      	ldr	r3, [pc, #264]	@ (800382c <SD_disk_initialize+0x1c4>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d062      	beq.n	80037f0 <SD_disk_initialize+0x188>
 800372a:	2100      	movs	r1, #0
 800372c:	207a      	movs	r0, #122	@ 0x7a
 800372e:	f7ff ff46 	bl	80035be <SD_SendCmd>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d15b      	bne.n	80037f0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e00c      	b.n	8003758 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800373e:	7bfc      	ldrb	r4, [r7, #15]
 8003740:	f7ff fe2e 	bl	80033a0 <SPI_RxByte>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	f104 0310 	add.w	r3, r4, #16
 800374c:	443b      	add	r3, r7
 800374e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3301      	adds	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d9ef      	bls.n	800373e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800375e:	7a3b      	ldrb	r3, [r7, #8]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <SD_disk_initialize+0x104>
 8003768:	230c      	movs	r3, #12
 800376a:	e000      	b.n	800376e <SD_disk_initialize+0x106>
 800376c:	2304      	movs	r3, #4
 800376e:	73bb      	strb	r3, [r7, #14]
 8003770:	e03e      	b.n	80037f0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003772:	2100      	movs	r1, #0
 8003774:	2077      	movs	r0, #119	@ 0x77
 8003776:	f7ff ff22 	bl	80035be <SD_SendCmd>
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d808      	bhi.n	8003792 <SD_disk_initialize+0x12a>
 8003780:	2100      	movs	r1, #0
 8003782:	2069      	movs	r0, #105	@ 0x69
 8003784:	f7ff ff1b 	bl	80035be <SD_SendCmd>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d801      	bhi.n	8003792 <SD_disk_initialize+0x12a>
 800378e:	2302      	movs	r3, #2
 8003790:	e000      	b.n	8003794 <SD_disk_initialize+0x12c>
 8003792:	2301      	movs	r3, #1
 8003794:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8003796:	7bbb      	ldrb	r3, [r7, #14]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d10e      	bne.n	80037ba <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800379c:	2100      	movs	r1, #0
 800379e:	2077      	movs	r0, #119	@ 0x77
 80037a0:	f7ff ff0d 	bl	80035be <SD_SendCmd>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d80e      	bhi.n	80037c8 <SD_disk_initialize+0x160>
 80037aa:	2100      	movs	r1, #0
 80037ac:	2069      	movs	r0, #105	@ 0x69
 80037ae:	f7ff ff06 	bl	80035be <SD_SendCmd>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <SD_disk_initialize+0x160>
 80037b8:	e00c      	b.n	80037d4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80037ba:	2100      	movs	r1, #0
 80037bc:	2041      	movs	r0, #65	@ 0x41
 80037be:	f7ff fefe 	bl	80035be <SD_SendCmd>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <SD_disk_initialize+0x1c4>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e2      	bne.n	8003796 <SD_disk_initialize+0x12e>
 80037d0:	e000      	b.n	80037d4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80037d2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80037d4:	4b15      	ldr	r3, [pc, #84]	@ (800382c <SD_disk_initialize+0x1c4>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <SD_disk_initialize+0x184>
 80037dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037e0:	2050      	movs	r0, #80	@ 0x50
 80037e2:	f7ff feec 	bl	80035be <SD_SendCmd>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <SD_disk_initialize+0x188>
 80037ec:	2300      	movs	r3, #0
 80037ee:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80037f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003830 <SD_disk_initialize+0x1c8>)
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80037f6:	f7ff fd93 	bl	8003320 <DESELECT>
  SPI_RxByte();
 80037fa:	f7ff fdd1 	bl	80033a0 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <SD_disk_initialize+0x1c0>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	b2da      	uxtb	r2, r3
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <SD_disk_initialize+0x1c0>)
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e001      	b.n	800381a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003816:	f7ff fe49 	bl	80034ac <SD_PowerOff>
  }
  return Stat;
 800381a:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <SD_disk_initialize+0x1c0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	20000020 	.word	0x20000020
 800382c:	200002a0 	.word	0x200002a0
 8003830:	200002a4 	.word	0x200002a4

08003834 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <SD_disk_status+0x14>
 8003844:	2301      	movs	r3, #1
 8003846:	e002      	b.n	800384e <SD_disk_status+0x1a>
  return Stat;
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <SD_disk_status+0x28>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000020 	.word	0x20000020

08003860 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <SD_disk_read+0x1c>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <SD_disk_read+0x20>
 800387c:	2304      	movs	r3, #4
 800387e:	e051      	b.n	8003924 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003880:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <SD_disk_read+0xcc>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <SD_disk_read+0x32>
 800388e:	2303      	movs	r3, #3
 8003890:	e048      	b.n	8003924 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <SD_disk_read+0xd0>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <SD_disk_read+0x44>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	607b      	str	r3, [r7, #4]

  SELECT();
 80038a4:	f7ff fd30 	bl	8003308 <SELECT>

  if (count == 1)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d111      	bne.n	80038d2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	2051      	movs	r0, #81	@ 0x51
 80038b2:	f7ff fe84 	bl	80035be <SD_SendCmd>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d129      	bne.n	8003910 <SD_disk_read+0xb0>
 80038bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038c0:	68b8      	ldr	r0, [r7, #8]
 80038c2:	f7ff fe0b 	bl	80034dc <SD_RxDataBlock>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d021      	beq.n	8003910 <SD_disk_read+0xb0>
 80038cc:	2300      	movs	r3, #0
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	e01e      	b.n	8003910 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	2052      	movs	r0, #82	@ 0x52
 80038d6:	f7ff fe72 	bl	80035be <SD_SendCmd>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d117      	bne.n	8003910 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80038e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038e4:	68b8      	ldr	r0, [r7, #8]
 80038e6:	f7ff fdf9 	bl	80034dc <SD_RxDataBlock>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <SD_disk_read+0xa6>
        buff += 512;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80038f6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ed      	bne.n	80038e0 <SD_disk_read+0x80>
 8003904:	e000      	b.n	8003908 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003906:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003908:	2100      	movs	r1, #0
 800390a:	204c      	movs	r0, #76	@ 0x4c
 800390c:	f7ff fe57 	bl	80035be <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003910:	f7ff fd06 	bl	8003320 <DESELECT>
  SPI_RxByte();
 8003914:	f7ff fd44 	bl	80033a0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000020 	.word	0x20000020
 8003930:	200002a4 	.word	0x200002a4

08003934 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <SD_disk_write+0x1c>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <SD_disk_write+0x20>
 8003950:	2304      	movs	r3, #4
 8003952:	e06b      	b.n	8003a2c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003954:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <SD_disk_write+0x100>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <SD_disk_write+0x32>
 8003962:	2303      	movs	r3, #3
 8003964:	e062      	b.n	8003a2c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003966:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <SD_disk_write+0x100>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <SD_disk_write+0x44>
 8003974:	2302      	movs	r3, #2
 8003976:	e059      	b.n	8003a2c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003978:	4b2f      	ldr	r3, [pc, #188]	@ (8003a38 <SD_disk_write+0x104>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <SD_disk_write+0x56>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	607b      	str	r3, [r7, #4]

  SELECT();
 800398a:	f7ff fcbd 	bl	8003308 <SELECT>

  if (count == 1)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	2058      	movs	r0, #88	@ 0x58
 8003998:	f7ff fe11 	bl	80035be <SD_SendCmd>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d13a      	bne.n	8003a18 <SD_disk_write+0xe4>
 80039a2:	21fe      	movs	r1, #254	@ 0xfe
 80039a4:	68b8      	ldr	r0, [r7, #8]
 80039a6:	f7ff fdc7 	bl	8003538 <SD_TxDataBlock>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d033      	beq.n	8003a18 <SD_disk_write+0xe4>
      count = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	e030      	b.n	8003a18 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <SD_disk_write+0x104>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80039c2:	2100      	movs	r1, #0
 80039c4:	2077      	movs	r0, #119	@ 0x77
 80039c6:	f7ff fdfa 	bl	80035be <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80039ca:	6839      	ldr	r1, [r7, #0]
 80039cc:	2057      	movs	r0, #87	@ 0x57
 80039ce:	f7ff fdf6 	bl	80035be <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	2059      	movs	r0, #89	@ 0x59
 80039d6:	f7ff fdf2 	bl	80035be <SD_SendCmd>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11b      	bne.n	8003a18 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80039e0:	21fc      	movs	r1, #252	@ 0xfc
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f7ff fda8 	bl	8003538 <SD_TxDataBlock>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <SD_disk_write+0xd0>
        buff += 512;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80039f4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ee      	bne.n	80039e0 <SD_disk_write+0xac>
 8003a02:	e000      	b.n	8003a06 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003a04:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003a06:	21fd      	movs	r1, #253	@ 0xfd
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f7ff fd95 	bl	8003538 <SD_TxDataBlock>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <SD_disk_write+0xe4>
      {
        count = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8003a18:	f7ff fc82 	bl	8003320 <DESELECT>
  SPI_RxByte();
 8003a1c:	f7ff fcc0 	bl	80033a0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000020 	.word	0x20000020
 8003a38:	200002a4 	.word	0x200002a4

08003a3c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b08b      	sub	sp, #44	@ 0x2c
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	603a      	str	r2, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SD_disk_ioctl+0x1e>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e113      	b.n	8003c82 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003a60:	79bb      	ldrb	r3, [r7, #6]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d124      	bne.n	8003ab0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d012      	beq.n	8003a94 <SD_disk_ioctl+0x58>
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	dc1a      	bgt.n	8003aa8 <SD_disk_ioctl+0x6c>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <SD_disk_ioctl+0x40>
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d006      	beq.n	8003a88 <SD_disk_ioctl+0x4c>
 8003a7a:	e015      	b.n	8003aa8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003a7c:	f7ff fd16 	bl	80034ac <SD_PowerOff>
      res = RES_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003a86:	e0fa      	b.n	8003c7e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8003a88:	f7ff fcce 	bl	8003428 <SD_PowerOn>
      res = RES_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003a92:	e0f4      	b.n	8003c7e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	1c5c      	adds	r4, r3, #1
 8003a98:	f7ff fd14 	bl	80034c4 <SD_CheckPower>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003aa6:	e0ea      	b.n	8003c7e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003aae:	e0e6      	b.n	8003c7e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003ab0:	4b76      	ldr	r3, [pc, #472]	@ (8003c8c <SD_disk_ioctl+0x250>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0df      	b.n	8003c82 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003ac2:	f7ff fc21 	bl	8003308 <SELECT>
    switch (ctrl)
 8003ac6:	79bb      	ldrb	r3, [r7, #6]
 8003ac8:	2b0d      	cmp	r3, #13
 8003aca:	f200 80c9 	bhi.w	8003c60 <SD_disk_ioctl+0x224>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <SD_disk_ioctl+0x98>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003bcb 	.word	0x08003bcb
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003bbb 	.word	0x08003bbb
 8003ae0:	08003c61 	.word	0x08003c61
 8003ae4:	08003c61 	.word	0x08003c61
 8003ae8:	08003c61 	.word	0x08003c61
 8003aec:	08003c61 	.word	0x08003c61
 8003af0:	08003c61 	.word	0x08003c61
 8003af4:	08003c61 	.word	0x08003c61
 8003af8:	08003c61 	.word	0x08003c61
 8003afc:	08003c61 	.word	0x08003c61
 8003b00:	08003bdd 	.word	0x08003bdd
 8003b04:	08003c01 	.word	0x08003c01
 8003b08:	08003c25 	.word	0x08003c25
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2049      	movs	r0, #73	@ 0x49
 8003b10:	f7ff fd55 	bl	80035be <SD_SendCmd>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 80a6 	bne.w	8003c68 <SD_disk_ioctl+0x22c>
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	2110      	movs	r1, #16
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fcda 	bl	80034dc <SD_RxDataBlock>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 809c 	beq.w	8003c68 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8003b30:	7b3b      	ldrb	r3, [r7, #12]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003b3a:	7d7b      	ldrb	r3, [r7, #21]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	7d3b      	ldrb	r3, [r7, #20]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003b4c:	8bfb      	ldrh	r3, [r7, #30]
 8003b4e:	029a      	lsls	r2, r3, #10
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e02d      	b.n	8003bb2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003b56:	7c7b      	ldrb	r3, [r7, #17]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	7dbb      	ldrb	r3, [r7, #22]
 8003b60:	09db      	lsrs	r3, r3, #7
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	7d7b      	ldrb	r3, [r7, #21]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0306 	and.w	r3, r3, #6
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003b7e:	7d3b      	ldrb	r3, [r7, #20]
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	7cbb      	ldrb	r3, [r7, #18]
 8003b92:	029b      	lsls	r3, r3, #10
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003ba4:	8bfa      	ldrh	r2, [r7, #30]
 8003ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003baa:	3b09      	subs	r3, #9
 8003bac:	409a      	lsls	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003bb8:	e056      	b.n	8003c68 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003bc8:	e055      	b.n	8003c76 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003bca:	f7ff fc13 	bl	80033f4 <SD_ReadyWait>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2bff      	cmp	r3, #255	@ 0xff
 8003bd2:	d14b      	bne.n	8003c6c <SD_disk_ioctl+0x230>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003bda:	e047      	b.n	8003c6c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2049      	movs	r0, #73	@ 0x49
 8003be0:	f7ff fced 	bl	80035be <SD_SendCmd>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d142      	bne.n	8003c70 <SD_disk_ioctl+0x234>
 8003bea:	2110      	movs	r1, #16
 8003bec:	6a38      	ldr	r0, [r7, #32]
 8003bee:	f7ff fc75 	bl	80034dc <SD_RxDataBlock>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d03b      	beq.n	8003c70 <SD_disk_ioctl+0x234>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003bfe:	e037      	b.n	8003c70 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003c00:	2100      	movs	r1, #0
 8003c02:	204a      	movs	r0, #74	@ 0x4a
 8003c04:	f7ff fcdb 	bl	80035be <SD_SendCmd>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d132      	bne.n	8003c74 <SD_disk_ioctl+0x238>
 8003c0e:	2110      	movs	r1, #16
 8003c10:	6a38      	ldr	r0, [r7, #32]
 8003c12:	f7ff fc63 	bl	80034dc <SD_RxDataBlock>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02b      	beq.n	8003c74 <SD_disk_ioctl+0x238>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c22:	e027      	b.n	8003c74 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003c24:	2100      	movs	r1, #0
 8003c26:	207a      	movs	r0, #122	@ 0x7a
 8003c28:	f7ff fcc9 	bl	80035be <SD_SendCmd>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c38:	e00b      	b.n	8003c52 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8003c3a:	6a3c      	ldr	r4, [r7, #32]
 8003c3c:	1c63      	adds	r3, r4, #1
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	f7ff fbae 	bl	80033a0 <SPI_RxByte>
 8003c44:	4603      	mov	r3, r0
 8003c46:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003c48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d9ef      	bls.n	8003c3a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c66:	e006      	b.n	8003c76 <SD_disk_ioctl+0x23a>
      break;
 8003c68:	bf00      	nop
 8003c6a:	e004      	b.n	8003c76 <SD_disk_ioctl+0x23a>
      break;
 8003c6c:	bf00      	nop
 8003c6e:	e002      	b.n	8003c76 <SD_disk_ioctl+0x23a>
      break;
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <SD_disk_ioctl+0x23a>
      break;
 8003c74:	bf00      	nop
    }
    DESELECT();
 8003c76:	f7ff fb53 	bl	8003320 <DESELECT>
    SPI_RxByte();
 8003c7a:	f7ff fb91 	bl	80033a0 <SPI_RxByte>
  }
  return res;
 8003c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	372c      	adds	r7, #44	@ 0x2c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000020 	.word	0x20000020

08003c90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	4a08      	ldr	r2, [pc, #32]	@ (8003cc0 <disk_status+0x30>)
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	79fa      	ldrb	r2, [r7, #7]
 8003ca8:	4905      	ldr	r1, [pc, #20]	@ (8003cc0 <disk_status+0x30>)
 8003caa:	440a      	add	r2, r1
 8003cac:	7a12      	ldrb	r2, [r2, #8]
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4798      	blx	r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200004d0 	.word	0x200004d0

08003cc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003d10 <disk_initialize+0x4c>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d114      	bne.n	8003d06 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	4a0c      	ldr	r2, [pc, #48]	@ (8003d10 <disk_initialize+0x4c>)
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	79fa      	ldrb	r2, [r7, #7]
 8003cea:	4909      	ldr	r1, [pc, #36]	@ (8003d10 <disk_initialize+0x4c>)
 8003cec:	440a      	add	r2, r1
 8003cee:	7a12      	ldrb	r2, [r2, #8]
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	4a03      	ldr	r2, [pc, #12]	@ (8003d10 <disk_initialize+0x4c>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200004d0 	.word	0x200004d0

08003d14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <disk_read+0x3c>)
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	689c      	ldr	r4, [r3, #8]
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <disk_read+0x3c>)
 8003d34:	4413      	add	r3, r2
 8003d36:	7a18      	ldrb	r0, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	47a0      	blx	r4
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200004d0 	.word	0x200004d0

08003d54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <disk_write+0x3c>)
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68dc      	ldr	r4, [r3, #12]
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <disk_write+0x3c>)
 8003d74:	4413      	add	r3, r2
 8003d76:	7a18      	ldrb	r0, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	47a0      	blx	r4
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200004d0 	.word	0x200004d0

08003d94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	603a      	str	r2, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
 8003da0:	460b      	mov	r3, r1
 8003da2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	4a09      	ldr	r2, [pc, #36]	@ (8003dcc <disk_ioctl+0x38>)
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	79fa      	ldrb	r2, [r7, #7]
 8003db2:	4906      	ldr	r1, [pc, #24]	@ (8003dcc <disk_ioctl+0x38>)
 8003db4:	440a      	add	r2, r1
 8003db6:	7a10      	ldrb	r0, [r2, #8]
 8003db8:	79b9      	ldrb	r1, [r7, #6]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4798      	blx	r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  return res;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200004d0 	.word	0x200004d0

08003dd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003de0:	89fb      	ldrh	r3, [r7, #14]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b21b      	sxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003df2:	89fb      	ldrh	r3, [r7, #14]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	3202      	adds	r2, #2
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	3201      	adds	r2, #1
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
	return rv;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	887a      	ldrh	r2, [r7, #2]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	1c53      	adds	r3, r2, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	6179      	str	r1, [r7, #20]
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f1      	bne.n	8003eee <mem_cpy+0x1a>
	}
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003f16:	b480      	push	{r7}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	617a      	str	r2, [r7, #20]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f3      	bne.n	8003f26 <mem_set+0x10>
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	@ 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	61fa      	str	r2, [r7, #28]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	61ba      	str	r2, [r7, #24]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	1acb      	subs	r3, r1, r3
 8003f78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <mem_cmp+0x40>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0eb      	beq.n	8003f64 <mem_cmp+0x18>

	return r;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3724      	adds	r7, #36	@ 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003fa4:	e002      	b.n	8003fac <chk_chr+0x12>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <chk_chr+0x26>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d1f2      	bne.n	8003fa6 <chk_chr+0xc>
	return *str;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e029      	b.n	8004038 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003fe4:	4a27      	ldr	r2, [pc, #156]	@ (8004084 <chk_lock+0xb4>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ff2:	4a24      	ldr	r2, [pc, #144]	@ (8004084 <chk_lock+0xb4>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	4413      	add	r3, r2
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d116      	bne.n	8004032 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004004:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <chk_lock+0xb4>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	3304      	adds	r3, #4
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004014:	429a      	cmp	r2, r3
 8004016:	d10c      	bne.n	8004032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004018:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <chk_lock+0xb4>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4413      	add	r3, r2
 8004020:	3308      	adds	r3, #8
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004028:	429a      	cmp	r2, r3
 800402a:	d102      	bne.n	8004032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800402c:	e007      	b.n	800403e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3301      	adds	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d9d2      	bls.n	8003fe4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d109      	bne.n	8004058 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <chk_lock+0x80>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d101      	bne.n	8004054 <chk_lock+0x84>
 8004050:	2300      	movs	r3, #0
 8004052:	e010      	b.n	8004076 <chk_lock+0xa6>
 8004054:	2312      	movs	r3, #18
 8004056:	e00e      	b.n	8004076 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <chk_lock+0xa0>
 800405e:	4a09      	ldr	r2, [pc, #36]	@ (8004084 <chk_lock+0xb4>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	4413      	add	r3, r2
 8004066:	330c      	adds	r3, #12
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406e:	d101      	bne.n	8004074 <chk_lock+0xa4>
 8004070:	2310      	movs	r3, #16
 8004072:	e000      	b.n	8004076 <chk_lock+0xa6>
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200002b0 	.word	0x200002b0

08004088 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	e002      	b.n	800409a <enq_lock+0x12>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3301      	adds	r3, #1
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d806      	bhi.n	80040ae <enq_lock+0x26>
 80040a0:	4a09      	ldr	r2, [pc, #36]	@ (80040c8 <enq_lock+0x40>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	4413      	add	r3, r2
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f2      	bne.n	8004094 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	200002b0 	.word	0x200002b0

080040cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e01f      	b.n	800411c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80040dc:	4a41      	ldr	r2, [pc, #260]	@ (80041e4 <inc_lock+0x118>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	4413      	add	r3, r2
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d113      	bne.n	8004116 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80040ee:	4a3d      	ldr	r2, [pc, #244]	@ (80041e4 <inc_lock+0x118>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80040fe:	429a      	cmp	r2, r3
 8004100:	d109      	bne.n	8004116 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004102:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <inc_lock+0x118>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4413      	add	r3, r2
 800410a:	3308      	adds	r3, #8
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004112:	429a      	cmp	r2, r3
 8004114:	d006      	beq.n	8004124 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d9dc      	bls.n	80040dc <inc_lock+0x10>
 8004122:	e000      	b.n	8004126 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004124:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d132      	bne.n	8004192 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e002      	b.n	8004138 <inc_lock+0x6c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d806      	bhi.n	800414c <inc_lock+0x80>
 800413e:	4a29      	ldr	r2, [pc, #164]	@ (80041e4 <inc_lock+0x118>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f2      	bne.n	8004132 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d101      	bne.n	8004156 <inc_lock+0x8a>
 8004152:	2300      	movs	r3, #0
 8004154:	e040      	b.n	80041d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4922      	ldr	r1, [pc, #136]	@ (80041e4 <inc_lock+0x118>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	440b      	add	r3, r1
 8004162:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	491e      	ldr	r1, [pc, #120]	@ (80041e4 <inc_lock+0x118>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	440b      	add	r3, r1
 8004170:	3304      	adds	r3, #4
 8004172:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	491a      	ldr	r1, [pc, #104]	@ (80041e4 <inc_lock+0x118>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	440b      	add	r3, r1
 8004180:	3308      	adds	r3, #8
 8004182:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004184:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <inc_lock+0x118>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	330c      	adds	r3, #12
 800418e:	2200      	movs	r2, #0
 8004190:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <inc_lock+0xe0>
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <inc_lock+0x118>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4413      	add	r3, r2
 80041a0:	330c      	adds	r3, #12
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <inc_lock+0xe0>
 80041a8:	2300      	movs	r3, #0
 80041aa:	e015      	b.n	80041d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <inc_lock+0xf8>
 80041b2:	4a0c      	ldr	r2, [pc, #48]	@ (80041e4 <inc_lock+0x118>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	330c      	adds	r3, #12
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	e001      	b.n	80041c8 <inc_lock+0xfc>
 80041c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041c8:	4906      	ldr	r1, [pc, #24]	@ (80041e4 <inc_lock+0x118>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	440b      	add	r3, r1
 80041d0:	330c      	adds	r3, #12
 80041d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	200002b0 	.word	0x200002b0

080041e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d825      	bhi.n	8004248 <dec_lock+0x60>
		n = Files[i].ctr;
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <dec_lock+0x74>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	330c      	adds	r3, #12
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800420a:	89fb      	ldrh	r3, [r7, #14]
 800420c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004210:	d101      	bne.n	8004216 <dec_lock+0x2e>
 8004212:	2300      	movs	r3, #0
 8004214:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004216:	89fb      	ldrh	r3, [r7, #14]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <dec_lock+0x3a>
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	3b01      	subs	r3, #1
 8004220:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004222:	4a0e      	ldr	r2, [pc, #56]	@ (800425c <dec_lock+0x74>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	330c      	adds	r3, #12
 800422c:	89fa      	ldrh	r2, [r7, #14]
 800422e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004230:	89fb      	ldrh	r3, [r7, #14]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <dec_lock+0x5a>
 8004236:	4a09      	ldr	r2, [pc, #36]	@ (800425c <dec_lock+0x74>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4413      	add	r3, r2
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	737b      	strb	r3, [r7, #13]
 8004246:	e001      	b.n	800424c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004248:	2302      	movs	r3, #2
 800424a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800424c:	7b7b      	ldrb	r3, [r7, #13]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	200002b0 	.word	0x200002b0

08004260 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e010      	b.n	8004290 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800426e:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <clear_lock+0x44>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d105      	bne.n	800428a <clear_lock+0x2a>
 800427e:	4a09      	ldr	r2, [pc, #36]	@ (80042a4 <clear_lock+0x44>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4413      	add	r3, r2
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d9eb      	bls.n	800426e <clear_lock+0xe>
	}
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	200002b0 	.word	0x200002b0

080042a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d034      	beq.n	8004326 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7858      	ldrb	r0, [r3, #1]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80042cc:	2301      	movs	r3, #1
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	f7ff fd40 	bl	8003d54 <disk_write>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e022      	b.n	8004326 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d217      	bcs.n	8004326 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	789b      	ldrb	r3, [r3, #2]
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e010      	b.n	8004320 <sync_window+0x78>
					wsect += fs->fsize;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7858      	ldrb	r0, [r3, #1]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004312:	2301      	movs	r3, #1
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	f7ff fd1d 	bl	8003d54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3b01      	subs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d8eb      	bhi.n	80042fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d01b      	beq.n	8004380 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ffad 	bl	80042a8 <sync_window>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d113      	bne.n	8004380 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7858      	ldrb	r0, [r3, #1]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004362:	2301      	movs	r3, #1
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	f7ff fcd5 	bl	8003d14 <disk_read>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004374:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff87 	bl	80042a8 <sync_window>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d159      	bne.n	8004458 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d149      	bne.n	8004440 <sync_fs+0xb4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d145      	bne.n	8004440 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	899b      	ldrh	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	2100      	movs	r1, #0
 80043c2:	f7ff fda8 	bl	8003f16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3338      	adds	r3, #56	@ 0x38
 80043ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80043ce:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fd37 	bl	8003e46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3338      	adds	r3, #56	@ 0x38
 80043dc:	4921      	ldr	r1, [pc, #132]	@ (8004464 <sync_fs+0xd8>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fd4c 	bl	8003e7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3338      	adds	r3, #56	@ 0x38
 80043e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80043ec:	491e      	ldr	r1, [pc, #120]	@ (8004468 <sync_fs+0xdc>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd44 	bl	8003e7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3338      	adds	r3, #56	@ 0x38
 80043f8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7ff fd3a 	bl	8003e7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3338      	adds	r3, #56	@ 0x38
 800440c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7ff fd30 	bl	8003e7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7858      	ldrb	r0, [r3, #1]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004434:	2301      	movs	r3, #1
 8004436:	f7ff fc8d 	bl	8003d54 <disk_write>
			fs->fsi_flag = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2200      	movs	r2, #0
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fca3 	bl	8003d94 <disk_ioctl>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <sync_fs+0xcc>
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	41615252 	.word	0x41615252
 8004468:	61417272 	.word	0x61417272

0800446c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	3b02      	subs	r3, #2
 800447a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	3b02      	subs	r3, #2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d301      	bcc.n	800448c <clust2sect+0x20>
 8004488:	2300      	movs	r3, #0
 800448a:	e008      	b.n	800449e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	895b      	ldrh	r3, [r3, #10]
 8004490:	461a      	mov	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	fb03 f202 	mul.w	r2, r3, r2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	4413      	add	r3, r2
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d904      	bls.n	80044ca <get_fat+0x20>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80044ca:	2301      	movs	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e0ba      	b.n	8004646 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	f000 8082 	beq.w	80045e4 <get_fat+0x13a>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	f300 80a6 	bgt.w	8004632 <get_fat+0x188>
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d002      	beq.n	80044f0 <get_fat+0x46>
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d055      	beq.n	800459a <get_fat+0xf0>
 80044ee:	e0a0      	b.n	8004632 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	899b      	ldrh	r3, [r3, #12]
 8004506:	4619      	mov	r1, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	fbb3 f3f1 	udiv	r3, r3, r1
 800450e:	4413      	add	r3, r2
 8004510:	4619      	mov	r1, r3
 8004512:	6938      	ldr	r0, [r7, #16]
 8004514:	f7ff ff0c 	bl	8004330 <move_window>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 808c 	bne.w	8004638 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	60fa      	str	r2, [r7, #12]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	8992      	ldrh	r2, [r2, #12]
 800452a:	fbb3 f1f2 	udiv	r1, r3, r2
 800452e:	fb01 f202 	mul.w	r2, r1, r2
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800453c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	899b      	ldrh	r3, [r3, #12]
 8004546:	4619      	mov	r1, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	fbb3 f3f1 	udiv	r3, r3, r1
 800454e:	4413      	add	r3, r2
 8004550:	4619      	mov	r1, r3
 8004552:	6938      	ldr	r0, [r7, #16]
 8004554:	f7ff feec 	bl	8004330 <move_window>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d16e      	bne.n	800463c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	899b      	ldrh	r3, [r3, #12]
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	fbb3 f1f2 	udiv	r1, r3, r2
 800456a:	fb01 f202 	mul.w	r2, r1, r2
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <get_fat+0xe6>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	e002      	b.n	8004596 <get_fat+0xec>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004596:	617b      	str	r3, [r7, #20]
			break;
 8004598:	e055      	b.n	8004646 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	899b      	ldrh	r3, [r3, #12]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4619      	mov	r1, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ae:	4413      	add	r3, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f7ff febc 	bl	8004330 <move_window>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d140      	bne.n	8004640 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	8992      	ldrh	r2, [r2, #12]
 80045cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80045d0:	fb00 f202 	mul.w	r2, r0, r2
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	440b      	add	r3, r1
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fbf9 	bl	8003dd0 <ld_word>
 80045de:	4603      	mov	r3, r0
 80045e0:	617b      	str	r3, [r7, #20]
			break;
 80045e2:	e030      	b.n	8004646 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	899b      	ldrh	r3, [r3, #12]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80045f8:	4413      	add	r3, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	6938      	ldr	r0, [r7, #16]
 80045fe:	f7ff fe97 	bl	8004330 <move_window>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11d      	bne.n	8004644 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	8992      	ldrh	r2, [r2, #12]
 8004616:	fbb3 f0f2 	udiv	r0, r3, r2
 800461a:	fb00 f202 	mul.w	r2, r0, r2
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	440b      	add	r3, r1
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fbec 	bl	8003e00 <ld_dword>
 8004628:	4603      	mov	r3, r0
 800462a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800462e:	617b      	str	r3, [r7, #20]
			break;
 8004630:	e009      	b.n	8004646 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e006      	b.n	8004646 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004638:	bf00      	nop
 800463a:	e004      	b.n	8004646 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004644:	bf00      	nop
		}
	}

	return val;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b089      	sub	sp, #36	@ 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800465c:	2302      	movs	r3, #2
 800465e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f240 8109 	bls.w	800487a <put_fat+0x22a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	f080 8103 	bcs.w	800487a <put_fat+0x22a>
		switch (fs->fs_type) {
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b03      	cmp	r3, #3
 800467a:	f000 80b6 	beq.w	80047ea <put_fat+0x19a>
 800467e:	2b03      	cmp	r3, #3
 8004680:	f300 80fb 	bgt.w	800487a <put_fat+0x22a>
 8004684:	2b01      	cmp	r3, #1
 8004686:	d003      	beq.n	8004690 <put_fat+0x40>
 8004688:	2b02      	cmp	r3, #2
 800468a:	f000 8083 	beq.w	8004794 <put_fat+0x144>
 800468e:	e0f4      	b.n	800487a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	899b      	ldrh	r3, [r3, #12]
 80046a6:	4619      	mov	r1, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ae:	4413      	add	r3, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fe3c 	bl	8004330 <move_window>
 80046b8:	4603      	mov	r3, r0
 80046ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 80d4 	bne.w	800486c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	61ba      	str	r2, [r7, #24]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	8992      	ldrh	r2, [r2, #12]
 80046d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80046d8:	fb00 f202 	mul.w	r2, r0, r2
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	440b      	add	r3, r1
 80046e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <put_fat+0xb8>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b25b      	sxtb	r3, r3
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	b25a      	sxtb	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	b25b      	sxtb	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e001      	b.n	800470c <put_fat+0xbc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	899b      	ldrh	r3, [r3, #12]
 800471e:	4619      	mov	r1, r3
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fbb3 f3f1 	udiv	r3, r3, r1
 8004726:	4413      	add	r3, r2
 8004728:	4619      	mov	r1, r3
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff fe00 	bl	8004330 <move_window>
 8004730:	4603      	mov	r3, r0
 8004732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 809a 	bne.w	8004870 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	899b      	ldrh	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fbb3 f0f2 	udiv	r0, r3, r2
 800474e:	fb00 f202 	mul.w	r2, r0, r2
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	440b      	add	r3, r1
 8004756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <put_fat+0x11a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	e00e      	b.n	8004788 <put_fat+0x138>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	b25a      	sxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	b25b      	sxtb	r3, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	b25b      	sxtb	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	70da      	strb	r2, [r3, #3]
			break;
 8004792:	e072      	b.n	800487a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	899b      	ldrh	r3, [r3, #12]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a8:	4413      	add	r3, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fdbf 	bl	8004330 <move_window>
 80047b2:	4603      	mov	r3, r0
 80047b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d15b      	bne.n	8004874 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	8992      	ldrh	r2, [r2, #12]
 80047ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80047ce:	fb00 f202 	mul.w	r2, r0, r2
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	b292      	uxth	r2, r2
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fb32 	bl	8003e46 <st_word>
			fs->wflag = 1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	70da      	strb	r2, [r3, #3]
			break;
 80047e8:	e047      	b.n	800487a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	899b      	ldrh	r3, [r3, #12]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4619      	mov	r1, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80047fe:	4413      	add	r3, r2
 8004800:	4619      	mov	r1, r3
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7ff fd94 	bl	8004330 <move_window>
 8004808:	4603      	mov	r3, r0
 800480a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800480c:	7ffb      	ldrb	r3, [r7, #31]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d132      	bne.n	8004878 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	8992      	ldrh	r2, [r2, #12]
 8004826:	fbb3 f0f2 	udiv	r0, r3, r2
 800482a:	fb00 f202 	mul.w	r2, r0, r2
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	440b      	add	r3, r1
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fae4 	bl	8003e00 <ld_dword>
 8004838:	4603      	mov	r3, r0
 800483a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800483e:	4323      	orrs	r3, r4
 8004840:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	8992      	ldrh	r2, [r2, #12]
 8004850:	fbb3 f0f2 	udiv	r0, r3, r2
 8004854:	fb00 f202 	mul.w	r2, r0, r2
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	440b      	add	r3, r1
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fb0c 	bl	8003e7c <st_dword>
			fs->wflag = 1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	70da      	strb	r2, [r3, #3]
			break;
 800486a:	e006      	b.n	800487a <put_fat+0x22a>
			if (res != FR_OK) break;
 800486c:	bf00      	nop
 800486e:	e004      	b.n	800487a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004878:	bf00      	nop
		}
	}
	return res;
 800487a:	7ffb      	ldrb	r3, [r7, #31]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3724      	adds	r7, #36	@ 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d904      	bls.n	80048aa <remove_chain+0x26>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d301      	bcc.n	80048ae <remove_chain+0x2a>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e04b      	b.n	8004946 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	69b8      	ldr	r0, [r7, #24]
 80048bc:	f7ff fec8 	bl	8004650 <put_fat>
 80048c0:	4603      	mov	r3, r0
 80048c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <remove_chain+0x4a>
 80048ca:	7ffb      	ldrb	r3, [r7, #31]
 80048cc:	e03b      	b.n	8004946 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fdea 	bl	80044aa <get_fat>
 80048d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d031      	beq.n	8004942 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <remove_chain+0x64>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e02e      	b.n	8004946 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ee:	d101      	bne.n	80048f4 <remove_chain+0x70>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e028      	b.n	8004946 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80048f4:	2200      	movs	r2, #0
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	69b8      	ldr	r0, [r7, #24]
 80048fa:	f7ff fea9 	bl	8004650 <put_fat>
 80048fe:	4603      	mov	r3, r0
 8004900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <remove_chain+0x88>
 8004908:	7ffb      	ldrb	r3, [r7, #31]
 800490a:	e01c      	b.n	8004946 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	3b02      	subs	r3, #2
 8004916:	429a      	cmp	r2, r3
 8004918:	d20b      	bcs.n	8004932 <remove_chain+0xae>
			fs->free_clst++;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	791b      	ldrb	r3, [r3, #4]
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	429a      	cmp	r2, r3
 800493e:	d3c6      	bcc.n	80048ce <remove_chain+0x4a>
 8004940:	e000      	b.n	8004944 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004942:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b088      	sub	sp, #32
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10d      	bne.n	8004980 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <create_chain+0x2c>
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d31b      	bcc.n	80049b2 <create_chain+0x64>
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e018      	b.n	80049b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fd91 	bl	80044aa <get_fat>
 8004988:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d801      	bhi.n	8004994 <create_chain+0x46>
 8004990:	2301      	movs	r3, #1
 8004992:	e070      	b.n	8004a76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499a:	d101      	bne.n	80049a0 <create_chain+0x52>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	e06a      	b.n	8004a76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d201      	bcs.n	80049ae <create_chain+0x60>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	e063      	b.n	8004a76 <create_chain+0x128>
		scl = clst;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3301      	adds	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d307      	bcc.n	80049d6 <create_chain+0x88>
				ncl = 2;
 80049c6:	2302      	movs	r3, #2
 80049c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d901      	bls.n	80049d6 <create_chain+0x88>
 80049d2:	2300      	movs	r3, #0
 80049d4:	e04f      	b.n	8004a76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fd66 	bl	80044aa <get_fat>
 80049de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d003      	beq.n	80049f4 <create_chain+0xa6>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049f2:	d101      	bne.n	80049f8 <create_chain+0xaa>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	e03e      	b.n	8004a76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1da      	bne.n	80049b6 <create_chain+0x68>
 8004a00:	2300      	movs	r3, #0
 8004a02:	e038      	b.n	8004a76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004a04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	6938      	ldr	r0, [r7, #16]
 8004a0e:	f7ff fe1f 	bl	8004650 <put_fat>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <create_chain+0xe2>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d006      	beq.n	8004a30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	6938      	ldr	r0, [r7, #16]
 8004a28:	f7ff fe12 	bl	8004650 <put_fat>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <create_chain+0x116>
		fs->last_clst = ncl;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	3b02      	subs	r3, #2
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d804      	bhi.n	8004a54 <create_chain+0x106>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	1e5a      	subs	r2, r3, #1
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	711a      	strb	r2, [r3, #4]
 8004a62:	e007      	b.n	8004a74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <create_chain+0x122>
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a6e:	e000      	b.n	8004a72 <create_chain+0x124>
 8004a70:	2301      	movs	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004a74:	69fb      	ldr	r3, [r7, #28]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	3304      	adds	r3, #4
 8004a94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	899b      	ldrh	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	8952      	ldrh	r2, [r2, #10]
 8004aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	613a      	str	r2, [r7, #16]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <clmt_clust+0x42>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e010      	b.n	8004ae2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d307      	bcc.n	8004ad8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ad6:	e7e9      	b.n	8004aac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004ad8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4413      	add	r3, r2
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b04:	d204      	bcs.n	8004b10 <dir_sdi+0x22>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e071      	b.n	8004bf8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <dir_sdi+0x46>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d902      	bls.n	8004b34 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	8912      	ldrh	r2, [r2, #8]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d301      	bcc.n	8004b4a <dir_sdi+0x5c>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e056      	b.n	8004bf8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	61da      	str	r2, [r3, #28]
 8004b52:	e02d      	b.n	8004bb0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	895b      	ldrh	r3, [r3, #10]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	899b      	ldrh	r3, [r3, #12]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b64:	e019      	b.n	8004b9a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6979      	ldr	r1, [r7, #20]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fc9d 	bl	80044aa <get_fat>
 8004b70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b78:	d101      	bne.n	8004b7e <dir_sdi+0x90>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e03c      	b.n	8004bf8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d904      	bls.n	8004b8e <dir_sdi+0xa0>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d301      	bcc.n	8004b92 <dir_sdi+0xa4>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e032      	b.n	8004bf8 <dir_sdi+0x10a>
			ofs -= csz;
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d2e1      	bcs.n	8004b66 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	6938      	ldr	r0, [r7, #16]
 8004ba6:	f7ff fc61 	bl	800446c <clust2sect>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <dir_sdi+0xd4>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e01a      	b.n	8004bf8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	899b      	ldrh	r3, [r3, #12]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd2:	441a      	add	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	899b      	ldrh	r3, [r3, #12]
 8004be2:	461a      	mov	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bea:	fb00 f202 	mul.w	r2, r0, r2
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	18ca      	adds	r2, r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	3320      	adds	r3, #32
 8004c16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <dir_next+0x28>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c26:	d301      	bcc.n	8004c2c <dir_next+0x2c>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	e0bb      	b.n	8004da4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	899b      	ldrh	r3, [r3, #12]
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c38:	fb01 f202 	mul.w	r2, r1, r2
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f040 809d 	bne.w	8004d7e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	8912      	ldrh	r2, [r2, #8]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f0c0 808d 	bcc.w	8004d7e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	e09a      	b.n	8004da4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	899b      	ldrh	r3, [r3, #12]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	8952      	ldrh	r2, [r2, #10]
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d17b      	bne.n	8004d7e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7ff fc0b 	bl	80044aa <get_fat>
 8004c94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d801      	bhi.n	8004ca0 <dir_next+0xa0>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e081      	b.n	8004da4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ca6:	d101      	bne.n	8004cac <dir_next+0xac>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e07b      	b.n	8004da4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d359      	bcc.n	8004d6a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	e06e      	b.n	8004da4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff fe3d 	bl	800494e <create_chain>
 8004cd4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <dir_next+0xe0>
 8004cdc:	2307      	movs	r3, #7
 8004cde:	e061      	b.n	8004da4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <dir_next+0xea>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e05c      	b.n	8004da4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cf0:	d101      	bne.n	8004cf6 <dir_next+0xf6>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e056      	b.n	8004da4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fad6 	bl	80042a8 <sync_window>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <dir_next+0x106>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e04e      	b.n	8004da4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	899b      	ldrh	r3, [r3, #12]
 8004d10:	461a      	mov	r2, r3
 8004d12:	2100      	movs	r1, #0
 8004d14:	f7ff f8ff 	bl	8003f16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fba4 	bl	800446c <clust2sect>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d2a:	e012      	b.n	8004d52 <dir_next+0x152>
						fs->wflag = 1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fab8 	bl	80042a8 <sync_window>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <dir_next+0x142>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e030      	b.n	8004da4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3301      	adds	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	895b      	ldrh	r3, [r3, #10]
 8004d56:	461a      	mov	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d3e6      	bcc.n	8004d2c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004d70:	6979      	ldr	r1, [r7, #20]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fb7a 	bl	800446c <clust2sect>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	899b      	ldrh	r3, [r3, #12]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d96:	fb00 f202 	mul.w	r2, r0, r2
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	18ca      	adds	r2, r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe95 	bl	8004aee <dir_sdi>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d12b      	bne.n	8004e26 <dir_alloc+0x7a>
		n = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff faa9 	bl	8004330 <move_window>
 8004dde:	4603      	mov	r3, r0
 8004de0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11d      	bne.n	8004e24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2be5      	cmp	r3, #229	@ 0xe5
 8004df0:	d004      	beq.n	8004dfc <dir_alloc+0x50>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d107      	bne.n	8004e0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d102      	bne.n	8004e10 <dir_alloc+0x64>
 8004e0a:	e00c      	b.n	8004e26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004e10:	2101      	movs	r1, #1
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fef4 	bl	8004c00 <dir_next>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0d7      	beq.n	8004dd2 <dir_alloc+0x26>
 8004e22:	e000      	b.n	8004e26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004e24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d101      	bne.n	8004e30 <dir_alloc+0x84>
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	331a      	adds	r3, #26
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe ffc1 	bl	8003dd0 <ld_word>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d109      	bne.n	8004e6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe ffb6 	bl	8003dd0 <ld_word>
 8004e64:	4603      	mov	r3, r0
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	331a      	adds	r3, #26
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe ffd9 	bl	8003e46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d109      	bne.n	8004eb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f103 0214 	add.w	r2, r3, #20
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe ffcb 	bl	8003e46 <st_word>
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	331a      	adds	r3, #26
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ff82 	bl	8003dd0 <ld_word>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <cmp_lfn+0x1e>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e059      	b.n	8004f8a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ede:	1e5a      	subs	r2, r3, #1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004eec:	2301      	movs	r3, #1
 8004eee:	81fb      	strh	r3, [r7, #14]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e033      	b.n	8004f5e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004ef6:	4a27      	ldr	r2, [pc, #156]	@ (8004f94 <cmp_lfn+0xdc>)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff63 	bl	8003dd0 <ld_word>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01a      	beq.n	8004f4a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f18:	d812      	bhi.n	8004f40 <cmp_lfn+0x88>
 8004f1a:	89bb      	ldrh	r3, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fed1 	bl	8006cc4 <ff_wtoupper>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461c      	mov	r4, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	617a      	str	r2, [r7, #20]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fec5 	bl	8006cc4 <ff_wtoupper>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	d001      	beq.n	8004f44 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004f40:	2300      	movs	r3, #0
 8004f42:	e022      	b.n	8004f8a <cmp_lfn+0xd2>
			}
			wc = uc;
 8004f44:	89bb      	ldrh	r3, [r7, #12]
 8004f46:	81fb      	strh	r3, [r7, #14]
 8004f48:	e006      	b.n	8004f58 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004f4a:	89bb      	ldrh	r3, [r7, #12]
 8004f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d001      	beq.n	8004f58 <cmp_lfn+0xa0>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e018      	b.n	8004f8a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d9c8      	bls.n	8004ef6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <cmp_lfn+0xd0>
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <cmp_lfn+0xd0>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <cmp_lfn+0xd0>
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004f88:	2301      	movs	r3, #1
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08008504 	.word	0x08008504

08004f98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	71fb      	strb	r3, [r7, #7]
 8004faa:	4613      	mov	r3, r2
 8004fac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	330d      	adds	r3, #13
 8004fb2:	79ba      	ldrb	r2, [r7, #6]
 8004fb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	330b      	adds	r3, #11
 8004fba:	220f      	movs	r2, #15
 8004fbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	331a      	adds	r3, #26
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe ff3a 	bl	8003e46 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	82fb      	strh	r3, [r7, #22]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004fea:	8afb      	ldrh	r3, [r7, #22]
 8004fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <put_lfn+0x6c>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	61fa      	str	r2, [r7, #28]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005004:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <put_lfn+0xcc>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	8afa      	ldrh	r2, [r7, #22]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe ff15 	bl	8003e46 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800501c:	8afb      	ldrh	r3, [r7, #22]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <put_lfn+0x90>
 8005022:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005026:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3301      	adds	r3, #1
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b0c      	cmp	r3, #12
 8005032:	d9da      	bls.n	8004fea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800503a:	4293      	cmp	r3, r2
 800503c:	d006      	beq.n	800504c <put_lfn+0xb4>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <put_lfn+0xbc>
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005052:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	79fa      	ldrb	r2, [r7, #7]
 8005058:	701a      	strb	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	08008504 	.word	0x08008504

08005068 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08c      	sub	sp, #48	@ 0x30
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005076:	220b      	movs	r2, #11
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fe ff2a 	bl	8003ed4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b05      	cmp	r3, #5
 8005084:	d92b      	bls.n	80050de <gen_numname+0x76>
		sr = seq;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800508a:	e022      	b.n	80050d2 <gen_numname+0x6a>
			wc = *lfn++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005096:	2300      	movs	r3, #0
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509a:	e017      	b.n	80050cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005a      	lsls	r2, r3, #1
 80050a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80050aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <gen_numname+0x5e>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80050c0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80050c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	3301      	adds	r3, #1
 80050ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d9e4      	bls.n	800509c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1d8      	bne.n	800508c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80050de:	2307      	movs	r3, #7
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3330      	adds	r3, #48	@ 0x30
 80050ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80050f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050f6:	2b39      	cmp	r3, #57	@ 0x39
 80050f8:	d904      	bls.n	8005104 <gen_numname+0x9c>
 80050fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050fe:	3307      	adds	r3, #7
 8005100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	62ba      	str	r2, [r7, #40]	@ 0x28
 800510a:	3330      	adds	r3, #48	@ 0x30
 800510c:	443b      	add	r3, r7
 800510e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005112:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1df      	bne.n	80050e2 <gen_numname+0x7a>
	ns[i] = '~';
 8005122:	f107 0214 	add.w	r2, r7, #20
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	4413      	add	r3, r2
 800512a:	227e      	movs	r2, #126	@ 0x7e
 800512c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	e002      	b.n	800513a <gen_numname+0xd2>
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	3301      	adds	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	429a      	cmp	r2, r3
 8005140:	d205      	bcs.n	800514e <gen_numname+0xe6>
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	4413      	add	r3, r2
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b20      	cmp	r3, #32
 800514c:	d1f2      	bne.n	8005134 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	2b07      	cmp	r3, #7
 8005152:	d807      	bhi.n	8005164 <gen_numname+0xfc>
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	62ba      	str	r2, [r7, #40]	@ 0x28
 800515a:	3330      	adds	r3, #48	@ 0x30
 800515c:	443b      	add	r3, r7
 800515e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005162:	e000      	b.n	8005166 <gen_numname+0xfe>
 8005164:	2120      	movs	r1, #32
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	627a      	str	r2, [r7, #36]	@ 0x24
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	460a      	mov	r2, r1
 8005172:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	2b07      	cmp	r3, #7
 8005178:	d9e9      	bls.n	800514e <gen_numname+0xe6>
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	3730      	adds	r7, #48	@ 0x30
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005190:	230b      	movs	r3, #11
 8005192:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	0852      	lsrs	r2, r2, #1
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	4313      	orrs	r3, r2
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1c59      	adds	r1, r3, #1
 80051a4:	6079      	str	r1, [r7, #4]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ed      	bne.n	8005194 <sum_sfn+0x10>
	return sum;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b086      	sub	sp, #24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80051d4:	2100      	movs	r1, #0
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fc89 	bl	8004aee <dir_sdi>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <dir_find+0x24>
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	e0a9      	b.n	800533e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80051ea:	23ff      	movs	r3, #255	@ 0xff
 80051ec:	753b      	strb	r3, [r7, #20]
 80051ee:	7d3b      	ldrb	r3, [r7, #20]
 80051f0:	757b      	strb	r3, [r7, #21]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4619      	mov	r1, r3
 8005200:	6938      	ldr	r0, [r7, #16]
 8005202:	f7ff f895 	bl	8004330 <move_window>
 8005206:	4603      	mov	r3, r0
 8005208:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 8090 	bne.w	8005332 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800521a:	7dbb      	ldrb	r3, [r7, #22]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <dir_find+0x60>
 8005220:	2304      	movs	r3, #4
 8005222:	75fb      	strb	r3, [r7, #23]
 8005224:	e08a      	b.n	800533c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	330b      	adds	r3, #11
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800523a:	7dbb      	ldrb	r3, [r7, #22]
 800523c:	2be5      	cmp	r3, #229	@ 0xe5
 800523e:	d007      	beq.n	8005250 <dir_find+0x8a>
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <dir_find+0x98>
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b0f      	cmp	r3, #15
 800524e:	d006      	beq.n	800525e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005250:	23ff      	movs	r3, #255	@ 0xff
 8005252:	757b      	strb	r3, [r7, #21]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
 800525c:	e05e      	b.n	800531c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d136      	bne.n	80052d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800526a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d154      	bne.n	800531c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005272:	7dbb      	ldrb	r3, [r7, #22]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	7b5b      	ldrb	r3, [r3, #13]
 8005282:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005284:	7dbb      	ldrb	r3, [r7, #22]
 8005286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800528a:	75bb      	strb	r3, [r7, #22]
 800528c:	7dbb      	ldrb	r3, [r7, #22]
 800528e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005298:	7dba      	ldrb	r2, [r7, #22]
 800529a:	7d7b      	ldrb	r3, [r7, #21]
 800529c:	429a      	cmp	r2, r3
 800529e:	d115      	bne.n	80052cc <dir_find+0x106>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	330d      	adds	r3, #13
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	7d3a      	ldrb	r2, [r7, #20]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d10e      	bne.n	80052cc <dir_find+0x106>
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7ff fdfd 	bl	8004eb8 <cmp_lfn>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <dir_find+0x106>
 80052c4:	7d7b      	ldrb	r3, [r7, #21]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e000      	b.n	80052ce <dir_find+0x108>
 80052cc:	23ff      	movs	r3, #255	@ 0xff
 80052ce:	757b      	strb	r3, [r7, #21]
 80052d0:	e024      	b.n	800531c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80052d2:	7d7b      	ldrb	r3, [r7, #21]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <dir_find+0x126>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff51 	bl	8005184 <sum_sfn>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	7d3b      	ldrb	r3, [r7, #20]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d024      	beq.n	8005336 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <dir_find+0x14a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a18      	ldr	r0, [r3, #32]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3324      	adds	r3, #36	@ 0x24
 8005302:	220b      	movs	r2, #11
 8005304:	4619      	mov	r1, r3
 8005306:	f7fe fe21 	bl	8003f4c <mem_cmp>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d014      	beq.n	800533a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005310:	23ff      	movs	r3, #255	@ 0xff
 8005312:	757b      	strb	r3, [r7, #21]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800531c:	2100      	movs	r1, #0
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fc6e 	bl	8004c00 <dir_next>
 8005324:	4603      	mov	r3, r0
 8005326:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f43f af65 	beq.w	80051fa <dir_find+0x34>
 8005330:	e004      	b.n	800533c <dir_find+0x176>
		if (res != FR_OK) break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800533a:	bf00      	nop

	return res;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	@ 0x30
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800535c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <dir_register+0x20>
 8005364:	2306      	movs	r3, #6
 8005366:	e0e0      	b.n	800552a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005368:	2300      	movs	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
 800536c:	e002      	b.n	8005374 <dir_register+0x2c>
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	3301      	adds	r3, #1
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f4      	bne.n	800536e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	220c      	movs	r2, #12
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe fd9f 	bl	8003ed4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d032      	beq.n	8005406 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2240      	movs	r2, #64	@ 0x40
 80053a4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80053a8:	2301      	movs	r3, #1
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ac:	e016      	b.n	80053dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	f107 010c 	add.w	r1, r7, #12
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	f7ff fe53 	bl	8005068 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff feff 	bl	80051c6 <dir_find>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80053ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	3301      	adds	r3, #1
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	2b63      	cmp	r3, #99	@ 0x63
 80053e0:	d9e5      	bls.n	80053ae <dir_register+0x66>
 80053e2:	e000      	b.n	80053e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80053e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	2b64      	cmp	r3, #100	@ 0x64
 80053ea:	d101      	bne.n	80053f0 <dir_register+0xa8>
 80053ec:	2307      	movs	r3, #7
 80053ee:	e09c      	b.n	800552a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80053f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d002      	beq.n	80053fe <dir_register+0xb6>
 80053f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053fc:	e095      	b.n	800552a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80053fe:	7dfa      	ldrb	r2, [r7, #23]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <dir_register+0xd8>
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	330c      	adds	r3, #12
 8005414:	4a47      	ldr	r2, [pc, #284]	@ (8005534 <dir_register+0x1ec>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	3301      	adds	r3, #1
 800541e:	e000      	b.n	8005422 <dir_register+0xda>
 8005420:	2301      	movs	r3, #1
 8005422:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005424:	6a39      	ldr	r1, [r7, #32]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fcc0 	bl	8004dac <dir_alloc>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005436:	2b00      	cmp	r3, #0
 8005438:	d148      	bne.n	80054cc <dir_register+0x184>
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	3b01      	subs	r3, #1
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d042      	beq.n	80054cc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	015b      	lsls	r3, r3, #5
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fb4b 	bl	8004aee <dir_sdi>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800545e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005462:	2b00      	cmp	r3, #0
 8005464:	d132      	bne.n	80054cc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3324      	adds	r3, #36	@ 0x24
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fe8a 	bl	8005184 <sum_sfn>
 8005470:	4603      	mov	r3, r0
 8005472:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4619      	mov	r1, r3
 800547a:	69f8      	ldr	r0, [r7, #28]
 800547c:	f7fe ff58 	bl	8004330 <move_window>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11d      	bne.n	80054ca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	6918      	ldr	r0, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a19      	ldr	r1, [r3, #32]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	7efb      	ldrb	r3, [r7, #27]
 800549c:	f7ff fd7c 	bl	8004f98 <put_lfn>
				fs->wflag = 1;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2201      	movs	r2, #1
 80054a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80054a6:	2100      	movs	r1, #0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fba9 	bl	8004c00 <dir_next>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80054b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d107      	bne.n	80054cc <dir_register+0x184>
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	3b01      	subs	r3, #1
 80054c0:	623b      	str	r3, [r7, #32]
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1d5      	bne.n	8005474 <dir_register+0x12c>
 80054c8:	e000      	b.n	80054cc <dir_register+0x184>
				if (res != FR_OK) break;
 80054ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80054cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d128      	bne.n	8005526 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	4619      	mov	r1, r3
 80054da:	69f8      	ldr	r0, [r7, #28]
 80054dc:	f7fe ff28 	bl	8004330 <move_window>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80054e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11b      	bne.n	8005526 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	2220      	movs	r2, #32
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fd0d 	bl	8003f16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a18      	ldr	r0, [r3, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3324      	adds	r3, #36	@ 0x24
 8005504:	220b      	movs	r2, #11
 8005506:	4619      	mov	r1, r3
 8005508:	f7fe fce4 	bl	8003ed4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	330c      	adds	r3, #12
 8005518:	f002 0218 	and.w	r2, r2, #24
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2201      	movs	r2, #1
 8005524:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800552a:	4618      	mov	r0, r3
 800552c:	3730      	adds	r7, #48	@ 0x30
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	4ec4ec4f 	.word	0x4ec4ec4f

08005538 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	61ba      	str	r2, [r7, #24]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005568:	2b1f      	cmp	r3, #31
 800556a:	d940      	bls.n	80055ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800556c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800556e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005570:	d006      	beq.n	8005580 <create_name+0x48>
 8005572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005574:	2b5c      	cmp	r3, #92	@ 0x5c
 8005576:	d110      	bne.n	800559a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005578:	e002      	b.n	8005580 <create_name+0x48>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3301      	adds	r3, #1
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b2f      	cmp	r3, #47	@ 0x2f
 800558a:	d0f6      	beq.n	800557a <create_name+0x42>
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4413      	add	r3, r2
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b5c      	cmp	r3, #92	@ 0x5c
 8005596:	d0f0      	beq.n	800557a <create_name+0x42>
			break;
 8005598:	e02a      	b.n	80055f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2bfe      	cmp	r3, #254	@ 0xfe
 800559e:	d901      	bls.n	80055a4 <create_name+0x6c>
 80055a0:	2306      	movs	r3, #6
 80055a2:	e17d      	b.n	80058a0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80055a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80055aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 fb4c 	bl	8006c4c <ff_convert>
 80055b4:	4603      	mov	r3, r0
 80055b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80055b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <create_name+0x8a>
 80055be:	2306      	movs	r3, #6
 80055c0:	e16e      	b.n	80058a0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80055c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c6:	d809      	bhi.n	80055dc <create_name+0xa4>
 80055c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055ca:	4619      	mov	r1, r3
 80055cc:	488d      	ldr	r0, [pc, #564]	@ (8005804 <create_name+0x2cc>)
 80055ce:	f7fe fce4 	bl	8003f9a <chk_chr>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <create_name+0xa4>
 80055d8:	2306      	movs	r3, #6
 80055da:	e161      	b.n	80058a0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	617a      	str	r2, [r7, #20]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80055ec:	e7b4      	b.n	8005558 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80055ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	441a      	add	r2, r3
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80055fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055fc:	2b1f      	cmp	r3, #31
 80055fe:	d801      	bhi.n	8005604 <create_name+0xcc>
 8005600:	2304      	movs	r3, #4
 8005602:	e000      	b.n	8005606 <create_name+0xce>
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800560a:	e011      	b.n	8005630 <create_name+0xf8>
		w = lfn[di - 1];
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005612:	3b01      	subs	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800561e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005620:	2b20      	cmp	r3, #32
 8005622:	d002      	beq.n	800562a <create_name+0xf2>
 8005624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005626:	2b2e      	cmp	r3, #46	@ 0x2e
 8005628:	d106      	bne.n	8005638 <create_name+0x100>
		di--;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	3b01      	subs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ea      	bne.n	800560c <create_name+0xd4>
 8005636:	e000      	b.n	800563a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005638:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <create_name+0x118>
 800564c:	2306      	movs	r3, #6
 800564e:	e127      	b.n	80058a0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3324      	adds	r3, #36	@ 0x24
 8005654:	220b      	movs	r2, #11
 8005656:	2120      	movs	r1, #32
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fc5c 	bl	8003f16 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e002      	b.n	800566a <create_name+0x132>
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	3301      	adds	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	2b20      	cmp	r3, #32
 8005676:	d0f5      	beq.n	8005664 <create_name+0x12c>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	2b2e      	cmp	r3, #46	@ 0x2e
 8005684:	d0ee      	beq.n	8005664 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <create_name+0x168>
 800568c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005690:	f043 0303 	orr.w	r3, r3, #3
 8005694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005698:	e002      	b.n	80056a0 <create_name+0x168>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	3b01      	subs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <create_name+0x182>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80056ac:	3b01      	subs	r3, #1
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b8:	d1ef      	bne.n	800569a <create_name+0x162>

	i = b = 0; ni = 8;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	2308      	movs	r3, #8
 80056c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	61ba      	str	r2, [r7, #24]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80056d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8090 	beq.w	8005800 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80056e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d006      	beq.n	80056f4 <create_name+0x1bc>
 80056e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80056ea:	d10a      	bne.n	8005702 <create_name+0x1ca>
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d006      	beq.n	8005702 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80056f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056f8:	f043 0303 	orr.w	r3, r3, #3
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005700:	e07d      	b.n	80057fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	429a      	cmp	r2, r3
 8005708:	d203      	bcs.n	8005712 <create_name+0x1da>
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d123      	bne.n	800575a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b0b      	cmp	r3, #11
 8005716:	d106      	bne.n	8005726 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800571c:	f043 0303 	orr.w	r3, r3, #3
 8005720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005724:	e075      	b.n	8005812 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	429a      	cmp	r2, r3
 800572c:	d005      	beq.n	800573a <create_name+0x202>
 800572e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005732:	f043 0303 	orr.w	r3, r3, #3
 8005736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d866      	bhi.n	8005810 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	2308      	movs	r3, #8
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	230b      	movs	r3, #11
 800574c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800574e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005758:	e051      	b.n	80057fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800575a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800575c:	2b7f      	cmp	r3, #127	@ 0x7f
 800575e:	d914      	bls.n	800578a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005760:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fa71 	bl	8006c4c <ff_convert>
 800576a:	4603      	mov	r3, r0
 800576c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800576e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <create_name+0x246>
 8005774:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005776:	3b80      	subs	r3, #128	@ 0x80
 8005778:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <create_name+0x2d0>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800577e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800578a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <create_name+0x268>
 8005790:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005792:	4619      	mov	r1, r3
 8005794:	481d      	ldr	r0, [pc, #116]	@ (800580c <create_name+0x2d4>)
 8005796:	f7fe fc00 	bl	8003f9a <chk_chr>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80057a0:	235f      	movs	r3, #95	@ 0x5f
 80057a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80057a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057a8:	f043 0303 	orr.w	r3, r3, #3
 80057ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80057b0:	e01b      	b.n	80057ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80057b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b4:	2b40      	cmp	r3, #64	@ 0x40
 80057b6:	d909      	bls.n	80057cc <create_name+0x294>
 80057b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80057bc:	d806      	bhi.n	80057cc <create_name+0x294>
					b |= 2;
 80057be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057ca:	e00e      	b.n	80057ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80057cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057ce:	2b60      	cmp	r3, #96	@ 0x60
 80057d0:	d90b      	bls.n	80057ea <create_name+0x2b2>
 80057d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057d4:	2b7a      	cmp	r3, #122	@ 0x7a
 80057d6:	d808      	bhi.n	80057ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80057d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057e6:	3b20      	subs	r3, #32
 80057e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	623a      	str	r2, [r7, #32]
 80057f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057f2:	b2d1      	uxtb	r1, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	460a      	mov	r2, r1
 80057fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80057fe:	e763      	b.n	80056c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005800:	bf00      	nop
 8005802:	e006      	b.n	8005812 <create_name+0x2da>
 8005804:	08008424 	.word	0x08008424
 8005808:	08008484 	.word	0x08008484
 800580c:	08008430 	.word	0x08008430
			if (si > di) break;			/* No extension */
 8005810:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005818:	2be5      	cmp	r3, #229	@ 0xe5
 800581a:	d103      	bne.n	8005824 <create_name+0x2ec>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2205      	movs	r2, #5
 8005820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d104      	bne.n	8005834 <create_name+0x2fc>
 800582a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005834:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d005      	beq.n	800584c <create_name+0x314>
 8005840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	2b03      	cmp	r3, #3
 800584a:	d105      	bne.n	8005858 <create_name+0x320>
 800584c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d117      	bne.n	8005894 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <create_name+0x344>
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005874:	f043 0310 	orr.w	r3, r3, #16
 8005878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800587c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b04      	cmp	r3, #4
 8005886:	d105      	bne.n	8005894 <create_name+0x35c>
 8005888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800589a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800589e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3728      	adds	r7, #40	@ 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80058bc:	e002      	b.n	80058c4 <follow_path+0x1c>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80058ca:	d0f8      	beq.n	80058be <follow_path+0x16>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80058d2:	d0f4      	beq.n	80058be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b1f      	cmp	r3, #31
 80058e0:	d80a      	bhi.n	80058f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2280      	movs	r2, #128	@ 0x80
 80058e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80058ea:	2100      	movs	r1, #0
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff f8fe 	bl	8004aee <dir_sdi>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]
 80058f6:	e048      	b.n	800598a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058f8:	463b      	mov	r3, r7
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fe1b 	bl	8005538 <create_name>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d139      	bne.n	8005980 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fc5a 	bl	80051c6 <dir_find>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800591c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b04      	cmp	r3, #4
 8005928:	d12c      	bne.n	8005984 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d127      	bne.n	8005984 <follow_path+0xdc>
 8005934:	2305      	movs	r3, #5
 8005936:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005938:	e024      	b.n	8005984 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d121      	bne.n	8005988 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	799b      	ldrb	r3, [r3, #6]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005950:	2305      	movs	r3, #5
 8005952:	75fb      	strb	r3, [r7, #23]
 8005954:	e019      	b.n	800598a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	8992      	ldrh	r2, [r2, #12]
 8005964:	fbb3 f0f2 	udiv	r0, r3, r2
 8005968:	fb00 f202 	mul.w	r2, r0, r2
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	440b      	add	r3, r1
 8005970:	4619      	mov	r1, r3
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fa61 	bl	8004e3a <ld_clust>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800597e:	e7bb      	b.n	80058f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <follow_path+0xe2>
				break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005988:	bf00      	nop
			}
		}
	}

	return res;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d031      	beq.n	8005a0e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e002      	b.n	80059b8 <get_ldnumber+0x24>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	3301      	adds	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b1f      	cmp	r3, #31
 80059be:	d903      	bls.n	80059c8 <get_ldnumber+0x34>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80059c6:	d1f4      	bne.n	80059b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80059ce:	d11c      	bne.n	8005a0a <get_ldnumber+0x76>
			tp = *path;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	60fa      	str	r2, [r7, #12]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	3b30      	subs	r3, #48	@ 0x30
 80059e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b09      	cmp	r3, #9
 80059e6:	d80e      	bhi.n	8005a06 <get_ldnumber+0x72>
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d10a      	bne.n	8005a06 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <get_ldnumber+0x72>
					vol = (int)i;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	e002      	b.n	8005a10 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a0e:	693b      	ldr	r3, [r7, #16]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	70da      	strb	r2, [r3, #3]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a32:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fe fc7a 	bl	8004330 <move_window>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <check_fs+0x2a>
 8005a42:	2304      	movs	r3, #4
 8005a44:	e038      	b.n	8005ab8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3338      	adds	r3, #56	@ 0x38
 8005a4a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe f9be 	bl	8003dd0 <ld_word>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <check_fs+0x48>
 8005a60:	2303      	movs	r3, #3
 8005a62:	e029      	b.n	8005ab8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a6a:	2be9      	cmp	r3, #233	@ 0xe9
 8005a6c:	d009      	beq.n	8005a82 <check_fs+0x66>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a74:	2beb      	cmp	r3, #235	@ 0xeb
 8005a76:	d11e      	bne.n	8005ab6 <check_fs+0x9a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005a7e:	2b90      	cmp	r3, #144	@ 0x90
 8005a80:	d119      	bne.n	8005ab6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3338      	adds	r3, #56	@ 0x38
 8005a86:	3336      	adds	r3, #54	@ 0x36
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe f9b9 	bl	8003e00 <ld_dword>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005a94:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac0 <check_fs+0xa4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <check_fs+0x82>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e00c      	b.n	8005ab8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3338      	adds	r3, #56	@ 0x38
 8005aa2:	3352      	adds	r3, #82	@ 0x52
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe f9ab 	bl	8003e00 <ld_dword>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4a05      	ldr	r2, [pc, #20]	@ (8005ac4 <check_fs+0xa8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <check_fs+0x9a>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005ab6:	2302      	movs	r3, #2
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00544146 	.word	0x00544146
 8005ac4:	33544146 	.word	0x33544146

08005ac8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b096      	sub	sp, #88	@ 0x58
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff ff59 	bl	8005994 <get_ldnumber>
 8005ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da01      	bge.n	8005aee <find_volume+0x26>
 8005aea:	230b      	movs	r3, #11
 8005aec:	e265      	b.n	8005fba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005aee:	4a9f      	ldr	r2, [pc, #636]	@ (8005d6c <find_volume+0x2a4>)
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <find_volume+0x3a>
 8005afe:	230c      	movs	r3, #12
 8005b00:	e25b      	b.n	8005fba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01a      	beq.n	8005b4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe f8b7 	bl	8003c90 <disk_status>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10c      	bne.n	8005b4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <find_volume+0x82>
 8005b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005b46:	230a      	movs	r3, #10
 8005b48:	e237      	b.n	8005fba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e235      	b.n	8005fba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe f8af 	bl	8003cc4 <disk_initialize>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e21e      	b.n	8005fba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <find_volume+0xca>
 8005b82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e213      	b.n	8005fba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	7858      	ldrb	r0, [r3, #1]
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	330c      	adds	r3, #12
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	f7fe f8f9 	bl	8003d94 <disk_ioctl>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <find_volume+0xe4>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e206      	b.n	8005fba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	899b      	ldrh	r3, [r3, #12]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d80d      	bhi.n	8005bd2 <find_volume+0x10a>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	899b      	ldrh	r3, [r3, #12]
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbe:	d308      	bcc.n	8005bd2 <find_volume+0x10a>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	899b      	ldrh	r3, [r3, #12]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	899b      	ldrh	r3, [r3, #12]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <find_volume+0x10e>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e1f1      	b.n	8005fba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005bda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005bdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bde:	f7ff ff1d 	bl	8005a1c <check_fs>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005be8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d149      	bne.n	8005c84 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bf4:	e01e      	b.n	8005c34 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005c04:	4413      	add	r3, r2
 8005c06:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d006      	beq.n	8005c20 <find_volume+0x158>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	3308      	adds	r3, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe f8f2 	bl	8003e00 <ld_dword>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	e000      	b.n	8005c22 <find_volume+0x15a>
 8005c20:	2200      	movs	r2, #0
 8005c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3358      	adds	r3, #88	@ 0x58
 8005c28:	443b      	add	r3, r7
 8005c2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c30:	3301      	adds	r3, #1
 8005c32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d9dd      	bls.n	8005bf6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <find_volume+0x182>
 8005c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c46:	3b01      	subs	r3, #1
 8005c48:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	3358      	adds	r3, #88	@ 0x58
 8005c50:	443b      	add	r3, r7
 8005c52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005c56:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <find_volume+0x1a2>
 8005c5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c62:	f7ff fedb 	bl	8005a1c <check_fs>
 8005c66:	4603      	mov	r3, r0
 8005c68:	e000      	b.n	8005c6c <find_volume+0x1a4>
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005c70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d905      	bls.n	8005c84 <find_volume+0x1bc>
 8005c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d9e2      	bls.n	8005c4a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d101      	bne.n	8005c90 <find_volume+0x1c8>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e194      	b.n	8005fba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d901      	bls.n	8005c9c <find_volume+0x1d4>
 8005c98:	230d      	movs	r3, #13
 8005c9a:	e18e      	b.n	8005fba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	3338      	adds	r3, #56	@ 0x38
 8005ca0:	330b      	adds	r3, #11
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe f894 	bl	8003dd0 <ld_word>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	899b      	ldrh	r3, [r3, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <find_volume+0x1f0>
 8005cb4:	230d      	movs	r3, #13
 8005cb6:	e180      	b.n	8005fba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	3338      	adds	r3, #56	@ 0x38
 8005cbc:	3316      	adds	r3, #22
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f886 	bl	8003dd0 <ld_word>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <find_volume+0x214>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	3338      	adds	r3, #56	@ 0x38
 8005cd2:	3324      	adds	r3, #36	@ 0x24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe f893 	bl	8003e00 <ld_dword>
 8005cda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ce0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	789b      	ldrb	r3, [r3, #2]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d005      	beq.n	8005d00 <find_volume+0x238>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	789b      	ldrb	r3, [r3, #2]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d001      	beq.n	8005d00 <find_volume+0x238>
 8005cfc:	230d      	movs	r3, #13
 8005cfe:	e15c      	b.n	8005fba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	789b      	ldrb	r3, [r3, #2]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d14:	461a      	mov	r2, r3
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1c:	895b      	ldrh	r3, [r3, #10]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <find_volume+0x26c>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	895b      	ldrh	r3, [r3, #10]
 8005d26:	461a      	mov	r2, r3
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	895b      	ldrh	r3, [r3, #10]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <find_volume+0x270>
 8005d34:	230d      	movs	r3, #13
 8005d36:	e140      	b.n	8005fba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	3338      	adds	r3, #56	@ 0x38
 8005d3c:	3311      	adds	r3, #17
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe f846 	bl	8003dd0 <ld_word>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	891b      	ldrh	r3, [r3, #8]
 8005d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d52:	8992      	ldrh	r2, [r2, #12]
 8005d54:	0952      	lsrs	r2, r2, #5
 8005d56:	b292      	uxth	r2, r2
 8005d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d5c:	fb01 f202 	mul.w	r2, r1, r2
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <find_volume+0x2a8>
 8005d68:	230d      	movs	r3, #13
 8005d6a:	e126      	b.n	8005fba <find_volume+0x4f2>
 8005d6c:	200002a8 	.word	0x200002a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	3338      	adds	r3, #56	@ 0x38
 8005d74:	3313      	adds	r3, #19
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe f82a 	bl	8003dd0 <ld_word>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <find_volume+0x2cc>
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	3338      	adds	r3, #56	@ 0x38
 8005d8a:	3320      	adds	r3, #32
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f837 	bl	8003e00 <ld_dword>
 8005d92:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d96:	3338      	adds	r3, #56	@ 0x38
 8005d98:	330e      	adds	r3, #14
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe f818 	bl	8003dd0 <ld_word>
 8005da0:	4603      	mov	r3, r0
 8005da2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005da4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <find_volume+0x2e6>
 8005daa:	230d      	movs	r3, #13
 8005dac:	e105      	b.n	8005fba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005dae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db2:	4413      	add	r3, r2
 8005db4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005db6:	8911      	ldrh	r1, [r2, #8]
 8005db8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dba:	8992      	ldrh	r2, [r2, #12]
 8005dbc:	0952      	lsrs	r2, r2, #5
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	fbb1 f2f2 	udiv	r2, r1, r2
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d201      	bcs.n	8005dd6 <find_volume+0x30e>
 8005dd2:	230d      	movs	r3, #13
 8005dd4:	e0f1      	b.n	8005fba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dde:	8952      	ldrh	r2, [r2, #10]
 8005de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <find_volume+0x328>
 8005dec:	230d      	movs	r3, #13
 8005dee:	e0e4      	b.n	8005fba <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005df0:	2303      	movs	r3, #3
 8005df2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d802      	bhi.n	8005e06 <find_volume+0x33e>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d802      	bhi.n	8005e16 <find_volume+0x34e>
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e22:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005e24:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e28:	441a      	add	r2, r3
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005e2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	441a      	add	r2, r3
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005e38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d11e      	bne.n	8005e7e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	3338      	adds	r3, #56	@ 0x38
 8005e44:	332a      	adds	r3, #42	@ 0x2a
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ffc2 	bl	8003dd0 <ld_word>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <find_volume+0x38e>
 8005e52:	230d      	movs	r3, #13
 8005e54:	e0b1      	b.n	8005fba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	891b      	ldrh	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <find_volume+0x39a>
 8005e5e:	230d      	movs	r3, #13
 8005e60:	e0ab      	b.n	8005fba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	3338      	adds	r3, #56	@ 0x38
 8005e66:	332c      	adds	r3, #44	@ 0x2c
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd ffc9 	bl	8003e00 <ld_dword>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7c:	e01f      	b.n	8005ebe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	891b      	ldrh	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <find_volume+0x3c2>
 8005e86:	230d      	movs	r3, #13
 8005e88:	e097      	b.n	8005fba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e90:	441a      	add	r2, r3
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <find_volume+0x3de>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	e00a      	b.n	8005ebc <find_volume+0x3f4>
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	085a      	lsrs	r2, r3, #1
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005ebc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	899b      	ldrh	r3, [r3, #12]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eca:	440b      	add	r3, r1
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ed0:	8989      	ldrh	r1, [r1, #12]
 8005ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d201      	bcs.n	8005ede <find_volume+0x416>
 8005eda:	230d      	movs	r3, #13
 8005edc:	e06d      	b.n	8005fba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ee4:	619a      	str	r2, [r3, #24]
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	2280      	movs	r2, #128	@ 0x80
 8005ef2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d149      	bne.n	8005f90 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	3338      	adds	r3, #56	@ 0x38
 8005f00:	3330      	adds	r3, #48	@ 0x30
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd ff64 	bl	8003dd0 <ld_word>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d140      	bne.n	8005f90 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f10:	3301      	adds	r3, #1
 8005f12:	4619      	mov	r1, r3
 8005f14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f16:	f7fe fa0b 	bl	8004330 <move_window>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d137      	bne.n	8005f90 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	2200      	movs	r2, #0
 8005f24:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	3338      	adds	r3, #56	@ 0x38
 8005f2a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd ff4e 	bl	8003dd0 <ld_word>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d127      	bne.n	8005f90 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	3338      	adds	r3, #56	@ 0x38
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fd ff5b 	bl	8003e00 <ld_dword>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <find_volume+0x4fc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d11e      	bne.n	8005f90 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	3338      	adds	r3, #56	@ 0x38
 8005f56:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fd ff50 	bl	8003e00 <ld_dword>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4a19      	ldr	r2, [pc, #100]	@ (8005fc8 <find_volume+0x500>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d113      	bne.n	8005f90 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	3338      	adds	r3, #56	@ 0x38
 8005f6c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd ff45 	bl	8003e00 <ld_dword>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	3338      	adds	r3, #56	@ 0x38
 8005f80:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fd ff3b 	bl	8003e00 <ld_dword>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005f96:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <find_volume+0x504>)
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <find_volume+0x504>)
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <find_volume+0x504>)
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	4a08      	ldr	r2, [pc, #32]	@ (8005fd0 <find_volume+0x508>)
 8005fb0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005fb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005fb4:	f7fe f954 	bl	8004260 <clear_lock>
#endif
	return FR_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3758      	adds	r7, #88	@ 0x58
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	41615252 	.word	0x41615252
 8005fc8:	61417272 	.word	0x61417272
 8005fcc:	200002ac 	.word	0x200002ac
 8005fd0:	200002d0 	.word	0x200002d0

08005fd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005fde:	2309      	movs	r3, #9
 8005fe0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01c      	beq.n	8006022 <validate+0x4e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d018      	beq.n	8006022 <validate+0x4e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <validate+0x4e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	889a      	ldrh	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	88db      	ldrh	r3, [r3, #6]
 8006004:	429a      	cmp	r2, r3
 8006006:	d10c      	bne.n	8006022 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd fe3e 	bl	8003c90 <disk_status>
 8006014:	4603      	mov	r3, r0
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <validate+0x4e>
			res = FR_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <validate+0x5a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e000      	b.n	8006030 <validate+0x5c>
 800602e:	2300      	movs	r3, #0
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	6013      	str	r3, [r2, #0]
	return res;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006052:	f107 0310 	add.w	r3, r7, #16
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fc9c 	bl	8005994 <get_ldnumber>
 800605c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da01      	bge.n	8006068 <f_mount+0x28>
 8006064:	230b      	movs	r3, #11
 8006066:	e02b      	b.n	80060c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006068:	4a17      	ldr	r2, [pc, #92]	@ (80060c8 <f_mount+0x88>)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006070:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006078:	69b8      	ldr	r0, [r7, #24]
 800607a:	f7fe f8f1 	bl	8004260 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	490d      	ldr	r1, [pc, #52]	@ (80060c8 <f_mount+0x88>)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <f_mount+0x66>
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d001      	beq.n	80060aa <f_mount+0x6a>
 80060a6:	2300      	movs	r3, #0
 80060a8:	e00a      	b.n	80060c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80060aa:	f107 010c 	add.w	r1, r7, #12
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	2200      	movs	r2, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fd07 	bl	8005ac8 <find_volume>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200002a8 	.word	0x200002a8

080060cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b09a      	sub	sp, #104	@ 0x68
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <f_open+0x18>
 80060e0:	2309      	movs	r3, #9
 80060e2:	e1b7      	b.n	8006454 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80060ec:	79fa      	ldrb	r2, [r7, #7]
 80060ee:	f107 0114 	add.w	r1, r7, #20
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fce6 	bl	8005ac8 <find_volume>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006102:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 819b 	bne.w	8006442 <f_open+0x376>
		dj.obj.fs = fs;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	f107 0318 	add.w	r3, r7, #24
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fbc5 	bl	80058a8 <follow_path>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006124:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006128:	2b00      	cmp	r3, #0
 800612a:	d118      	bne.n	800615e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800612c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006130:	b25b      	sxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	da03      	bge.n	800613e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006136:	2306      	movs	r3, #6
 8006138:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800613c:	e00f      	b.n	800615e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf8c      	ite	hi
 8006144:	2301      	movhi	r3, #1
 8006146:	2300      	movls	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f107 0318 	add.w	r3, r7, #24
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd ff3c 	bl	8003fd0 <chk_lock>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	f003 031c 	and.w	r3, r3, #28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d07f      	beq.n	8006268 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006168:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006170:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006174:	2b04      	cmp	r3, #4
 8006176:	d10e      	bne.n	8006196 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006178:	f7fd ff86 	bl	8004088 <enq_lock>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <f_open+0xc4>
 8006182:	f107 0318 	add.w	r3, r7, #24
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff f8de 	bl	8005348 <dir_register>
 800618c:	4603      	mov	r3, r0
 800618e:	e000      	b.n	8006192 <f_open+0xc6>
 8006190:	2312      	movs	r3, #18
 8006192:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	f043 0308 	orr.w	r3, r3, #8
 800619c:	71fb      	strb	r3, [r7, #7]
 800619e:	e010      	b.n	80061c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80061a0:	7fbb      	ldrb	r3, [r7, #30]
 80061a2:	f003 0311 	and.w	r3, r3, #17
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <f_open+0xe6>
					res = FR_DENIED;
 80061aa:	2307      	movs	r3, #7
 80061ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80061b0:	e007      	b.n	80061c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <f_open+0xf6>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80061c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d168      	bne.n	800629c <f_open+0x1d0>
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d063      	beq.n	800629c <f_open+0x1d0>
				dw = GET_FATTIME();
 80061d4:	f7fd f83a 	bl	800324c <get_fattime>
 80061d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	330e      	adds	r3, #14
 80061de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fd fe4b 	bl	8003e7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	3316      	adds	r3, #22
 80061ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd fe45 	bl	8003e7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	330b      	adds	r3, #11
 80061f6:	2220      	movs	r2, #32
 80061f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061fe:	4611      	mov	r1, r2
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fe1a 	bl	8004e3a <ld_clust>
 8006206:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800620c:	2200      	movs	r2, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fe32 	bl	8004e78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	331c      	adds	r3, #28
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f7fd fe2e 	bl	8003e7c <st_dword>
					fs->wflag = 1;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2201      	movs	r2, #1
 8006224:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006228:	2b00      	cmp	r3, #0
 800622a:	d037      	beq.n	800629c <f_open+0x1d0>
						dw = fs->winsect;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006230:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006232:	f107 0318 	add.w	r3, r7, #24
 8006236:	2200      	movs	r2, #0
 8006238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fb22 	bl	8004884 <remove_chain>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006246:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800624a:	2b00      	cmp	r3, #0
 800624c:	d126      	bne.n	800629c <f_open+0x1d0>
							res = move_window(fs, dw);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe f86c 	bl	8004330 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006262:	3a01      	subs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]
 8006266:	e019      	b.n	800629c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006268:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800626c:	2b00      	cmp	r3, #0
 800626e:	d115      	bne.n	800629c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006270:	7fbb      	ldrb	r3, [r7, #30]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <f_open+0x1b6>
					res = FR_NO_FILE;
 800627a:	2304      	movs	r3, #4
 800627c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006280:	e00c      	b.n	800629c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <f_open+0x1d0>
 800628c:	7fbb      	ldrb	r3, [r7, #30]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <f_open+0x1d0>
						res = FR_DENIED;
 8006296:	2307      	movs	r3, #7
 8006298:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800629c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d126      	bne.n	80062f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80062be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	bf8c      	ite	hi
 80062ca:	2301      	movhi	r3, #1
 80062cc:	2300      	movls	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	f107 0318 	add.w	r3, r7, #24
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fd fef7 	bl	80040cc <inc_lock>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <f_open+0x226>
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80062f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 80a3 	bne.w	8006442 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fd99 	bl	8004e3a <ld_clust>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	331c      	adds	r3, #28
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd fd74 	bl	8003e00 <ld_dword>
 8006318:	4602      	mov	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	88da      	ldrh	r2, [r3, #6]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	79fa      	ldrb	r2, [r7, #7]
 8006336:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3330      	adds	r3, #48	@ 0x30
 800634e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f7fd fdde 	bl	8003f16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d06e      	beq.n	8006442 <f_open+0x376>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d06a      	beq.n	8006442 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	895b      	ldrh	r3, [r3, #10]
 8006378:	461a      	mov	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	899b      	ldrh	r3, [r3, #12]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006390:	e016      	b.n	80063c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe f887 	bl	80044aa <get_fat>
 800639c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800639e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d802      	bhi.n	80063aa <f_open+0x2de>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80063aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063b0:	d102      	bne.n	80063b8 <f_open+0x2ec>
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <f_open+0x304>
 80063c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d8e0      	bhi.n	8006392 <f_open+0x2c6>
				}
				fp->clust = clst;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80063d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d131      	bne.n	8006442 <f_open+0x376>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	899b      	ldrh	r3, [r3, #12]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80063ea:	fb01 f202 	mul.w	r2, r1, r2
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d026      	beq.n	8006442 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe f837 	bl	800446c <clust2sect>
 80063fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <f_open+0x342>
						res = FR_INT_ERR;
 8006406:	2302      	movs	r3, #2
 8006408:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800640c:	e019      	b.n	8006442 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	899b      	ldrh	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006416:	fbb3 f2f2 	udiv	r2, r3, r2
 800641a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	7858      	ldrb	r0, [r3, #1]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	2301      	movs	r3, #1
 8006432:	f7fd fc6f 	bl	8003d14 <disk_read>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <f_open+0x376>
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006442:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <f_open+0x384>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006450:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006454:	4618      	mov	r0, r3
 8006456:	3768      	adds	r7, #104	@ 0x68
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	@ 0x38
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f107 0214 	add.w	r2, r7, #20
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fda9 	bl	8005fd4 <validate>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800648c:	2b00      	cmp	r3, #0
 800648e:	d107      	bne.n	80064a0 <f_read+0x44>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	7d5b      	ldrb	r3, [r3, #21]
 8006494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006498:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <f_read+0x4a>
 80064a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064a4:	e135      	b.n	8006712 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	7d1b      	ldrb	r3, [r3, #20]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <f_read+0x5a>
 80064b2:	2307      	movs	r3, #7
 80064b4:	e12d      	b.n	8006712 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f240 811e 	bls.w	8006708 <f_read+0x2ac>
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80064d0:	e11a      	b.n	8006708 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	8992      	ldrh	r2, [r2, #12]
 80064da:	fbb3 f1f2 	udiv	r1, r3, r2
 80064de:	fb01 f202 	mul.w	r2, r1, r2
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 80d5 	bne.w	8006694 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	8992      	ldrh	r2, [r2, #12]
 80064f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	8952      	ldrh	r2, [r2, #10]
 80064fa:	3a01      	subs	r2, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12f      	bne.n	8006566 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30
 8006514:	e013      	b.n	800653e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7fe faaa 	bl	8004a7e <clmt_clust>
 800652a:	6338      	str	r0, [r7, #48]	@ 0x30
 800652c:	e007      	b.n	800653e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fd ffb7 	bl	80044aa <get_fat>
 800653c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2b01      	cmp	r3, #1
 8006542:	d804      	bhi.n	800654e <f_read+0xf2>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2202      	movs	r2, #2
 8006548:	755a      	strb	r2, [r3, #21]
 800654a:	2302      	movs	r3, #2
 800654c:	e0e1      	b.n	8006712 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006554:	d104      	bne.n	8006560 <f_read+0x104>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	755a      	strb	r2, [r3, #21]
 800655c:	2301      	movs	r3, #1
 800655e:	e0d8      	b.n	8006712 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006564:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fd ff7c 	bl	800446c <clust2sect>
 8006574:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <f_read+0x12a>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2202      	movs	r2, #2
 8006580:	755a      	strb	r2, [r3, #21]
 8006582:	2302      	movs	r3, #2
 8006584:	e0c5      	b.n	8006712 <f_read+0x2b6>
			sect += csect;
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	899b      	ldrh	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	fbb3 f3f2 	udiv	r3, r3, r2
 800659a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d041      	beq.n	8006626 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	4413      	add	r3, r2
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	8952      	ldrh	r2, [r2, #10]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d905      	bls.n	80065bc <f_read+0x160>
					cc = fs->csize - csect;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	895b      	ldrh	r3, [r3, #10]
 80065b4:	461a      	mov	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	7858      	ldrb	r0, [r3, #1]
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065c6:	f7fd fba5 	bl	8003d14 <disk_read>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <f_read+0x17e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	755a      	strb	r2, [r3, #21]
 80065d6:	2301      	movs	r3, #1
 80065d8:	e09b      	b.n	8006712 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da18      	bge.n	8006616 <f_read+0x1ba>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d911      	bls.n	8006616 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	8992      	ldrh	r2, [r2, #12]
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006604:	18d0      	adds	r0, r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	899b      	ldrh	r3, [r3, #12]
 8006610:	461a      	mov	r2, r3
 8006612:	f7fd fc5f 	bl	8003ed4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	899b      	ldrh	r3, [r3, #12]
 800661a:	461a      	mov	r2, r3
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006624:	e05c      	b.n	80066e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d02e      	beq.n	800668e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7d1b      	ldrb	r3, [r3, #20]
 8006634:	b25b      	sxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	da18      	bge.n	800666c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	7858      	ldrb	r0, [r3, #1]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	2301      	movs	r3, #1
 800664a:	f7fd fb83 	bl	8003d54 <disk_write>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <f_read+0x202>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	755a      	strb	r2, [r3, #21]
 800665a:	2301      	movs	r3, #1
 800665c:	e059      	b.n	8006712 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	7d1b      	ldrb	r3, [r3, #20]
 8006662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	7858      	ldrb	r0, [r3, #1]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006676:	2301      	movs	r3, #1
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	f7fd fb4b 	bl	8003d14 <disk_read>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <f_read+0x232>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	755a      	strb	r2, [r3, #21]
 800668a:	2301      	movs	r3, #1
 800668c:	e041      	b.n	8006712 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	899b      	ldrh	r3, [r3, #12]
 8006698:	4618      	mov	r0, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	8992      	ldrh	r2, [r2, #12]
 80066a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80066a6:	fb01 f202 	mul.w	r2, r1, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	1ac3      	subs	r3, r0, r3
 80066ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80066b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d901      	bls.n	80066bc <f_read+0x260>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	8992      	ldrh	r2, [r2, #12]
 80066ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80066ce:	fb00 f202 	mul.w	r2, r0, r2
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	440b      	add	r3, r1
 80066d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d8:	4619      	mov	r1, r3
 80066da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066dc:	f7fd fbfa 	bl	8003ed4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80066e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	4413      	add	r3, r2
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	441a      	add	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fa:	441a      	add	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f aee1 	bne.w	80064d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3738      	adds	r7, #56	@ 0x38
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b08c      	sub	sp, #48	@ 0x30
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f107 0210 	add.w	r2, r7, #16
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fc4a 	bl	8005fd4 <validate>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006746:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800674a:	2b00      	cmp	r3, #0
 800674c:	d107      	bne.n	800675e <f_write+0x44>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	7d5b      	ldrb	r3, [r3, #21]
 8006752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <f_write+0x4a>
 800675e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006762:	e16a      	b.n	8006a3a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7d1b      	ldrb	r3, [r3, #20]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <f_write+0x5a>
 8006770:	2307      	movs	r3, #7
 8006772:	e162      	b.n	8006a3a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	441a      	add	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	429a      	cmp	r2, r3
 8006782:	f080 814c 	bcs.w	8006a1e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	43db      	mvns	r3, r3
 800678c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800678e:	e146      	b.n	8006a1e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	8992      	ldrh	r2, [r2, #12]
 8006798:	fbb3 f1f2 	udiv	r1, r3, r2
 800679c:	fb01 f202 	mul.w	r2, r1, r2
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80f1 	bne.w	800698a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	8992      	ldrh	r2, [r2, #12]
 80067b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	8952      	ldrh	r2, [r2, #10]
 80067b8:	3a01      	subs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d143      	bne.n	800684c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11a      	bne.n	800680e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe f8b6 	bl	800494e <create_chain>
 80067e2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80067e4:	e013      	b.n	800680e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4619      	mov	r1, r3
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7fe f942 	bl	8004a7e <clmt_clust>
 80067fa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80067fc:	e007      	b.n	800680e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe f8a1 	bl	800494e <create_chain>
 800680c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8109 	beq.w	8006a28 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	2b01      	cmp	r3, #1
 800681a:	d104      	bne.n	8006826 <f_write+0x10c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2202      	movs	r2, #2
 8006820:	755a      	strb	r2, [r3, #21]
 8006822:	2302      	movs	r3, #2
 8006824:	e109      	b.n	8006a3a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800682c:	d104      	bne.n	8006838 <f_write+0x11e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	755a      	strb	r2, [r3, #21]
 8006834:	2301      	movs	r3, #1
 8006836:	e100      	b.n	8006a3a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <f_write+0x132>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800684a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	7d1b      	ldrb	r3, [r3, #20]
 8006850:	b25b      	sxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	da18      	bge.n	8006888 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	7858      	ldrb	r0, [r3, #1]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1a      	ldr	r2, [r3, #32]
 8006864:	2301      	movs	r3, #1
 8006866:	f7fd fa75 	bl	8003d54 <disk_write>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <f_write+0x160>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	755a      	strb	r2, [r3, #21]
 8006876:	2301      	movs	r3, #1
 8006878:	e0df      	b.n	8006a3a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	7d1b      	ldrb	r3, [r3, #20]
 800687e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fd fdeb 	bl	800446c <clust2sect>
 8006896:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <f_write+0x18e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2202      	movs	r2, #2
 80068a2:	755a      	strb	r2, [r3, #21]
 80068a4:	2302      	movs	r3, #2
 80068a6:	e0c8      	b.n	8006a3a <f_write+0x320>
			sect += csect;
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	4413      	add	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	899b      	ldrh	r3, [r3, #12]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d043      	beq.n	800694c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	8952      	ldrh	r2, [r2, #10]
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d905      	bls.n	80068de <f_write+0x1c4>
					cc = fs->csize - csect;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	895b      	ldrh	r3, [r3, #10]
 80068d6:	461a      	mov	r2, r3
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	7858      	ldrb	r0, [r3, #1]
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	69f9      	ldr	r1, [r7, #28]
 80068e8:	f7fd fa34 	bl	8003d54 <disk_write>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <f_write+0x1e2>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	755a      	strb	r2, [r3, #21]
 80068f8:	2301      	movs	r3, #1
 80068fa:	e09e      	b.n	8006a3a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	429a      	cmp	r2, r3
 8006908:	d918      	bls.n	800693c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	8992      	ldrh	r2, [r2, #12]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	18d1      	adds	r1, r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	899b      	ldrh	r3, [r3, #12]
 8006928:	461a      	mov	r2, r3
 800692a:	f7fd fad3 	bl	8003ed4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	7d1b      	ldrb	r3, [r3, #20]
 8006932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	899b      	ldrh	r3, [r3, #12]
 8006940:	461a      	mov	r2, r3
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800694a:	e04b      	b.n	80069e4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	429a      	cmp	r2, r3
 8006954:	d016      	beq.n	8006984 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800695e:	429a      	cmp	r2, r3
 8006960:	d210      	bcs.n	8006984 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	7858      	ldrb	r0, [r3, #1]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800696c:	2301      	movs	r3, #1
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f7fd f9d0 	bl	8003d14 <disk_read>
 8006974:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	755a      	strb	r2, [r3, #21]
 8006980:	2301      	movs	r3, #1
 8006982:	e05a      	b.n	8006a3a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	899b      	ldrh	r3, [r3, #12]
 800698e:	4618      	mov	r0, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	8992      	ldrh	r2, [r2, #12]
 8006998:	fbb3 f1f2 	udiv	r1, r3, r2
 800699c:	fb01 f202 	mul.w	r2, r1, r2
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	1ac3      	subs	r3, r0, r3
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80069a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d901      	bls.n	80069b2 <f_write+0x298>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	8992      	ldrh	r2, [r2, #12]
 80069c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80069c4:	fb00 f202 	mul.w	r2, r0, r2
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	440b      	add	r3, r1
 80069cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ce:	69f9      	ldr	r1, [r7, #28]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fa7f 	bl	8003ed4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	7d1b      	ldrb	r3, [r3, #20]
 80069da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	619a      	str	r2, [r3, #24]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	bf38      	it	cc
 8006a04:	461a      	movcc	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	441a      	add	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f47f aeb5 	bne.w	8006790 <f_write+0x76>
 8006a26:	e000      	b.n	8006a2a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	7d1b      	ldrb	r3, [r3, #20]
 8006a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3730      	adds	r7, #48	@ 0x30
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f107 0208 	add.w	r2, r7, #8
 8006a50:	4611      	mov	r1, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fabe 	bl	8005fd4 <validate>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d168      	bne.n	8006b34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7d1b      	ldrb	r3, [r3, #20]
 8006a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d062      	beq.n	8006b34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7d1b      	ldrb	r3, [r3, #20]
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da15      	bge.n	8006aa4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7858      	ldrb	r0, [r3, #1]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	2301      	movs	r3, #1
 8006a88:	f7fd f964 	bl	8003d54 <disk_write>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <f_sync+0x54>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e04f      	b.n	8006b36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7d1b      	ldrb	r3, [r3, #20]
 8006a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006aa4:	f7fc fbd2 	bl	800324c <get_fattime>
 8006aa8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fd fc3c 	bl	8004330 <move_window>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d138      	bne.n	8006b34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	330b      	adds	r3, #11
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	330b      	adds	r3, #11
 8006ad2:	f042 0220 	orr.w	r2, r2, #32
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68f9      	ldr	r1, [r7, #12]
 8006ae6:	f7fe f9c7 	bl	8004e78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f103 021c 	add.w	r2, r3, #28
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fd f9c0 	bl	8003e7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3316      	adds	r3, #22
 8006b00:	6939      	ldr	r1, [r7, #16]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fd f9ba 	bl	8003e7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3312      	adds	r3, #18
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd f999 	bl	8003e46 <st_word>
					fs->wflag = 1;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2201      	movs	r2, #1
 8006b18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fd fc35 	bl	800438c <sync_fs>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7d1b      	ldrb	r3, [r3, #20]
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff7b 	bl	8006a42 <f_sync>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d118      	bne.n	8006b88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f107 0208 	add.w	r2, r7, #8
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fa38 	bl	8005fd4 <validate>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fd fb38 	bl	80041e8 <dec_lock>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006baa:	4b1f      	ldr	r3, [pc, #124]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bac:	7a5b      	ldrb	r3, [r3, #9]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d131      	bne.n	8006c18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bb6:	7a5b      	ldrb	r3, [r3, #9]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006bc2:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bc4:	7a5b      	ldrb	r3, [r3, #9]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4a17      	ldr	r2, [pc, #92]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006bd2:	4b15      	ldr	r3, [pc, #84]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bd4:	7a5b      	ldrb	r3, [r3, #9]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b13      	ldr	r3, [pc, #76]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	79fa      	ldrb	r2, [r7, #7]
 8006be0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006be2:	4b11      	ldr	r3, [pc, #68]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006be4:	7a5b      	ldrb	r3, [r3, #9]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	b2d1      	uxtb	r1, r2
 8006bec:	4a0e      	ldr	r2, [pc, #56]	@ (8006c28 <FATFS_LinkDriverEx+0x94>)
 8006bee:	7251      	strb	r1, [r2, #9]
 8006bf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006bf2:	7dbb      	ldrb	r3, [r7, #22]
 8006bf4:	3330      	adds	r3, #48	@ 0x30
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	223a      	movs	r2, #58	@ 0x3a
 8006c02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3302      	adds	r3, #2
 8006c08:	222f      	movs	r2, #47	@ 0x2f
 8006c0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3303      	adds	r3, #3
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	200004d0 	.word	0x200004d0

08006c2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c36:	2200      	movs	r2, #0
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff ffaa 	bl	8006b94 <FATFS_LinkDriverEx>
 8006c40:	4603      	mov	r3, r0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c5c:	d802      	bhi.n	8006c64 <ff_convert+0x18>
		c = chr;
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	81fb      	strh	r3, [r7, #14]
 8006c62:	e025      	b.n	8006cb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	2bff      	cmp	r3, #255	@ 0xff
 8006c6e:	d805      	bhi.n	8006c7c <ff_convert+0x30>
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	3b80      	subs	r3, #128	@ 0x80
 8006c74:	4a12      	ldr	r2, [pc, #72]	@ (8006cc0 <ff_convert+0x74>)
 8006c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c7a:	e000      	b.n	8006c7e <ff_convert+0x32>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	81fb      	strh	r3, [r7, #14]
 8006c80:	e016      	b.n	8006cb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006c82:	2300      	movs	r3, #0
 8006c84:	81fb      	strh	r3, [r7, #14]
 8006c86:	e009      	b.n	8006c9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006c88:	89fb      	ldrh	r3, [r7, #14]
 8006c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc0 <ff_convert+0x74>)
 8006c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d006      	beq.n	8006ca4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006c96:	89fb      	ldrh	r3, [r7, #14]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	81fb      	strh	r3, [r7, #14]
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ca0:	d9f2      	bls.n	8006c88 <ff_convert+0x3c>
 8006ca2:	e000      	b.n	8006ca6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006ca4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006ca6:	89fb      	ldrh	r3, [r7, #14]
 8006ca8:	3380      	adds	r3, #128	@ 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006cb0:	89fb      	ldrh	r3, [r7, #14]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	08008514 	.word	0x08008514

08006cc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd4:	d201      	bcs.n	8006cda <ff_wtoupper+0x16>
 8006cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd0 <ff_wtoupper+0x10c>)
 8006cd8:	e000      	b.n	8006cdc <ff_wtoupper+0x18>
 8006cda:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd4 <ff_wtoupper+0x110>)
 8006cdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	1c9a      	adds	r2, r3, #2
 8006ce2:	617a      	str	r2, [r7, #20]
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006ce8:	8a7b      	ldrh	r3, [r7, #18]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d068      	beq.n	8006dc0 <ff_wtoupper+0xfc>
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	8a7b      	ldrh	r3, [r7, #18]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d364      	bcc.n	8006dc0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	617a      	str	r2, [r7, #20]
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	823b      	strh	r3, [r7, #16]
 8006d00:	8a3b      	ldrh	r3, [r7, #16]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	81fb      	strh	r3, [r7, #14]
 8006d06:	8a3b      	ldrh	r3, [r7, #16]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006d0c:	88fa      	ldrh	r2, [r7, #6]
 8006d0e:	8a79      	ldrh	r1, [r7, #18]
 8006d10:	8a3b      	ldrh	r3, [r7, #16]
 8006d12:	440b      	add	r3, r1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	da49      	bge.n	8006dac <ff_wtoupper+0xe8>
			switch (cmd) {
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d84f      	bhi.n	8006dbe <ff_wtoupper+0xfa>
 8006d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <ff_wtoupper+0x60>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d5b 	.word	0x08006d5b
 8006d2c:	08006d71 	.word	0x08006d71
 8006d30:	08006d79 	.word	0x08006d79
 8006d34:	08006d81 	.word	0x08006d81
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d91 	.word	0x08006d91
 8006d40:	08006d99 	.word	0x08006d99
 8006d44:	08006da1 	.word	0x08006da1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006d48:	88fa      	ldrh	r2, [r7, #6]
 8006d4a:	8a7b      	ldrh	r3, [r7, #18]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	80fb      	strh	r3, [r7, #6]
 8006d58:	e027      	b.n	8006daa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	8a7b      	ldrh	r3, [r7, #18]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	88fa      	ldrh	r2, [r7, #6]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	80fb      	strh	r3, [r7, #6]
 8006d6e:	e01c      	b.n	8006daa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	3b10      	subs	r3, #16
 8006d74:	80fb      	strh	r3, [r7, #6]
 8006d76:	e018      	b.n	8006daa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	3b20      	subs	r3, #32
 8006d7c:	80fb      	strh	r3, [r7, #6]
 8006d7e:	e014      	b.n	8006daa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	3b30      	subs	r3, #48	@ 0x30
 8006d84:	80fb      	strh	r3, [r7, #6]
 8006d86:	e010      	b.n	8006daa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	3b1a      	subs	r3, #26
 8006d8c:	80fb      	strh	r3, [r7, #6]
 8006d8e:	e00c      	b.n	8006daa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	3308      	adds	r3, #8
 8006d94:	80fb      	strh	r3, [r7, #6]
 8006d96:	e008      	b.n	8006daa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	3b50      	subs	r3, #80	@ 0x50
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	e004      	b.n	8006daa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006da6:	80fb      	strh	r3, [r7, #6]
 8006da8:	bf00      	nop
			}
			break;
 8006daa:	e008      	b.n	8006dbe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006dac:	89fb      	ldrh	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d195      	bne.n	8006cde <ff_wtoupper+0x1a>
 8006db2:	8a3b      	ldrh	r3, [r7, #16]
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4413      	add	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006dbc:	e78f      	b.n	8006cde <ff_wtoupper+0x1a>
			break;
 8006dbe:	bf00      	nop
	}

	return chr;
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	08008614 	.word	0x08008614
 8006dd4:	08008808 	.word	0x08008808

08006dd8 <siprintf>:
 8006dd8:	b40e      	push	{r1, r2, r3}
 8006dda:	b500      	push	{lr}
 8006ddc:	b09c      	sub	sp, #112	@ 0x70
 8006dde:	ab1d      	add	r3, sp, #116	@ 0x74
 8006de0:	9002      	str	r0, [sp, #8]
 8006de2:	9006      	str	r0, [sp, #24]
 8006de4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006de8:	4809      	ldr	r0, [pc, #36]	@ (8006e10 <siprintf+0x38>)
 8006dea:	9107      	str	r1, [sp, #28]
 8006dec:	9104      	str	r1, [sp, #16]
 8006dee:	4909      	ldr	r1, [pc, #36]	@ (8006e14 <siprintf+0x3c>)
 8006df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	a902      	add	r1, sp, #8
 8006dfc:	f000 f970 	bl	80070e0 <_svfiprintf_r>
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	b01c      	add	sp, #112	@ 0x70
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	20000030 	.word	0x20000030
 8006e14:	ffff0208 	.word	0xffff0208

08006e18 <std>:
 8006e18:	2300      	movs	r3, #0
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e26:	6083      	str	r3, [r0, #8]
 8006e28:	8181      	strh	r1, [r0, #12]
 8006e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e2c:	81c2      	strh	r2, [r0, #14]
 8006e2e:	6183      	str	r3, [r0, #24]
 8006e30:	4619      	mov	r1, r3
 8006e32:	2208      	movs	r2, #8
 8006e34:	305c      	adds	r0, #92	@ 0x5c
 8006e36:	f000 f8c3 	bl	8006fc0 <memset>
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x58>)
 8006e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <std+0x5c>)
 8006e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x60>)
 8006e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <std+0x64>)
 8006e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <std+0x68>)
 8006e4c:	6224      	str	r4, [r4, #32]
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d006      	beq.n	8006e60 <std+0x48>
 8006e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e56:	4294      	cmp	r4, r2
 8006e58:	d002      	beq.n	8006e60 <std+0x48>
 8006e5a:	33d0      	adds	r3, #208	@ 0xd0
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d105      	bne.n	8006e6c <std+0x54>
 8006e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f000 b8dc 	b.w	8007024 <__retarget_lock_init_recursive>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08007b2d 	.word	0x08007b2d
 8006e74:	08007b4f 	.word	0x08007b4f
 8006e78:	08007b87 	.word	0x08007b87
 8006e7c:	08007bab 	.word	0x08007bab
 8006e80:	200004dc 	.word	0x200004dc

08006e84 <stdio_exit_handler>:
 8006e84:	4a02      	ldr	r2, [pc, #8]	@ (8006e90 <stdio_exit_handler+0xc>)
 8006e86:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <stdio_exit_handler+0x10>)
 8006e88:	4803      	ldr	r0, [pc, #12]	@ (8006e98 <stdio_exit_handler+0x14>)
 8006e8a:	f000 b869 	b.w	8006f60 <_fwalk_sglue>
 8006e8e:	bf00      	nop
 8006e90:	20000024 	.word	0x20000024
 8006e94:	08007ac5 	.word	0x08007ac5
 8006e98:	20000034 	.word	0x20000034

08006e9c <cleanup_stdio>:
 8006e9c:	6841      	ldr	r1, [r0, #4]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <cleanup_stdio+0x34>)
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	d001      	beq.n	8006eac <cleanup_stdio+0x10>
 8006ea8:	f000 fe0c 	bl	8007ac4 <_fflush_r>
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <cleanup_stdio+0x38>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <cleanup_stdio+0x1e>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fe05 	bl	8007ac4 <_fflush_r>
 8006eba:	68e1      	ldr	r1, [r4, #12]
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <cleanup_stdio+0x3c>)
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	d004      	beq.n	8006ecc <cleanup_stdio+0x30>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f000 bdfc 	b.w	8007ac4 <_fflush_r>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	200004dc 	.word	0x200004dc
 8006ed4:	20000544 	.word	0x20000544
 8006ed8:	200005ac 	.word	0x200005ac

08006edc <global_stdio_init.part.0>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <global_stdio_init.part.0+0x30>)
 8006ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8006f10 <global_stdio_init.part.0+0x34>)
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <global_stdio_init.part.0+0x38>)
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2104      	movs	r1, #4
 8006eec:	f7ff ff94 	bl	8006e18 <std>
 8006ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2109      	movs	r1, #9
 8006ef8:	f7ff ff8e 	bl	8006e18 <std>
 8006efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f00:	2202      	movs	r2, #2
 8006f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f06:	2112      	movs	r1, #18
 8006f08:	f7ff bf86 	b.w	8006e18 <std>
 8006f0c:	20000614 	.word	0x20000614
 8006f10:	200004dc 	.word	0x200004dc
 8006f14:	08006e85 	.word	0x08006e85

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	@ (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b884 	b.w	8007026 <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20000619 	.word	0x20000619

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	@ (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b87f 	b.w	8007028 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20000619 	.word	0x20000619

08006f30 <__sinit>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4604      	mov	r4, r0
 8006f34:	f7ff fff0 	bl	8006f18 <__sfp_lock_acquire>
 8006f38:	6a23      	ldr	r3, [r4, #32]
 8006f3a:	b11b      	cbz	r3, 8006f44 <__sinit+0x14>
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f40:	f7ff bff0 	b.w	8006f24 <__sfp_lock_release>
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <__sinit+0x28>)
 8006f46:	6223      	str	r3, [r4, #32]
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <__sinit+0x2c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f5      	bne.n	8006f3c <__sinit+0xc>
 8006f50:	f7ff ffc4 	bl	8006edc <global_stdio_init.part.0>
 8006f54:	e7f2      	b.n	8006f3c <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	08006e9d 	.word	0x08006e9d
 8006f5c:	20000614 	.word	0x20000614

08006f60 <_fwalk_sglue>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4607      	mov	r7, r0
 8006f66:	4688      	mov	r8, r1
 8006f68:	4614      	mov	r4, r2
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f70:	f1b9 0901 	subs.w	r9, r9, #1
 8006f74:	d505      	bpl.n	8006f82 <_fwalk_sglue+0x22>
 8006f76:	6824      	ldr	r4, [r4, #0]
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d1f7      	bne.n	8006f6c <_fwalk_sglue+0xc>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <_fwalk_sglue+0x38>
 8006f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <_fwalk_sglue+0x38>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c0      	blx	r8
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	@ 0x68
 8006f9a:	e7e9      	b.n	8006f70 <_fwalk_sglue+0x10>

08006f9c <iprintf>:
 8006f9c:	b40f      	push	{r0, r1, r2, r3}
 8006f9e:	b507      	push	{r0, r1, r2, lr}
 8006fa0:	4906      	ldr	r1, [pc, #24]	@ (8006fbc <iprintf+0x20>)
 8006fa2:	ab04      	add	r3, sp, #16
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006faa:	6881      	ldr	r1, [r0, #8]
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	f000 f9bd 	bl	800732c <_vfiprintf_r>
 8006fb2:	b003      	add	sp, #12
 8006fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb8:	b004      	add	sp, #16
 8006fba:	4770      	bx	lr
 8006fbc:	20000030 	.word	0x20000030

08006fc0 <memset>:
 8006fc0:	4402      	add	r2, r0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d100      	bne.n	8006fca <memset+0xa>
 8006fc8:	4770      	bx	lr
 8006fca:	f803 1b01 	strb.w	r1, [r3], #1
 8006fce:	e7f9      	b.n	8006fc4 <memset+0x4>

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	@ (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000030 	.word	0x20000030

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	@ (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	@ (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	@ (8007020 <__libc_init_array+0x44>)
 8006ff0:	f000 fff6 	bl	8007fe0 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	08008900 	.word	0x08008900
 8007018:	08008900 	.word	0x08008900
 800701c:	08008900 	.word	0x08008900
 8007020:	08008904 	.word	0x08008904

08007024 <__retarget_lock_init_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_acquire_recursive>:
 8007026:	4770      	bx	lr

08007028 <__retarget_lock_release_recursive>:
 8007028:	4770      	bx	lr

0800702a <__ssputs_r>:
 800702a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702e:	688e      	ldr	r6, [r1, #8]
 8007030:	461f      	mov	r7, r3
 8007032:	42be      	cmp	r6, r7
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	4682      	mov	sl, r0
 8007038:	460c      	mov	r4, r1
 800703a:	4690      	mov	r8, r2
 800703c:	d82d      	bhi.n	800709a <__ssputs_r+0x70>
 800703e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007042:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007046:	d026      	beq.n	8007096 <__ssputs_r+0x6c>
 8007048:	6965      	ldr	r5, [r4, #20]
 800704a:	6909      	ldr	r1, [r1, #16]
 800704c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007050:	eba3 0901 	sub.w	r9, r3, r1
 8007054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007058:	1c7b      	adds	r3, r7, #1
 800705a:	444b      	add	r3, r9
 800705c:	106d      	asrs	r5, r5, #1
 800705e:	429d      	cmp	r5, r3
 8007060:	bf38      	it	cc
 8007062:	461d      	movcc	r5, r3
 8007064:	0553      	lsls	r3, r2, #21
 8007066:	d527      	bpl.n	80070b8 <__ssputs_r+0x8e>
 8007068:	4629      	mov	r1, r5
 800706a:	f000 fa99 	bl	80075a0 <_malloc_r>
 800706e:	4606      	mov	r6, r0
 8007070:	b360      	cbz	r0, 80070cc <__ssputs_r+0xa2>
 8007072:	6921      	ldr	r1, [r4, #16]
 8007074:	464a      	mov	r2, r9
 8007076:	f000 ff53 	bl	8007f20 <memcpy>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6126      	str	r6, [r4, #16]
 8007088:	6165      	str	r5, [r4, #20]
 800708a:	444e      	add	r6, r9
 800708c:	eba5 0509 	sub.w	r5, r5, r9
 8007090:	6026      	str	r6, [r4, #0]
 8007092:	60a5      	str	r5, [r4, #8]
 8007094:	463e      	mov	r6, r7
 8007096:	42be      	cmp	r6, r7
 8007098:	d900      	bls.n	800709c <__ssputs_r+0x72>
 800709a:	463e      	mov	r6, r7
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	4632      	mov	r2, r6
 80070a0:	4641      	mov	r1, r8
 80070a2:	f000 feab 	bl	8007dfc <memmove>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	1b9b      	subs	r3, r3, r6
 80070aa:	60a3      	str	r3, [r4, #8]
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	4433      	add	r3, r6
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	2000      	movs	r0, #0
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	462a      	mov	r2, r5
 80070ba:	f000 fd7a 	bl	8007bb2 <_realloc_r>
 80070be:	4606      	mov	r6, r0
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d1e0      	bne.n	8007086 <__ssputs_r+0x5c>
 80070c4:	6921      	ldr	r1, [r4, #16]
 80070c6:	4650      	mov	r0, sl
 80070c8:	f000 ff38 	bl	8007f3c <_free_r>
 80070cc:	230c      	movs	r3, #12
 80070ce:	f8ca 3000 	str.w	r3, [sl]
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070de:	e7e9      	b.n	80070b4 <__ssputs_r+0x8a>

080070e0 <_svfiprintf_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	4698      	mov	r8, r3
 80070e6:	898b      	ldrh	r3, [r1, #12]
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	b09d      	sub	sp, #116	@ 0x74
 80070ec:	4607      	mov	r7, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	d510      	bpl.n	8007116 <_svfiprintf_r+0x36>
 80070f4:	690b      	ldr	r3, [r1, #16]
 80070f6:	b973      	cbnz	r3, 8007116 <_svfiprintf_r+0x36>
 80070f8:	2140      	movs	r1, #64	@ 0x40
 80070fa:	f000 fa51 	bl	80075a0 <_malloc_r>
 80070fe:	6028      	str	r0, [r5, #0]
 8007100:	6128      	str	r0, [r5, #16]
 8007102:	b930      	cbnz	r0, 8007112 <_svfiprintf_r+0x32>
 8007104:	230c      	movs	r3, #12
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800710c:	b01d      	add	sp, #116	@ 0x74
 800710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007112:	2340      	movs	r3, #64	@ 0x40
 8007114:	616b      	str	r3, [r5, #20]
 8007116:	2300      	movs	r3, #0
 8007118:	9309      	str	r3, [sp, #36]	@ 0x24
 800711a:	2320      	movs	r3, #32
 800711c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007120:	f8cd 800c 	str.w	r8, [sp, #12]
 8007124:	2330      	movs	r3, #48	@ 0x30
 8007126:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072c4 <_svfiprintf_r+0x1e4>
 800712a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800712e:	f04f 0901 	mov.w	r9, #1
 8007132:	4623      	mov	r3, r4
 8007134:	469a      	mov	sl, r3
 8007136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800713a:	b10a      	cbz	r2, 8007140 <_svfiprintf_r+0x60>
 800713c:	2a25      	cmp	r2, #37	@ 0x25
 800713e:	d1f9      	bne.n	8007134 <_svfiprintf_r+0x54>
 8007140:	ebba 0b04 	subs.w	fp, sl, r4
 8007144:	d00b      	beq.n	800715e <_svfiprintf_r+0x7e>
 8007146:	465b      	mov	r3, fp
 8007148:	4622      	mov	r2, r4
 800714a:	4629      	mov	r1, r5
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff ff6c 	bl	800702a <__ssputs_r>
 8007152:	3001      	adds	r0, #1
 8007154:	f000 80a7 	beq.w	80072a6 <_svfiprintf_r+0x1c6>
 8007158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800715a:	445a      	add	r2, fp
 800715c:	9209      	str	r2, [sp, #36]	@ 0x24
 800715e:	f89a 3000 	ldrb.w	r3, [sl]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 809f 	beq.w	80072a6 <_svfiprintf_r+0x1c6>
 8007168:	2300      	movs	r3, #0
 800716a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800716e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007172:	f10a 0a01 	add.w	sl, sl, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	9307      	str	r3, [sp, #28]
 800717a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800717e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007180:	4654      	mov	r4, sl
 8007182:	2205      	movs	r2, #5
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	484e      	ldr	r0, [pc, #312]	@ (80072c4 <_svfiprintf_r+0x1e4>)
 800718a:	f7f9 f849 	bl	8000220 <memchr>
 800718e:	9a04      	ldr	r2, [sp, #16]
 8007190:	b9d8      	cbnz	r0, 80071ca <_svfiprintf_r+0xea>
 8007192:	06d0      	lsls	r0, r2, #27
 8007194:	bf44      	itt	mi
 8007196:	2320      	movmi	r3, #32
 8007198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800719c:	0711      	lsls	r1, r2, #28
 800719e:	bf44      	itt	mi
 80071a0:	232b      	movmi	r3, #43	@ 0x2b
 80071a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a6:	f89a 3000 	ldrb.w	r3, [sl]
 80071aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ac:	d015      	beq.n	80071da <_svfiprintf_r+0xfa>
 80071ae:	9a07      	ldr	r2, [sp, #28]
 80071b0:	4654      	mov	r4, sl
 80071b2:	2000      	movs	r0, #0
 80071b4:	f04f 0c0a 	mov.w	ip, #10
 80071b8:	4621      	mov	r1, r4
 80071ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071be:	3b30      	subs	r3, #48	@ 0x30
 80071c0:	2b09      	cmp	r3, #9
 80071c2:	d94b      	bls.n	800725c <_svfiprintf_r+0x17c>
 80071c4:	b1b0      	cbz	r0, 80071f4 <_svfiprintf_r+0x114>
 80071c6:	9207      	str	r2, [sp, #28]
 80071c8:	e014      	b.n	80071f4 <_svfiprintf_r+0x114>
 80071ca:	eba0 0308 	sub.w	r3, r0, r8
 80071ce:	fa09 f303 	lsl.w	r3, r9, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	46a2      	mov	sl, r4
 80071d8:	e7d2      	b.n	8007180 <_svfiprintf_r+0xa0>
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	1d19      	adds	r1, r3, #4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	9103      	str	r1, [sp, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bfbb      	ittet	lt
 80071e6:	425b      	neglt	r3, r3
 80071e8:	f042 0202 	orrlt.w	r2, r2, #2
 80071ec:	9307      	strge	r3, [sp, #28]
 80071ee:	9307      	strlt	r3, [sp, #28]
 80071f0:	bfb8      	it	lt
 80071f2:	9204      	strlt	r2, [sp, #16]
 80071f4:	7823      	ldrb	r3, [r4, #0]
 80071f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80071f8:	d10a      	bne.n	8007210 <_svfiprintf_r+0x130>
 80071fa:	7863      	ldrb	r3, [r4, #1]
 80071fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fe:	d132      	bne.n	8007266 <_svfiprintf_r+0x186>
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	1d1a      	adds	r2, r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	9203      	str	r2, [sp, #12]
 8007208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800720c:	3402      	adds	r4, #2
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072d4 <_svfiprintf_r+0x1f4>
 8007214:	7821      	ldrb	r1, [r4, #0]
 8007216:	2203      	movs	r2, #3
 8007218:	4650      	mov	r0, sl
 800721a:	f7f9 f801 	bl	8000220 <memchr>
 800721e:	b138      	cbz	r0, 8007230 <_svfiprintf_r+0x150>
 8007220:	9b04      	ldr	r3, [sp, #16]
 8007222:	eba0 000a 	sub.w	r0, r0, sl
 8007226:	2240      	movs	r2, #64	@ 0x40
 8007228:	4082      	lsls	r2, r0
 800722a:	4313      	orrs	r3, r2
 800722c:	3401      	adds	r4, #1
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007234:	4824      	ldr	r0, [pc, #144]	@ (80072c8 <_svfiprintf_r+0x1e8>)
 8007236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800723a:	2206      	movs	r2, #6
 800723c:	f7f8 fff0 	bl	8000220 <memchr>
 8007240:	2800      	cmp	r0, #0
 8007242:	d036      	beq.n	80072b2 <_svfiprintf_r+0x1d2>
 8007244:	4b21      	ldr	r3, [pc, #132]	@ (80072cc <_svfiprintf_r+0x1ec>)
 8007246:	bb1b      	cbnz	r3, 8007290 <_svfiprintf_r+0x1b0>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	3307      	adds	r3, #7
 800724c:	f023 0307 	bic.w	r3, r3, #7
 8007250:	3308      	adds	r3, #8
 8007252:	9303      	str	r3, [sp, #12]
 8007254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007256:	4433      	add	r3, r6
 8007258:	9309      	str	r3, [sp, #36]	@ 0x24
 800725a:	e76a      	b.n	8007132 <_svfiprintf_r+0x52>
 800725c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007260:	460c      	mov	r4, r1
 8007262:	2001      	movs	r0, #1
 8007264:	e7a8      	b.n	80071b8 <_svfiprintf_r+0xd8>
 8007266:	2300      	movs	r3, #0
 8007268:	3401      	adds	r4, #1
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	4619      	mov	r1, r3
 800726e:	f04f 0c0a 	mov.w	ip, #10
 8007272:	4620      	mov	r0, r4
 8007274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007278:	3a30      	subs	r2, #48	@ 0x30
 800727a:	2a09      	cmp	r2, #9
 800727c:	d903      	bls.n	8007286 <_svfiprintf_r+0x1a6>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0c6      	beq.n	8007210 <_svfiprintf_r+0x130>
 8007282:	9105      	str	r1, [sp, #20]
 8007284:	e7c4      	b.n	8007210 <_svfiprintf_r+0x130>
 8007286:	fb0c 2101 	mla	r1, ip, r1, r2
 800728a:	4604      	mov	r4, r0
 800728c:	2301      	movs	r3, #1
 800728e:	e7f0      	b.n	8007272 <_svfiprintf_r+0x192>
 8007290:	ab03      	add	r3, sp, #12
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	462a      	mov	r2, r5
 8007296:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <_svfiprintf_r+0x1f0>)
 8007298:	a904      	add	r1, sp, #16
 800729a:	4638      	mov	r0, r7
 800729c:	f3af 8000 	nop.w
 80072a0:	1c42      	adds	r2, r0, #1
 80072a2:	4606      	mov	r6, r0
 80072a4:	d1d6      	bne.n	8007254 <_svfiprintf_r+0x174>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	065b      	lsls	r3, r3, #25
 80072aa:	f53f af2d 	bmi.w	8007108 <_svfiprintf_r+0x28>
 80072ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072b0:	e72c      	b.n	800710c <_svfiprintf_r+0x2c>
 80072b2:	ab03      	add	r3, sp, #12
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	462a      	mov	r2, r5
 80072b8:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <_svfiprintf_r+0x1f0>)
 80072ba:	a904      	add	r1, sp, #16
 80072bc:	4638      	mov	r0, r7
 80072be:	f000 fa5d 	bl	800777c <_printf_i>
 80072c2:	e7ed      	b.n	80072a0 <_svfiprintf_r+0x1c0>
 80072c4:	080088c4 	.word	0x080088c4
 80072c8:	080088ce 	.word	0x080088ce
 80072cc:	00000000 	.word	0x00000000
 80072d0:	0800702b 	.word	0x0800702b
 80072d4:	080088ca 	.word	0x080088ca

080072d8 <__sfputc_r>:
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	b410      	push	{r4}
 80072e0:	6093      	str	r3, [r2, #8]
 80072e2:	da08      	bge.n	80072f6 <__sfputc_r+0x1e>
 80072e4:	6994      	ldr	r4, [r2, #24]
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	db01      	blt.n	80072ee <__sfputc_r+0x16>
 80072ea:	290a      	cmp	r1, #10
 80072ec:	d103      	bne.n	80072f6 <__sfputc_r+0x1e>
 80072ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f2:	f000 bc8c 	b.w	8007c0e <__swbuf_r>
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	1c58      	adds	r0, r3, #1
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	7019      	strb	r1, [r3, #0]
 80072fe:	4608      	mov	r0, r1
 8007300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007304:	4770      	bx	lr

08007306 <__sfputs_r>:
 8007306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007308:	4606      	mov	r6, r0
 800730a:	460f      	mov	r7, r1
 800730c:	4614      	mov	r4, r2
 800730e:	18d5      	adds	r5, r2, r3
 8007310:	42ac      	cmp	r4, r5
 8007312:	d101      	bne.n	8007318 <__sfputs_r+0x12>
 8007314:	2000      	movs	r0, #0
 8007316:	e007      	b.n	8007328 <__sfputs_r+0x22>
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	463a      	mov	r2, r7
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff ffda 	bl	80072d8 <__sfputc_r>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d1f3      	bne.n	8007310 <__sfputs_r+0xa>
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800732c <_vfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	460d      	mov	r5, r1
 8007332:	b09d      	sub	sp, #116	@ 0x74
 8007334:	4614      	mov	r4, r2
 8007336:	4698      	mov	r8, r3
 8007338:	4606      	mov	r6, r0
 800733a:	b118      	cbz	r0, 8007344 <_vfiprintf_r+0x18>
 800733c:	6a03      	ldr	r3, [r0, #32]
 800733e:	b90b      	cbnz	r3, 8007344 <_vfiprintf_r+0x18>
 8007340:	f7ff fdf6 	bl	8006f30 <__sinit>
 8007344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007346:	07d9      	lsls	r1, r3, #31
 8007348:	d405      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 800734a:	89ab      	ldrh	r3, [r5, #12]
 800734c:	059a      	lsls	r2, r3, #22
 800734e:	d402      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 8007350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007352:	f7ff fe68 	bl	8007026 <__retarget_lock_acquire_recursive>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	071b      	lsls	r3, r3, #28
 800735a:	d501      	bpl.n	8007360 <_vfiprintf_r+0x34>
 800735c:	692b      	ldr	r3, [r5, #16]
 800735e:	b99b      	cbnz	r3, 8007388 <_vfiprintf_r+0x5c>
 8007360:	4629      	mov	r1, r5
 8007362:	4630      	mov	r0, r6
 8007364:	f000 fc92 	bl	8007c8c <__swsetup_r>
 8007368:	b170      	cbz	r0, 8007388 <_vfiprintf_r+0x5c>
 800736a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800736c:	07dc      	lsls	r4, r3, #31
 800736e:	d504      	bpl.n	800737a <_vfiprintf_r+0x4e>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007374:	b01d      	add	sp, #116	@ 0x74
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	0598      	lsls	r0, r3, #22
 800737e:	d4f7      	bmi.n	8007370 <_vfiprintf_r+0x44>
 8007380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007382:	f7ff fe51 	bl	8007028 <__retarget_lock_release_recursive>
 8007386:	e7f3      	b.n	8007370 <_vfiprintf_r+0x44>
 8007388:	2300      	movs	r3, #0
 800738a:	9309      	str	r3, [sp, #36]	@ 0x24
 800738c:	2320      	movs	r3, #32
 800738e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007392:	f8cd 800c 	str.w	r8, [sp, #12]
 8007396:	2330      	movs	r3, #48	@ 0x30
 8007398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007548 <_vfiprintf_r+0x21c>
 800739c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073a0:	f04f 0901 	mov.w	r9, #1
 80073a4:	4623      	mov	r3, r4
 80073a6:	469a      	mov	sl, r3
 80073a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ac:	b10a      	cbz	r2, 80073b2 <_vfiprintf_r+0x86>
 80073ae:	2a25      	cmp	r2, #37	@ 0x25
 80073b0:	d1f9      	bne.n	80073a6 <_vfiprintf_r+0x7a>
 80073b2:	ebba 0b04 	subs.w	fp, sl, r4
 80073b6:	d00b      	beq.n	80073d0 <_vfiprintf_r+0xa4>
 80073b8:	465b      	mov	r3, fp
 80073ba:	4622      	mov	r2, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffa1 	bl	8007306 <__sfputs_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	f000 80a7 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073cc:	445a      	add	r2, fp
 80073ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80073d0:	f89a 3000 	ldrb.w	r3, [sl]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 809f 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073da:	2300      	movs	r3, #0
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e4:	f10a 0a01 	add.w	sl, sl, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073f2:	4654      	mov	r4, sl
 80073f4:	2205      	movs	r2, #5
 80073f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fa:	4853      	ldr	r0, [pc, #332]	@ (8007548 <_vfiprintf_r+0x21c>)
 80073fc:	f7f8 ff10 	bl	8000220 <memchr>
 8007400:	9a04      	ldr	r2, [sp, #16]
 8007402:	b9d8      	cbnz	r0, 800743c <_vfiprintf_r+0x110>
 8007404:	06d1      	lsls	r1, r2, #27
 8007406:	bf44      	itt	mi
 8007408:	2320      	movmi	r3, #32
 800740a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800740e:	0713      	lsls	r3, r2, #28
 8007410:	bf44      	itt	mi
 8007412:	232b      	movmi	r3, #43	@ 0x2b
 8007414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007418:	f89a 3000 	ldrb.w	r3, [sl]
 800741c:	2b2a      	cmp	r3, #42	@ 0x2a
 800741e:	d015      	beq.n	800744c <_vfiprintf_r+0x120>
 8007420:	9a07      	ldr	r2, [sp, #28]
 8007422:	4654      	mov	r4, sl
 8007424:	2000      	movs	r0, #0
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	4621      	mov	r1, r4
 800742c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007430:	3b30      	subs	r3, #48	@ 0x30
 8007432:	2b09      	cmp	r3, #9
 8007434:	d94b      	bls.n	80074ce <_vfiprintf_r+0x1a2>
 8007436:	b1b0      	cbz	r0, 8007466 <_vfiprintf_r+0x13a>
 8007438:	9207      	str	r2, [sp, #28]
 800743a:	e014      	b.n	8007466 <_vfiprintf_r+0x13a>
 800743c:	eba0 0308 	sub.w	r3, r0, r8
 8007440:	fa09 f303 	lsl.w	r3, r9, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	46a2      	mov	sl, r4
 800744a:	e7d2      	b.n	80073f2 <_vfiprintf_r+0xc6>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d19      	adds	r1, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbb      	ittet	lt
 8007458:	425b      	neglt	r3, r3
 800745a:	f042 0202 	orrlt.w	r2, r2, #2
 800745e:	9307      	strge	r3, [sp, #28]
 8007460:	9307      	strlt	r3, [sp, #28]
 8007462:	bfb8      	it	lt
 8007464:	9204      	strlt	r2, [sp, #16]
 8007466:	7823      	ldrb	r3, [r4, #0]
 8007468:	2b2e      	cmp	r3, #46	@ 0x2e
 800746a:	d10a      	bne.n	8007482 <_vfiprintf_r+0x156>
 800746c:	7863      	ldrb	r3, [r4, #1]
 800746e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007470:	d132      	bne.n	80074d8 <_vfiprintf_r+0x1ac>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	9203      	str	r2, [sp, #12]
 800747a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800747e:	3402      	adds	r4, #2
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007558 <_vfiprintf_r+0x22c>
 8007486:	7821      	ldrb	r1, [r4, #0]
 8007488:	2203      	movs	r2, #3
 800748a:	4650      	mov	r0, sl
 800748c:	f7f8 fec8 	bl	8000220 <memchr>
 8007490:	b138      	cbz	r0, 80074a2 <_vfiprintf_r+0x176>
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	eba0 000a 	sub.w	r0, r0, sl
 8007498:	2240      	movs	r2, #64	@ 0x40
 800749a:	4082      	lsls	r2, r0
 800749c:	4313      	orrs	r3, r2
 800749e:	3401      	adds	r4, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a6:	4829      	ldr	r0, [pc, #164]	@ (800754c <_vfiprintf_r+0x220>)
 80074a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ac:	2206      	movs	r2, #6
 80074ae:	f7f8 feb7 	bl	8000220 <memchr>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d03f      	beq.n	8007536 <_vfiprintf_r+0x20a>
 80074b6:	4b26      	ldr	r3, [pc, #152]	@ (8007550 <_vfiprintf_r+0x224>)
 80074b8:	bb1b      	cbnz	r3, 8007502 <_vfiprintf_r+0x1d6>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	3307      	adds	r3, #7
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	3308      	adds	r3, #8
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	443b      	add	r3, r7
 80074ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80074cc:	e76a      	b.n	80073a4 <_vfiprintf_r+0x78>
 80074ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d2:	460c      	mov	r4, r1
 80074d4:	2001      	movs	r0, #1
 80074d6:	e7a8      	b.n	800742a <_vfiprintf_r+0xfe>
 80074d8:	2300      	movs	r3, #0
 80074da:	3401      	adds	r4, #1
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 0c0a 	mov.w	ip, #10
 80074e4:	4620      	mov	r0, r4
 80074e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ea:	3a30      	subs	r2, #48	@ 0x30
 80074ec:	2a09      	cmp	r2, #9
 80074ee:	d903      	bls.n	80074f8 <_vfiprintf_r+0x1cc>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0c6      	beq.n	8007482 <_vfiprintf_r+0x156>
 80074f4:	9105      	str	r1, [sp, #20]
 80074f6:	e7c4      	b.n	8007482 <_vfiprintf_r+0x156>
 80074f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fc:	4604      	mov	r4, r0
 80074fe:	2301      	movs	r3, #1
 8007500:	e7f0      	b.n	80074e4 <_vfiprintf_r+0x1b8>
 8007502:	ab03      	add	r3, sp, #12
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	462a      	mov	r2, r5
 8007508:	4b12      	ldr	r3, [pc, #72]	@ (8007554 <_vfiprintf_r+0x228>)
 800750a:	a904      	add	r1, sp, #16
 800750c:	4630      	mov	r0, r6
 800750e:	f3af 8000 	nop.w
 8007512:	4607      	mov	r7, r0
 8007514:	1c78      	adds	r0, r7, #1
 8007516:	d1d6      	bne.n	80074c6 <_vfiprintf_r+0x19a>
 8007518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 8007524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007526:	f7ff fd7f 	bl	8007028 <__retarget_lock_release_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	065b      	lsls	r3, r3, #25
 800752e:	f53f af1f 	bmi.w	8007370 <_vfiprintf_r+0x44>
 8007532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007534:	e71e      	b.n	8007374 <_vfiprintf_r+0x48>
 8007536:	ab03      	add	r3, sp, #12
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	462a      	mov	r2, r5
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <_vfiprintf_r+0x228>)
 800753e:	a904      	add	r1, sp, #16
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f91b 	bl	800777c <_printf_i>
 8007546:	e7e4      	b.n	8007512 <_vfiprintf_r+0x1e6>
 8007548:	080088c4 	.word	0x080088c4
 800754c:	080088ce 	.word	0x080088ce
 8007550:	00000000 	.word	0x00000000
 8007554:	08007307 	.word	0x08007307
 8007558:	080088ca 	.word	0x080088ca

0800755c <sbrk_aligned>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4e0f      	ldr	r6, [pc, #60]	@ (800759c <sbrk_aligned+0x40>)
 8007560:	460c      	mov	r4, r1
 8007562:	6831      	ldr	r1, [r6, #0]
 8007564:	4605      	mov	r5, r0
 8007566:	b911      	cbnz	r1, 800756e <sbrk_aligned+0x12>
 8007568:	f000 fcb8 	bl	8007edc <_sbrk_r>
 800756c:	6030      	str	r0, [r6, #0]
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fcb3 	bl	8007edc <_sbrk_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d103      	bne.n	8007582 <sbrk_aligned+0x26>
 800757a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800757e:	4620      	mov	r0, r4
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	1cc4      	adds	r4, r0, #3
 8007584:	f024 0403 	bic.w	r4, r4, #3
 8007588:	42a0      	cmp	r0, r4
 800758a:	d0f8      	beq.n	800757e <sbrk_aligned+0x22>
 800758c:	1a21      	subs	r1, r4, r0
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fca4 	bl	8007edc <_sbrk_r>
 8007594:	3001      	adds	r0, #1
 8007596:	d1f2      	bne.n	800757e <sbrk_aligned+0x22>
 8007598:	e7ef      	b.n	800757a <sbrk_aligned+0x1e>
 800759a:	bf00      	nop
 800759c:	2000061c 	.word	0x2000061c

080075a0 <_malloc_r>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	1ccd      	adds	r5, r1, #3
 80075a6:	f025 0503 	bic.w	r5, r5, #3
 80075aa:	3508      	adds	r5, #8
 80075ac:	2d0c      	cmp	r5, #12
 80075ae:	bf38      	it	cc
 80075b0:	250c      	movcc	r5, #12
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	4606      	mov	r6, r0
 80075b6:	db01      	blt.n	80075bc <_malloc_r+0x1c>
 80075b8:	42a9      	cmp	r1, r5
 80075ba:	d904      	bls.n	80075c6 <_malloc_r+0x26>
 80075bc:	230c      	movs	r3, #12
 80075be:	6033      	str	r3, [r6, #0]
 80075c0:	2000      	movs	r0, #0
 80075c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800769c <_malloc_r+0xfc>
 80075ca:	f000 faa3 	bl	8007b14 <__malloc_lock>
 80075ce:	f8d8 3000 	ldr.w	r3, [r8]
 80075d2:	461c      	mov	r4, r3
 80075d4:	bb44      	cbnz	r4, 8007628 <_malloc_r+0x88>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff ffbf 	bl	800755c <sbrk_aligned>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	4604      	mov	r4, r0
 80075e2:	d158      	bne.n	8007696 <_malloc_r+0xf6>
 80075e4:	f8d8 4000 	ldr.w	r4, [r8]
 80075e8:	4627      	mov	r7, r4
 80075ea:	2f00      	cmp	r7, #0
 80075ec:	d143      	bne.n	8007676 <_malloc_r+0xd6>
 80075ee:	2c00      	cmp	r4, #0
 80075f0:	d04b      	beq.n	800768a <_malloc_r+0xea>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	eb04 0903 	add.w	r9, r4, r3
 80075fc:	f000 fc6e 	bl	8007edc <_sbrk_r>
 8007600:	4581      	cmp	r9, r0
 8007602:	d142      	bne.n	800768a <_malloc_r+0xea>
 8007604:	6821      	ldr	r1, [r4, #0]
 8007606:	1a6d      	subs	r5, r5, r1
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ffa6 	bl	800755c <sbrk_aligned>
 8007610:	3001      	adds	r0, #1
 8007612:	d03a      	beq.n	800768a <_malloc_r+0xea>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	442b      	add	r3, r5
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	f8d8 3000 	ldr.w	r3, [r8]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	bb62      	cbnz	r2, 800767c <_malloc_r+0xdc>
 8007622:	f8c8 7000 	str.w	r7, [r8]
 8007626:	e00f      	b.n	8007648 <_malloc_r+0xa8>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	1b52      	subs	r2, r2, r5
 800762c:	d420      	bmi.n	8007670 <_malloc_r+0xd0>
 800762e:	2a0b      	cmp	r2, #11
 8007630:	d917      	bls.n	8007662 <_malloc_r+0xc2>
 8007632:	1961      	adds	r1, r4, r5
 8007634:	42a3      	cmp	r3, r4
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	bf18      	it	ne
 800763a:	6059      	strne	r1, [r3, #4]
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	bf08      	it	eq
 8007640:	f8c8 1000 	streq.w	r1, [r8]
 8007644:	5162      	str	r2, [r4, r5]
 8007646:	604b      	str	r3, [r1, #4]
 8007648:	4630      	mov	r0, r6
 800764a:	f000 fa69 	bl	8007b20 <__malloc_unlock>
 800764e:	f104 000b 	add.w	r0, r4, #11
 8007652:	1d23      	adds	r3, r4, #4
 8007654:	f020 0007 	bic.w	r0, r0, #7
 8007658:	1ac2      	subs	r2, r0, r3
 800765a:	bf1c      	itt	ne
 800765c:	1a1b      	subne	r3, r3, r0
 800765e:	50a3      	strne	r3, [r4, r2]
 8007660:	e7af      	b.n	80075c2 <_malloc_r+0x22>
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	bf0c      	ite	eq
 8007668:	f8c8 2000 	streq.w	r2, [r8]
 800766c:	605a      	strne	r2, [r3, #4]
 800766e:	e7eb      	b.n	8007648 <_malloc_r+0xa8>
 8007670:	4623      	mov	r3, r4
 8007672:	6864      	ldr	r4, [r4, #4]
 8007674:	e7ae      	b.n	80075d4 <_malloc_r+0x34>
 8007676:	463c      	mov	r4, r7
 8007678:	687f      	ldr	r7, [r7, #4]
 800767a:	e7b6      	b.n	80075ea <_malloc_r+0x4a>
 800767c:	461a      	mov	r2, r3
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	42a3      	cmp	r3, r4
 8007682:	d1fb      	bne.n	800767c <_malloc_r+0xdc>
 8007684:	2300      	movs	r3, #0
 8007686:	6053      	str	r3, [r2, #4]
 8007688:	e7de      	b.n	8007648 <_malloc_r+0xa8>
 800768a:	230c      	movs	r3, #12
 800768c:	6033      	str	r3, [r6, #0]
 800768e:	4630      	mov	r0, r6
 8007690:	f000 fa46 	bl	8007b20 <__malloc_unlock>
 8007694:	e794      	b.n	80075c0 <_malloc_r+0x20>
 8007696:	6005      	str	r5, [r0, #0]
 8007698:	e7d6      	b.n	8007648 <_malloc_r+0xa8>
 800769a:	bf00      	nop
 800769c:	20000620 	.word	0x20000620

080076a0 <_printf_common>:
 80076a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	4616      	mov	r6, r2
 80076a6:	4698      	mov	r8, r3
 80076a8:	688a      	ldr	r2, [r1, #8]
 80076aa:	690b      	ldr	r3, [r1, #16]
 80076ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bfb8      	it	lt
 80076b4:	4613      	movlt	r3, r2
 80076b6:	6033      	str	r3, [r6, #0]
 80076b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076bc:	4607      	mov	r7, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	b10a      	cbz	r2, 80076c6 <_printf_common+0x26>
 80076c2:	3301      	adds	r3, #1
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	0699      	lsls	r1, r3, #26
 80076ca:	bf42      	ittt	mi
 80076cc:	6833      	ldrmi	r3, [r6, #0]
 80076ce:	3302      	addmi	r3, #2
 80076d0:	6033      	strmi	r3, [r6, #0]
 80076d2:	6825      	ldr	r5, [r4, #0]
 80076d4:	f015 0506 	ands.w	r5, r5, #6
 80076d8:	d106      	bne.n	80076e8 <_printf_common+0x48>
 80076da:	f104 0a19 	add.w	sl, r4, #25
 80076de:	68e3      	ldr	r3, [r4, #12]
 80076e0:	6832      	ldr	r2, [r6, #0]
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	42ab      	cmp	r3, r5
 80076e6:	dc26      	bgt.n	8007736 <_printf_common+0x96>
 80076e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	3b00      	subs	r3, #0
 80076f0:	bf18      	it	ne
 80076f2:	2301      	movne	r3, #1
 80076f4:	0692      	lsls	r2, r2, #26
 80076f6:	d42b      	bmi.n	8007750 <_printf_common+0xb0>
 80076f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076fc:	4641      	mov	r1, r8
 80076fe:	4638      	mov	r0, r7
 8007700:	47c8      	blx	r9
 8007702:	3001      	adds	r0, #1
 8007704:	d01e      	beq.n	8007744 <_printf_common+0xa4>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	6922      	ldr	r2, [r4, #16]
 800770a:	f003 0306 	and.w	r3, r3, #6
 800770e:	2b04      	cmp	r3, #4
 8007710:	bf02      	ittt	eq
 8007712:	68e5      	ldreq	r5, [r4, #12]
 8007714:	6833      	ldreq	r3, [r6, #0]
 8007716:	1aed      	subeq	r5, r5, r3
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	bf0c      	ite	eq
 800771c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007720:	2500      	movne	r5, #0
 8007722:	4293      	cmp	r3, r2
 8007724:	bfc4      	itt	gt
 8007726:	1a9b      	subgt	r3, r3, r2
 8007728:	18ed      	addgt	r5, r5, r3
 800772a:	2600      	movs	r6, #0
 800772c:	341a      	adds	r4, #26
 800772e:	42b5      	cmp	r5, r6
 8007730:	d11a      	bne.n	8007768 <_printf_common+0xc8>
 8007732:	2000      	movs	r0, #0
 8007734:	e008      	b.n	8007748 <_printf_common+0xa8>
 8007736:	2301      	movs	r3, #1
 8007738:	4652      	mov	r2, sl
 800773a:	4641      	mov	r1, r8
 800773c:	4638      	mov	r0, r7
 800773e:	47c8      	blx	r9
 8007740:	3001      	adds	r0, #1
 8007742:	d103      	bne.n	800774c <_printf_common+0xac>
 8007744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774c:	3501      	adds	r5, #1
 800774e:	e7c6      	b.n	80076de <_printf_common+0x3e>
 8007750:	18e1      	adds	r1, r4, r3
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	2030      	movs	r0, #48	@ 0x30
 8007756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800775a:	4422      	add	r2, r4
 800775c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007764:	3302      	adds	r3, #2
 8007766:	e7c7      	b.n	80076f8 <_printf_common+0x58>
 8007768:	2301      	movs	r3, #1
 800776a:	4622      	mov	r2, r4
 800776c:	4641      	mov	r1, r8
 800776e:	4638      	mov	r0, r7
 8007770:	47c8      	blx	r9
 8007772:	3001      	adds	r0, #1
 8007774:	d0e6      	beq.n	8007744 <_printf_common+0xa4>
 8007776:	3601      	adds	r6, #1
 8007778:	e7d9      	b.n	800772e <_printf_common+0x8e>
	...

0800777c <_printf_i>:
 800777c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	7e0f      	ldrb	r7, [r1, #24]
 8007782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007784:	2f78      	cmp	r7, #120	@ 0x78
 8007786:	4691      	mov	r9, r2
 8007788:	4680      	mov	r8, r0
 800778a:	460c      	mov	r4, r1
 800778c:	469a      	mov	sl, r3
 800778e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007792:	d807      	bhi.n	80077a4 <_printf_i+0x28>
 8007794:	2f62      	cmp	r7, #98	@ 0x62
 8007796:	d80a      	bhi.n	80077ae <_printf_i+0x32>
 8007798:	2f00      	cmp	r7, #0
 800779a:	f000 80d2 	beq.w	8007942 <_printf_i+0x1c6>
 800779e:	2f58      	cmp	r7, #88	@ 0x58
 80077a0:	f000 80b9 	beq.w	8007916 <_printf_i+0x19a>
 80077a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077ac:	e03a      	b.n	8007824 <_printf_i+0xa8>
 80077ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077b2:	2b15      	cmp	r3, #21
 80077b4:	d8f6      	bhi.n	80077a4 <_printf_i+0x28>
 80077b6:	a101      	add	r1, pc, #4	@ (adr r1, 80077bc <_printf_i+0x40>)
 80077b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077bc:	08007815 	.word	0x08007815
 80077c0:	08007829 	.word	0x08007829
 80077c4:	080077a5 	.word	0x080077a5
 80077c8:	080077a5 	.word	0x080077a5
 80077cc:	080077a5 	.word	0x080077a5
 80077d0:	080077a5 	.word	0x080077a5
 80077d4:	08007829 	.word	0x08007829
 80077d8:	080077a5 	.word	0x080077a5
 80077dc:	080077a5 	.word	0x080077a5
 80077e0:	080077a5 	.word	0x080077a5
 80077e4:	080077a5 	.word	0x080077a5
 80077e8:	08007929 	.word	0x08007929
 80077ec:	08007853 	.word	0x08007853
 80077f0:	080078e3 	.word	0x080078e3
 80077f4:	080077a5 	.word	0x080077a5
 80077f8:	080077a5 	.word	0x080077a5
 80077fc:	0800794b 	.word	0x0800794b
 8007800:	080077a5 	.word	0x080077a5
 8007804:	08007853 	.word	0x08007853
 8007808:	080077a5 	.word	0x080077a5
 800780c:	080077a5 	.word	0x080077a5
 8007810:	080078eb 	.word	0x080078eb
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	1d1a      	adds	r2, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6032      	str	r2, [r6, #0]
 800781c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007824:	2301      	movs	r3, #1
 8007826:	e09d      	b.n	8007964 <_printf_i+0x1e8>
 8007828:	6833      	ldr	r3, [r6, #0]
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	1d19      	adds	r1, r3, #4
 800782e:	6031      	str	r1, [r6, #0]
 8007830:	0606      	lsls	r6, r0, #24
 8007832:	d501      	bpl.n	8007838 <_printf_i+0xbc>
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	e003      	b.n	8007840 <_printf_i+0xc4>
 8007838:	0645      	lsls	r5, r0, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0xb8>
 800783c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007840:	2d00      	cmp	r5, #0
 8007842:	da03      	bge.n	800784c <_printf_i+0xd0>
 8007844:	232d      	movs	r3, #45	@ 0x2d
 8007846:	426d      	negs	r5, r5
 8007848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800784c:	4859      	ldr	r0, [pc, #356]	@ (80079b4 <_printf_i+0x238>)
 800784e:	230a      	movs	r3, #10
 8007850:	e011      	b.n	8007876 <_printf_i+0xfa>
 8007852:	6821      	ldr	r1, [r4, #0]
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	0608      	lsls	r0, r1, #24
 8007858:	f853 5b04 	ldr.w	r5, [r3], #4
 800785c:	d402      	bmi.n	8007864 <_printf_i+0xe8>
 800785e:	0649      	lsls	r1, r1, #25
 8007860:	bf48      	it	mi
 8007862:	b2ad      	uxthmi	r5, r5
 8007864:	2f6f      	cmp	r7, #111	@ 0x6f
 8007866:	4853      	ldr	r0, [pc, #332]	@ (80079b4 <_printf_i+0x238>)
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	bf14      	ite	ne
 800786c:	230a      	movne	r3, #10
 800786e:	2308      	moveq	r3, #8
 8007870:	2100      	movs	r1, #0
 8007872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007876:	6866      	ldr	r6, [r4, #4]
 8007878:	60a6      	str	r6, [r4, #8]
 800787a:	2e00      	cmp	r6, #0
 800787c:	bfa2      	ittt	ge
 800787e:	6821      	ldrge	r1, [r4, #0]
 8007880:	f021 0104 	bicge.w	r1, r1, #4
 8007884:	6021      	strge	r1, [r4, #0]
 8007886:	b90d      	cbnz	r5, 800788c <_printf_i+0x110>
 8007888:	2e00      	cmp	r6, #0
 800788a:	d04b      	beq.n	8007924 <_printf_i+0x1a8>
 800788c:	4616      	mov	r6, r2
 800788e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007892:	fb03 5711 	mls	r7, r3, r1, r5
 8007896:	5dc7      	ldrb	r7, [r0, r7]
 8007898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800789c:	462f      	mov	r7, r5
 800789e:	42bb      	cmp	r3, r7
 80078a0:	460d      	mov	r5, r1
 80078a2:	d9f4      	bls.n	800788e <_printf_i+0x112>
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d10b      	bne.n	80078c0 <_printf_i+0x144>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	07df      	lsls	r7, r3, #31
 80078ac:	d508      	bpl.n	80078c0 <_printf_i+0x144>
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	6861      	ldr	r1, [r4, #4]
 80078b2:	4299      	cmp	r1, r3
 80078b4:	bfde      	ittt	le
 80078b6:	2330      	movle	r3, #48	@ 0x30
 80078b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80078c0:	1b92      	subs	r2, r2, r6
 80078c2:	6122      	str	r2, [r4, #16]
 80078c4:	f8cd a000 	str.w	sl, [sp]
 80078c8:	464b      	mov	r3, r9
 80078ca:	aa03      	add	r2, sp, #12
 80078cc:	4621      	mov	r1, r4
 80078ce:	4640      	mov	r0, r8
 80078d0:	f7ff fee6 	bl	80076a0 <_printf_common>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d14a      	bne.n	800796e <_printf_i+0x1f2>
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078dc:	b004      	add	sp, #16
 80078de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	f043 0320 	orr.w	r3, r3, #32
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	4833      	ldr	r0, [pc, #204]	@ (80079b8 <_printf_i+0x23c>)
 80078ec:	2778      	movs	r7, #120	@ 0x78
 80078ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	6831      	ldr	r1, [r6, #0]
 80078f6:	061f      	lsls	r7, r3, #24
 80078f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80078fc:	d402      	bmi.n	8007904 <_printf_i+0x188>
 80078fe:	065f      	lsls	r7, r3, #25
 8007900:	bf48      	it	mi
 8007902:	b2ad      	uxthmi	r5, r5
 8007904:	6031      	str	r1, [r6, #0]
 8007906:	07d9      	lsls	r1, r3, #31
 8007908:	bf44      	itt	mi
 800790a:	f043 0320 	orrmi.w	r3, r3, #32
 800790e:	6023      	strmi	r3, [r4, #0]
 8007910:	b11d      	cbz	r5, 800791a <_printf_i+0x19e>
 8007912:	2310      	movs	r3, #16
 8007914:	e7ac      	b.n	8007870 <_printf_i+0xf4>
 8007916:	4827      	ldr	r0, [pc, #156]	@ (80079b4 <_printf_i+0x238>)
 8007918:	e7e9      	b.n	80078ee <_printf_i+0x172>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	f023 0320 	bic.w	r3, r3, #32
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	e7f6      	b.n	8007912 <_printf_i+0x196>
 8007924:	4616      	mov	r6, r2
 8007926:	e7bd      	b.n	80078a4 <_printf_i+0x128>
 8007928:	6833      	ldr	r3, [r6, #0]
 800792a:	6825      	ldr	r5, [r4, #0]
 800792c:	6961      	ldr	r1, [r4, #20]
 800792e:	1d18      	adds	r0, r3, #4
 8007930:	6030      	str	r0, [r6, #0]
 8007932:	062e      	lsls	r6, r5, #24
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	d501      	bpl.n	800793c <_printf_i+0x1c0>
 8007938:	6019      	str	r1, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0x1c6>
 800793c:	0668      	lsls	r0, r5, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0x1bc>
 8007940:	8019      	strh	r1, [r3, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	4616      	mov	r6, r2
 8007948:	e7bc      	b.n	80078c4 <_printf_i+0x148>
 800794a:	6833      	ldr	r3, [r6, #0]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	6032      	str	r2, [r6, #0]
 8007950:	681e      	ldr	r6, [r3, #0]
 8007952:	6862      	ldr	r2, [r4, #4]
 8007954:	2100      	movs	r1, #0
 8007956:	4630      	mov	r0, r6
 8007958:	f7f8 fc62 	bl	8000220 <memchr>
 800795c:	b108      	cbz	r0, 8007962 <_printf_i+0x1e6>
 800795e:	1b80      	subs	r0, r0, r6
 8007960:	6060      	str	r0, [r4, #4]
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	2300      	movs	r3, #0
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800796c:	e7aa      	b.n	80078c4 <_printf_i+0x148>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	4632      	mov	r2, r6
 8007972:	4649      	mov	r1, r9
 8007974:	4640      	mov	r0, r8
 8007976:	47d0      	blx	sl
 8007978:	3001      	adds	r0, #1
 800797a:	d0ad      	beq.n	80078d8 <_printf_i+0x15c>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	079b      	lsls	r3, r3, #30
 8007980:	d413      	bmi.n	80079aa <_printf_i+0x22e>
 8007982:	68e0      	ldr	r0, [r4, #12]
 8007984:	9b03      	ldr	r3, [sp, #12]
 8007986:	4298      	cmp	r0, r3
 8007988:	bfb8      	it	lt
 800798a:	4618      	movlt	r0, r3
 800798c:	e7a6      	b.n	80078dc <_printf_i+0x160>
 800798e:	2301      	movs	r3, #1
 8007990:	4632      	mov	r2, r6
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d09d      	beq.n	80078d8 <_printf_i+0x15c>
 800799c:	3501      	adds	r5, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dcf2      	bgt.n	800798e <_printf_i+0x212>
 80079a8:	e7eb      	b.n	8007982 <_printf_i+0x206>
 80079aa:	2500      	movs	r5, #0
 80079ac:	f104 0619 	add.w	r6, r4, #25
 80079b0:	e7f5      	b.n	800799e <_printf_i+0x222>
 80079b2:	bf00      	nop
 80079b4:	080088d5 	.word	0x080088d5
 80079b8:	080088e6 	.word	0x080088e6

080079bc <__sflush_r>:
 80079bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	0716      	lsls	r6, r2, #28
 80079c6:	4605      	mov	r5, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	d454      	bmi.n	8007a76 <__sflush_r+0xba>
 80079cc:	684b      	ldr	r3, [r1, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dc02      	bgt.n	80079d8 <__sflush_r+0x1c>
 80079d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dd48      	ble.n	8007a6a <__sflush_r+0xae>
 80079d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079da:	2e00      	cmp	r6, #0
 80079dc:	d045      	beq.n	8007a6a <__sflush_r+0xae>
 80079de:	2300      	movs	r3, #0
 80079e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079e4:	682f      	ldr	r7, [r5, #0]
 80079e6:	6a21      	ldr	r1, [r4, #32]
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	d030      	beq.n	8007a4e <__sflush_r+0x92>
 80079ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	0759      	lsls	r1, r3, #29
 80079f2:	d505      	bpl.n	8007a00 <__sflush_r+0x44>
 80079f4:	6863      	ldr	r3, [r4, #4]
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079fa:	b10b      	cbz	r3, 8007a00 <__sflush_r+0x44>
 80079fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	2300      	movs	r3, #0
 8007a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a04:	6a21      	ldr	r1, [r4, #32]
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b0      	blx	r6
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	d106      	bne.n	8007a1e <__sflush_r+0x62>
 8007a10:	6829      	ldr	r1, [r5, #0]
 8007a12:	291d      	cmp	r1, #29
 8007a14:	d82b      	bhi.n	8007a6e <__sflush_r+0xb2>
 8007a16:	4a2a      	ldr	r2, [pc, #168]	@ (8007ac0 <__sflush_r+0x104>)
 8007a18:	410a      	asrs	r2, r1
 8007a1a:	07d6      	lsls	r6, r2, #31
 8007a1c:	d427      	bmi.n	8007a6e <__sflush_r+0xb2>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6062      	str	r2, [r4, #4]
 8007a22:	04d9      	lsls	r1, r3, #19
 8007a24:	6922      	ldr	r2, [r4, #16]
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	d504      	bpl.n	8007a34 <__sflush_r+0x78>
 8007a2a:	1c42      	adds	r2, r0, #1
 8007a2c:	d101      	bne.n	8007a32 <__sflush_r+0x76>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	b903      	cbnz	r3, 8007a34 <__sflush_r+0x78>
 8007a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a36:	602f      	str	r7, [r5, #0]
 8007a38:	b1b9      	cbz	r1, 8007a6a <__sflush_r+0xae>
 8007a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	d002      	beq.n	8007a48 <__sflush_r+0x8c>
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 fa7a 	bl	8007f3c <_free_r>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a4c:	e00d      	b.n	8007a6a <__sflush_r+0xae>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b0      	blx	r6
 8007a54:	4602      	mov	r2, r0
 8007a56:	1c50      	adds	r0, r2, #1
 8007a58:	d1c9      	bne.n	80079ee <__sflush_r+0x32>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0c6      	beq.n	80079ee <__sflush_r+0x32>
 8007a60:	2b1d      	cmp	r3, #29
 8007a62:	d001      	beq.n	8007a68 <__sflush_r+0xac>
 8007a64:	2b16      	cmp	r3, #22
 8007a66:	d11e      	bne.n	8007aa6 <__sflush_r+0xea>
 8007a68:	602f      	str	r7, [r5, #0]
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e022      	b.n	8007ab4 <__sflush_r+0xf8>
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	e01b      	b.n	8007aae <__sflush_r+0xf2>
 8007a76:	690f      	ldr	r7, [r1, #16]
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	d0f6      	beq.n	8007a6a <__sflush_r+0xae>
 8007a7c:	0793      	lsls	r3, r2, #30
 8007a7e:	680e      	ldr	r6, [r1, #0]
 8007a80:	bf08      	it	eq
 8007a82:	694b      	ldreq	r3, [r1, #20]
 8007a84:	600f      	str	r7, [r1, #0]
 8007a86:	bf18      	it	ne
 8007a88:	2300      	movne	r3, #0
 8007a8a:	eba6 0807 	sub.w	r8, r6, r7
 8007a8e:	608b      	str	r3, [r1, #8]
 8007a90:	f1b8 0f00 	cmp.w	r8, #0
 8007a94:	dde9      	ble.n	8007a6a <__sflush_r+0xae>
 8007a96:	6a21      	ldr	r1, [r4, #32]
 8007a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a9a:	4643      	mov	r3, r8
 8007a9c:	463a      	mov	r2, r7
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b0      	blx	r6
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	dc08      	bgt.n	8007ab8 <__sflush_r+0xfc>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	4407      	add	r7, r0
 8007aba:	eba8 0800 	sub.w	r8, r8, r0
 8007abe:	e7e7      	b.n	8007a90 <__sflush_r+0xd4>
 8007ac0:	dfbffffe 	.word	0xdfbffffe

08007ac4 <_fflush_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	4605      	mov	r5, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	b913      	cbnz	r3, 8007ad4 <_fflush_r+0x10>
 8007ace:	2500      	movs	r5, #0
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	b118      	cbz	r0, 8007ade <_fflush_r+0x1a>
 8007ad6:	6a03      	ldr	r3, [r0, #32]
 8007ad8:	b90b      	cbnz	r3, 8007ade <_fflush_r+0x1a>
 8007ada:	f7ff fa29 	bl	8006f30 <__sinit>
 8007ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f3      	beq.n	8007ace <_fflush_r+0xa>
 8007ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ae8:	07d0      	lsls	r0, r2, #31
 8007aea:	d404      	bmi.n	8007af6 <_fflush_r+0x32>
 8007aec:	0599      	lsls	r1, r3, #22
 8007aee:	d402      	bmi.n	8007af6 <_fflush_r+0x32>
 8007af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af2:	f7ff fa98 	bl	8007026 <__retarget_lock_acquire_recursive>
 8007af6:	4628      	mov	r0, r5
 8007af8:	4621      	mov	r1, r4
 8007afa:	f7ff ff5f 	bl	80079bc <__sflush_r>
 8007afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b00:	07da      	lsls	r2, r3, #31
 8007b02:	4605      	mov	r5, r0
 8007b04:	d4e4      	bmi.n	8007ad0 <_fflush_r+0xc>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	059b      	lsls	r3, r3, #22
 8007b0a:	d4e1      	bmi.n	8007ad0 <_fflush_r+0xc>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0e:	f7ff fa8b 	bl	8007028 <__retarget_lock_release_recursive>
 8007b12:	e7dd      	b.n	8007ad0 <_fflush_r+0xc>

08007b14 <__malloc_lock>:
 8007b14:	4801      	ldr	r0, [pc, #4]	@ (8007b1c <__malloc_lock+0x8>)
 8007b16:	f7ff ba86 	b.w	8007026 <__retarget_lock_acquire_recursive>
 8007b1a:	bf00      	nop
 8007b1c:	20000618 	.word	0x20000618

08007b20 <__malloc_unlock>:
 8007b20:	4801      	ldr	r0, [pc, #4]	@ (8007b28 <__malloc_unlock+0x8>)
 8007b22:	f7ff ba81 	b.w	8007028 <__retarget_lock_release_recursive>
 8007b26:	bf00      	nop
 8007b28:	20000618 	.word	0x20000618

08007b2c <__sread>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b34:	f000 f9c0 	bl	8007eb8 <_read_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	bfab      	itete	ge
 8007b3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b40:	181b      	addge	r3, r3, r0
 8007b42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b46:	bfac      	ite	ge
 8007b48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b4a:	81a3      	strhlt	r3, [r4, #12]
 8007b4c:	bd10      	pop	{r4, pc}

08007b4e <__swrite>:
 8007b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	461f      	mov	r7, r3
 8007b54:	898b      	ldrh	r3, [r1, #12]
 8007b56:	05db      	lsls	r3, r3, #23
 8007b58:	4605      	mov	r5, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	d505      	bpl.n	8007b6c <__swrite+0x1e>
 8007b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b64:	2302      	movs	r3, #2
 8007b66:	2200      	movs	r2, #0
 8007b68:	f000 f994 	bl	8007e94 <_lseek_r>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	4632      	mov	r2, r6
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	f000 b9bb 	b.w	8007efc <_write_r>

08007b86 <__sseek>:
 8007b86:	b510      	push	{r4, lr}
 8007b88:	460c      	mov	r4, r1
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	f000 f981 	bl	8007e94 <_lseek_r>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	bf15      	itete	ne
 8007b98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ba2:	81a3      	strheq	r3, [r4, #12]
 8007ba4:	bf18      	it	ne
 8007ba6:	81a3      	strhne	r3, [r4, #12]
 8007ba8:	bd10      	pop	{r4, pc}

08007baa <__sclose>:
 8007baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bae:	f000 b93f 	b.w	8007e30 <_close_r>

08007bb2 <_realloc_r>:
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	4615      	mov	r5, r2
 8007bba:	460c      	mov	r4, r1
 8007bbc:	b921      	cbnz	r1, 8007bc8 <_realloc_r+0x16>
 8007bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	f7ff bcec 	b.w	80075a0 <_malloc_r>
 8007bc8:	b92a      	cbnz	r2, 8007bd6 <_realloc_r+0x24>
 8007bca:	f000 f9b7 	bl	8007f3c <_free_r>
 8007bce:	2400      	movs	r4, #0
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd6:	f000 f9fb 	bl	8007fd0 <_malloc_usable_size_r>
 8007bda:	4285      	cmp	r5, r0
 8007bdc:	4606      	mov	r6, r0
 8007bde:	d802      	bhi.n	8007be6 <_realloc_r+0x34>
 8007be0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007be4:	d8f4      	bhi.n	8007bd0 <_realloc_r+0x1e>
 8007be6:	4629      	mov	r1, r5
 8007be8:	4640      	mov	r0, r8
 8007bea:	f7ff fcd9 	bl	80075a0 <_malloc_r>
 8007bee:	4607      	mov	r7, r0
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d0ec      	beq.n	8007bce <_realloc_r+0x1c>
 8007bf4:	42b5      	cmp	r5, r6
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	bf28      	it	cs
 8007bfc:	4632      	movcs	r2, r6
 8007bfe:	f000 f98f 	bl	8007f20 <memcpy>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4640      	mov	r0, r8
 8007c06:	f000 f999 	bl	8007f3c <_free_r>
 8007c0a:	463c      	mov	r4, r7
 8007c0c:	e7e0      	b.n	8007bd0 <_realloc_r+0x1e>

08007c0e <__swbuf_r>:
 8007c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c10:	460e      	mov	r6, r1
 8007c12:	4614      	mov	r4, r2
 8007c14:	4605      	mov	r5, r0
 8007c16:	b118      	cbz	r0, 8007c20 <__swbuf_r+0x12>
 8007c18:	6a03      	ldr	r3, [r0, #32]
 8007c1a:	b90b      	cbnz	r3, 8007c20 <__swbuf_r+0x12>
 8007c1c:	f7ff f988 	bl	8006f30 <__sinit>
 8007c20:	69a3      	ldr	r3, [r4, #24]
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	071a      	lsls	r2, r3, #28
 8007c28:	d501      	bpl.n	8007c2e <__swbuf_r+0x20>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	b943      	cbnz	r3, 8007c40 <__swbuf_r+0x32>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 f82b 	bl	8007c8c <__swsetup_r>
 8007c36:	b118      	cbz	r0, 8007c40 <__swbuf_r+0x32>
 8007c38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	1a98      	subs	r0, r3, r2
 8007c46:	6963      	ldr	r3, [r4, #20]
 8007c48:	b2f6      	uxtb	r6, r6
 8007c4a:	4283      	cmp	r3, r0
 8007c4c:	4637      	mov	r7, r6
 8007c4e:	dc05      	bgt.n	8007c5c <__swbuf_r+0x4e>
 8007c50:	4621      	mov	r1, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	f7ff ff36 	bl	8007ac4 <_fflush_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1ed      	bne.n	8007c38 <__swbuf_r+0x2a>
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	701e      	strb	r6, [r3, #0]
 8007c6a:	6962      	ldr	r2, [r4, #20]
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d004      	beq.n	8007c7c <__swbuf_r+0x6e>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	07db      	lsls	r3, r3, #31
 8007c76:	d5e1      	bpl.n	8007c3c <__swbuf_r+0x2e>
 8007c78:	2e0a      	cmp	r6, #10
 8007c7a:	d1df      	bne.n	8007c3c <__swbuf_r+0x2e>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f7ff ff20 	bl	8007ac4 <_fflush_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d0d9      	beq.n	8007c3c <__swbuf_r+0x2e>
 8007c88:	e7d6      	b.n	8007c38 <__swbuf_r+0x2a>
	...

08007c8c <__swsetup_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <__swsetup_r+0xa8>)
 8007c90:	4605      	mov	r5, r0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	460c      	mov	r4, r1
 8007c96:	b118      	cbz	r0, 8007ca0 <__swsetup_r+0x14>
 8007c98:	6a03      	ldr	r3, [r0, #32]
 8007c9a:	b90b      	cbnz	r3, 8007ca0 <__swsetup_r+0x14>
 8007c9c:	f7ff f948 	bl	8006f30 <__sinit>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	0719      	lsls	r1, r3, #28
 8007ca6:	d422      	bmi.n	8007cee <__swsetup_r+0x62>
 8007ca8:	06da      	lsls	r2, r3, #27
 8007caa:	d407      	bmi.n	8007cbc <__swsetup_r+0x30>
 8007cac:	2209      	movs	r2, #9
 8007cae:	602a      	str	r2, [r5, #0]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cba:	e033      	b.n	8007d24 <__swsetup_r+0x98>
 8007cbc:	0758      	lsls	r0, r3, #29
 8007cbe:	d512      	bpl.n	8007ce6 <__swsetup_r+0x5a>
 8007cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc2:	b141      	cbz	r1, 8007cd6 <__swsetup_r+0x4a>
 8007cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__swsetup_r+0x46>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f935 	bl	8007f3c <_free_r>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	b94b      	cbnz	r3, 8007d06 <__swsetup_r+0x7a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfc:	d003      	beq.n	8007d06 <__swsetup_r+0x7a>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f83f 	bl	8007d84 <__smakebuf_r>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f013 0201 	ands.w	r2, r3, #1
 8007d0e:	d00a      	beq.n	8007d26 <__swsetup_r+0x9a>
 8007d10:	2200      	movs	r2, #0
 8007d12:	60a2      	str	r2, [r4, #8]
 8007d14:	6962      	ldr	r2, [r4, #20]
 8007d16:	4252      	negs	r2, r2
 8007d18:	61a2      	str	r2, [r4, #24]
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	b942      	cbnz	r2, 8007d30 <__swsetup_r+0xa4>
 8007d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d22:	d1c5      	bne.n	8007cb0 <__swsetup_r+0x24>
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	0799      	lsls	r1, r3, #30
 8007d28:	bf58      	it	pl
 8007d2a:	6962      	ldrpl	r2, [r4, #20]
 8007d2c:	60a2      	str	r2, [r4, #8]
 8007d2e:	e7f4      	b.n	8007d1a <__swsetup_r+0x8e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7f7      	b.n	8007d24 <__swsetup_r+0x98>
 8007d34:	20000030 	.word	0x20000030

08007d38 <__swhatbuf_r>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	2900      	cmp	r1, #0
 8007d42:	b096      	sub	sp, #88	@ 0x58
 8007d44:	4615      	mov	r5, r2
 8007d46:	461e      	mov	r6, r3
 8007d48:	da0d      	bge.n	8007d66 <__swhatbuf_r+0x2e>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2340      	movne	r3, #64	@ 0x40
 8007d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	6031      	str	r1, [r6, #0]
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	b016      	add	sp, #88	@ 0x58
 8007d64:	bd70      	pop	{r4, r5, r6, pc}
 8007d66:	466a      	mov	r2, sp
 8007d68:	f000 f872 	bl	8007e50 <_fstat_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	dbec      	blt.n	8007d4a <__swhatbuf_r+0x12>
 8007d70:	9901      	ldr	r1, [sp, #4]
 8007d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d7a:	4259      	negs	r1, r3
 8007d7c:	4159      	adcs	r1, r3
 8007d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d82:	e7eb      	b.n	8007d5c <__swhatbuf_r+0x24>

08007d84 <__smakebuf_r>:
 8007d84:	898b      	ldrh	r3, [r1, #12]
 8007d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d88:	079d      	lsls	r5, r3, #30
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	d507      	bpl.n	8007da0 <__smakebuf_r+0x1c>
 8007d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	2301      	movs	r3, #1
 8007d9a:	6163      	str	r3, [r4, #20]
 8007d9c:	b003      	add	sp, #12
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da0:	ab01      	add	r3, sp, #4
 8007da2:	466a      	mov	r2, sp
 8007da4:	f7ff ffc8 	bl	8007d38 <__swhatbuf_r>
 8007da8:	9f00      	ldr	r7, [sp, #0]
 8007daa:	4605      	mov	r5, r0
 8007dac:	4639      	mov	r1, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff fbf6 	bl	80075a0 <_malloc_r>
 8007db4:	b948      	cbnz	r0, 8007dca <__smakebuf_r+0x46>
 8007db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dba:	059a      	lsls	r2, r3, #22
 8007dbc:	d4ee      	bmi.n	8007d9c <__smakebuf_r+0x18>
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	e7e2      	b.n	8007d90 <__smakebuf_r+0xc>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	6020      	str	r0, [r4, #0]
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dda:	b15b      	cbz	r3, 8007df4 <__smakebuf_r+0x70>
 8007ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f847 	bl	8007e74 <_isatty_r>
 8007de6:	b128      	cbz	r0, 8007df4 <__smakebuf_r+0x70>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	431d      	orrs	r5, r3
 8007df8:	81a5      	strh	r5, [r4, #12]
 8007dfa:	e7cf      	b.n	8007d9c <__smakebuf_r+0x18>

08007dfc <memmove>:
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	eb01 0402 	add.w	r4, r1, r2
 8007e04:	d902      	bls.n	8007e0c <memmove+0x10>
 8007e06:	4284      	cmp	r4, r0
 8007e08:	4623      	mov	r3, r4
 8007e0a:	d807      	bhi.n	8007e1c <memmove+0x20>
 8007e0c:	1e43      	subs	r3, r0, #1
 8007e0e:	42a1      	cmp	r1, r4
 8007e10:	d008      	beq.n	8007e24 <memmove+0x28>
 8007e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1a:	e7f8      	b.n	8007e0e <memmove+0x12>
 8007e1c:	4402      	add	r2, r0
 8007e1e:	4601      	mov	r1, r0
 8007e20:	428a      	cmp	r2, r1
 8007e22:	d100      	bne.n	8007e26 <memmove+0x2a>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e2e:	e7f7      	b.n	8007e20 <memmove+0x24>

08007e30 <_close_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d06      	ldr	r5, [pc, #24]	@ (8007e4c <_close_r+0x1c>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7f8 fffb 	bl	8000e36 <_close>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_close_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_close_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000624 	.word	0x20000624

08007e50 <_fstat_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	@ (8007e70 <_fstat_r+0x20>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	f7f8 fff6 	bl	8000e4e <_fstat>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d102      	bne.n	8007e6c <_fstat_r+0x1c>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	b103      	cbz	r3, 8007e6c <_fstat_r+0x1c>
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000624 	.word	0x20000624

08007e74 <_isatty_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d06      	ldr	r5, [pc, #24]	@ (8007e90 <_isatty_r+0x1c>)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	602b      	str	r3, [r5, #0]
 8007e80:	f7f8 fff5 	bl	8000e6e <_isatty>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_isatty_r+0x1a>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_isatty_r+0x1a>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	20000624 	.word	0x20000624

08007e94 <_lseek_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	@ (8007eb4 <_lseek_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7f8 ffee 	bl	8000e84 <_lseek>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_lseek_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_lseek_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20000624 	.word	0x20000624

08007eb8 <_read_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_read_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7f8 ff7c 	bl	8000dc4 <_read>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_read_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_read_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20000624 	.word	0x20000624

08007edc <_sbrk_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d06      	ldr	r5, [pc, #24]	@ (8007ef8 <_sbrk_r+0x1c>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	602b      	str	r3, [r5, #0]
 8007ee8:	f7f8 ffda 	bl	8000ea0 <_sbrk>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_sbrk_r+0x1a>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_sbrk_r+0x1a>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20000624 	.word	0x20000624

08007efc <_write_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4d07      	ldr	r5, [pc, #28]	@ (8007f1c <_write_r+0x20>)
 8007f00:	4604      	mov	r4, r0
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	602a      	str	r2, [r5, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f7f8 ff77 	bl	8000dfe <_write>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_write_r+0x1e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_write_r+0x1e>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	20000624 	.word	0x20000624

08007f20 <memcpy>:
 8007f20:	440a      	add	r2, r1
 8007f22:	4291      	cmp	r1, r2
 8007f24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f28:	d100      	bne.n	8007f2c <memcpy+0xc>
 8007f2a:	4770      	bx	lr
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f36:	4291      	cmp	r1, r2
 8007f38:	d1f9      	bne.n	8007f2e <memcpy+0xe>
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <_free_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4605      	mov	r5, r0
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d041      	beq.n	8007fc8 <_free_r+0x8c>
 8007f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f48:	1f0c      	subs	r4, r1, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	bfb8      	it	lt
 8007f4e:	18e4      	addlt	r4, r4, r3
 8007f50:	f7ff fde0 	bl	8007b14 <__malloc_lock>
 8007f54:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <_free_r+0x90>)
 8007f56:	6813      	ldr	r3, [r2, #0]
 8007f58:	b933      	cbnz	r3, 8007f68 <_free_r+0x2c>
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	6014      	str	r4, [r2, #0]
 8007f5e:	4628      	mov	r0, r5
 8007f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f64:	f7ff bddc 	b.w	8007b20 <__malloc_unlock>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d908      	bls.n	8007f7e <_free_r+0x42>
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	1821      	adds	r1, r4, r0
 8007f70:	428b      	cmp	r3, r1
 8007f72:	bf01      	itttt	eq
 8007f74:	6819      	ldreq	r1, [r3, #0]
 8007f76:	685b      	ldreq	r3, [r3, #4]
 8007f78:	1809      	addeq	r1, r1, r0
 8007f7a:	6021      	streq	r1, [r4, #0]
 8007f7c:	e7ed      	b.n	8007f5a <_free_r+0x1e>
 8007f7e:	461a      	mov	r2, r3
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b10b      	cbz	r3, 8007f88 <_free_r+0x4c>
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	d9fa      	bls.n	8007f7e <_free_r+0x42>
 8007f88:	6811      	ldr	r1, [r2, #0]
 8007f8a:	1850      	adds	r0, r2, r1
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d10b      	bne.n	8007fa8 <_free_r+0x6c>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	4401      	add	r1, r0
 8007f94:	1850      	adds	r0, r2, r1
 8007f96:	4283      	cmp	r3, r0
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	d1e0      	bne.n	8007f5e <_free_r+0x22>
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	6053      	str	r3, [r2, #4]
 8007fa2:	4408      	add	r0, r1
 8007fa4:	6010      	str	r0, [r2, #0]
 8007fa6:	e7da      	b.n	8007f5e <_free_r+0x22>
 8007fa8:	d902      	bls.n	8007fb0 <_free_r+0x74>
 8007faa:	230c      	movs	r3, #12
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	e7d6      	b.n	8007f5e <_free_r+0x22>
 8007fb0:	6820      	ldr	r0, [r4, #0]
 8007fb2:	1821      	adds	r1, r4, r0
 8007fb4:	428b      	cmp	r3, r1
 8007fb6:	bf04      	itt	eq
 8007fb8:	6819      	ldreq	r1, [r3, #0]
 8007fba:	685b      	ldreq	r3, [r3, #4]
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	bf04      	itt	eq
 8007fc0:	1809      	addeq	r1, r1, r0
 8007fc2:	6021      	streq	r1, [r4, #0]
 8007fc4:	6054      	str	r4, [r2, #4]
 8007fc6:	e7ca      	b.n	8007f5e <_free_r+0x22>
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000620 	.word	0x20000620

08007fd0 <_malloc_usable_size_r>:
 8007fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd4:	1f18      	subs	r0, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bfbc      	itt	lt
 8007fda:	580b      	ldrlt	r3, [r1, r0]
 8007fdc:	18c0      	addlt	r0, r0, r3
 8007fde:	4770      	bx	lr

08007fe0 <_init>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	bf00      	nop
 8007fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe6:	bc08      	pop	{r3}
 8007fe8:	469e      	mov	lr, r3
 8007fea:	4770      	bx	lr

08007fec <_fini>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr
